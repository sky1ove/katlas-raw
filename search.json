[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "katlas-raw",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "katlas-raw"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "katlas-raw",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall katlas_raw in Development mode\n# make sure katlas_raw package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to katlas_raw\n$ nbdev_prepare",
    "crumbs": [
      "katlas-raw"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "katlas-raw",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/sky1ove/katlas-raw.git\nor from conda\n$ conda install -c sky1ove katlas_raw\nor from pypi\n$ pip install katlas_raw\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "katlas-raw"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "katlas-raw",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "katlas-raw"
    ]
  },
  {
    "objectID": "kinase_domain/kd_12_compare_pred_psp_known.html",
    "href": "kinase_domain/kd_12_compare_pred_psp_known.html",
    "title": "katlas-raw",
    "section": "",
    "text": "import pandas as pd\nfrom katlas.pssm import *\nfrom matplotlib import pyplot as plt\nfrom functools import partial\ndf = pd.read_csv('raw/psp_ks_dataset_2408.csv')\ndf['kin_uniprot'] = df.KIN_ACC_ID.str.split('-').str[0]\ndf.kin_uniprot.value_counts()\n\nkin_uniprot\nP17612    1105\nP06493     816\nP68400     799\nP17252     772\nP12931     753\n          ... \nO54988       1\nQ9BRS2       1\nQ80X41       1\nO55098       1\nQ5U4C9       1\nName: count, Length: 834, dtype: int64\nnonhuman = (df.KIN_ORGANISM.value_counts()&gt;13)[lambda x: x].index[1:]\nnonhuman\n\nIndex(['mouse', 'rat', 'cow', 'chicken', 'rabbit', 'pig', 'herpesvirus'], dtype='object', name='KIN_ORGANISM')\ndf = df[df.KIN_ORGANISM.isin(nonhuman)]\ndf.shape\n\n(4759, 17)\ndf['sub_uniprot']=df.SUB_ACC_ID.str.split('-').str[0]\ndf['sub_site'] = df.sub_uniprot+\"_\"+df.SUB_MOD_RSD\ndf.shape\n\n(4759, 19)\n# remove sub site duplicates for each kinase\ndf = df.drop_duplicates(subset=['kin_uniprot','sub_site'])\ndf.shape\n\n(4734, 19)\nkin_idxs = (df.kin_uniprot.value_counts()&gt;=30)[lambda x: x].index\npred_pspa=pd.read_parquet('raw/pred_new_pspa.parquet')\npred_cddm=pd.read_parquet('raw/pred_new_cddm.parquet')\nidxs = pred_pspa.index.str.split('_').str[0]\nidxs.isin(df.kin_uniprot).sum()\n\nnp.int64(322)\nidxs.isin(kin_idxs).sum()\n\nnp.int64(34)\ndf['site_seq'] = df['SITE_+/-7_AA']\npsp_nonhuman = get_cluster_pssms(df,cluster_col = 'kin_uniprot',count_thr=30)\n\n100%|███████████████████████████████████████████████████████████████████████████████████████████| 391/391 [00:00&lt;00:00, 706.09it/s]\nidx_overlap = list(set(idxs)&set(psp_nonhuman.index))\nori_index = pred_pspa.index\npred_pspa.index=pred_pspa.index.str.split('_').str[0]\npred_pspa = pred_pspa.loc[idx_overlap]\nnonhuman_pspa = psp_nonhuman.loc[idx_overlap]",
    "crumbs": [
      "kinase_domain",
      "Comopare the two"
    ]
  },
  {
    "objectID": "kinase_domain/kd_12_compare_pred_psp_known.html#comopare-the-two",
    "href": "kinase_domain/kd_12_compare_pred_psp_known.html#comopare-the-two",
    "title": "katlas-raw",
    "section": "Comopare the two",
    "text": "Comopare the two\n\ndef score_df(target,pred,func):\n    cols = list(set(target.columns)&set(pred.columns))\n    distance = [func(target.loc[i,cols],pred.loc[i,cols]) for i in target.index]\n    return pd.Series(distance,index=target.index)\n\n\njsd_df = partial(score_df,func=js_divergence_flat)\n\n\njsd_score = jsd_df(nonhuman_pspa,pred_pspa).sort_values()\n\n\npred_pspa,nonhuman_pspa = pred_pspa.align(nonhuman_pspa,join='inner')\n\n\nfor idx,score in jsd_score.items():\n    pssm1 = recover_pssm(nonhuman_pspa.loc[idx])\n    pssm2 = recover_pssm(pred_pspa.loc[idx])\n    \n    plot_two_heatmaps(pssm1,pssm2,f'{idx}:{score:.3f}','PSP','Predicted',scale_01=False)\n    plt.show()\n    plt.close()\n    # break",
    "crumbs": [
      "kinase_domain",
      "Comopare the two"
    ]
  },
  {
    "objectID": "kinase_domain/kd_08b_similarity_relationship_cddm.html",
    "href": "kinase_domain/kd_08b_similarity_relationship_cddm.html",
    "title": "KD similarity & PSSM similarity",
    "section": "",
    "text": "import pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy.linalg import norm\nfrom katlas.data import *\nfrom scipy.stats import spearmanr\nfrom katlas.clustering import *\n# pspa_t5 = pd.read_parquet('train/pspa_t5.parquet')\ncddm_t5 = pd.read_parquet('train/cddm_t5.parquet')\ndf = cddm_t5.copy()\ndf['0pY'].sort_values()\n\nO75385_ULK1_HUMAN_KD1     0.000000\nO15530_PDPK1_HUMAN_KD1    0.000000\nP78527_PRKDC_HUMAN_KD1    0.000000\nQ8IU85_KCC1D_HUMAN_KD1    0.000000\nQ13535_ATR_HUMAN_KD1      0.000000\n                            ...   \nQ15303_ERBB4_HUMAN_KD1    0.933654\nP22455_FGFR4_HUMAN_KD1    0.936460\nP54764_EPHA4_HUMAN_KD1    0.936728\nP10721_KIT_HUMAN_KD1      0.939353\nQ15375_EPHA7_HUMAN_KD1    0.939747\nName: 0pY, Length: 320, dtype: float64\nst = df[df['0pY']&lt;0.7].copy()\ntyr = df[df['0pY']&gt;=0.7].copy()\ndef euclidean_dist(u, v):\n    return norm(u - v)\ndef get_dist(df):\n    df =df.copy()\n    t5_cols = df.columns[df.columns.str.startswith('T5')]\n    pssm_cols = df.columns[~df.columns.str.startswith('T5')]\n    D_pssm = get_1d_js_parallel(df[pssm_cols])\n    D_t5 = get_1d_distance_parallel(df[t5_cols],func_flat=euclidean_dist)\n    return D_t5,D_pssm\nD_t5,D_pssm= get_dist(st)\n\n100%|████████████████████████████████████████████████████████████████████████████████████████████| 241/241 [00:42&lt;00:00,  5.62it/s]\n100%|████████████████████████████████████████████████████████████████████████████████████████████| 241/241 [00:03&lt;00:00, 70.38it/s]\nD_t5_y,D_pssm_y= get_dist(tyr)\n\n100%|██████████████████████████████████████████████████████████████████████████████████████████████| 79/79 [00:04&lt;00:00, 16.69it/s]\n100%|█████████████████████████████████████████████████████████████████████████████████████████████| 79/79 [00:00&lt;00:00, 185.65it/s]\ndef plot_scatter(x, y,line=None):\n    plt.figure(figsize=(4,3), dpi=300)\n    plt.scatter(x, y, s=3, alpha=0.3)\n\n    # labels\n    plt.xlabel(\"Euclidean distance in T5 embeddings of KDs\")\n    plt.ylabel(\"JS divergence in PSSMs\")\n\n    # calculate Spearman correlation\n    rho, pval = spearmanr(x, y)\n\n    # annotate Spearman correlation coefficient on the plot\n    plt.text(0.95, 0.95, f\"Spearman ρ = {rho:.3f}\", \n             ha=\"right\", va=\"top\", transform=plt.gca().transAxes,\n             fontsize=10, bbox=dict(facecolor=\"white\", alpha=0.6, edgecolor=\"none\"))\n\n    if line is not None: plt.axvline(x=line, color=\"darkred\", alpha=0.7,linestyle=\"--\", linewidth=1)\n    plt.tight_layout()\nplot_scatter(D_t5,D_pssm,line=0.25)\nplot_scatter(D_t5_y,D_pssm_y,line=0.25)",
    "crumbs": [
      "kinase_domain",
      "KD similarity & PSSM similarity"
    ]
  },
  {
    "objectID": "kinase_domain/kd_08b_similarity_relationship_cddm.html#distance-in-all-kd",
    "href": "kinase_domain/kd_08b_similarity_relationship_cddm.html#distance-in-all-kd",
    "title": "KD similarity & PSSM similarity",
    "section": "Distance in all kd",
    "text": "Distance in all kd\n\ndf  = Data.get_kd_uniprot()\ndf = df[df.active_D1_D2==1].reset_index(drop=True)\n\n\n# df['in_pspa']  = df.kd_ID.isin(pspa_t5.index).astype(int)\ndf['in_cddm']  = df.kd_ID.isin(cddm_t5.index).astype(int)\n\n\nfrom katlas.feature import *\n\n\n# t5 = get_t5(df,col='kd_seq')\n\n# t5.index=df.kd_ID\n\n# t5 = t5.astype('float64')\n\n# t5.to_parquet('out/uniprot_kd_t5.parquet')\n\n\nt5_df = pd.read_parquet('raw/t5_kd.parquet')\n\n\ndef find_close_negatives(df: pd.DataFrame,\n                         label_series,\n                         threshold: float = 0.25,\n                         return_all: bool = False) -&gt; pd.DataFrame:\n    \"\"\"\n    For each negative (label_col==0), find the nearest positive (label_col==1)\n    by Euclidean distance over `features`, and mark whether it's within `threshold`.\n\n    Returns a DataFrame indexed by the negatives' index with columns:\n      - closest_pos_index\n      - closest_dist\n      - within_threshold (bool)\n    If `return_all=False`, only rows within threshold are returned.\n    \"\"\"\n\n    # Extract arrays\n    mask_pos = label_series.eq(1).to_numpy()\n    mask_neg = ~mask_pos\n\n    X_pos = df.loc[mask_pos].to_numpy(dtype=float, copy=False)\n    X_neg = df.loc[mask_neg].to_numpy(dtype=float, copy=False)\n\n    # Handle edge cases\n    if X_pos.size == 0 or X_neg.size == 0:\n        out = pd.DataFrame(columns=[\"closest_pos_index\", \"closest_dist\", \"within_threshold\"],\n                           index=df.index[mask_neg])\n        return out if return_all else out.iloc[0:0]\n\n    # Pairwise squared distances: ||a-b||^2 = ||a||^2 + ||b||^2 - 2 a·b\n    sq_pos = np.einsum('ij,ij-&gt;i', X_pos, X_pos)            # (P,)\n    sq_neg = np.einsum('ij,ij-&gt;i', X_neg, X_neg)            # (N,)\n    D2 = sq_neg[:, None] + sq_pos[None, :] - 2.0 * (X_neg @ X_pos.T)\n    np.maximum(D2, 0.0, out=D2)                             # numerical safety\n    # Nearest positive for each negative\n    idx_min = D2.argmin(axis=1)                             # (N,)\n    dmin = np.sqrt(D2[np.arange(D2.shape[0]), idx_min])     # (N,)\n\n    # Map back to indices\n    pos_index = df.index[mask_pos].to_numpy()\n    neg_index = df.index[mask_neg].to_numpy()\n    closest_pos_index = pos_index[idx_min]\n\n    out = pd.DataFrame({\n        \"closest_pos_index\": closest_pos_index,\n        \"closest_dist\": dmin,\n        \"within_threshold\": dmin &lt;= threshold,\n    }, index=neg_index)\n\n    return out if return_all else out[out[\"within_threshold\"]]\n\n\nresults_cddm = find_close_negatives(t5_df, label_series=df.in_cddm,\n                                   threshold=0.25, return_all=True)\n\n\nresults_cddm.to_parquet('raw/kd_similar_cddm.parquet')\n\n\nresults_cddm[results_cddm.within_threshold].sort_values('closest_dist')\n\n\n\n\n\n\n\n\nclosest_pos_index\nclosest_dist\nwithin_threshold\n\n\n\n\nA4K2T0_STK4_MACMU_KD1\nQ13043_STK4_HUMAN_KD1\n0.000000\nTrue\n\n\nQ9WV60_GSK3B_MOUSE_KD1\nP49841_GSK3B_HUMAN_KD1\n0.000000\nTrue\n\n\nA4K2Y1_STK4_CHLAE_KD1\nQ13043_STK4_HUMAN_KD1\n0.000000\nTrue\n\n\nE2QWQ2_NLK_CANLF_KD1\nQ9UBE8_NLK_HUMAN_KD1\n0.000000\nTrue\n\n\nQ8CIP4_MARK4_MOUSE_KD1\nQ96L34_MARK4_HUMAN_KD1\n0.000000\nTrue\n\n\n...\n...\n...\n...\n\n\nO08605_MKNK1_MOUSE_KD1\nQ9HBH9_MKNK2_HUMAN_KD1\n0.248701\nTrue\n\n\nP87253_KPC1_NEUCR_KD1\nQ04759_KPCT_HUMAN_KD1\n0.249016\nTrue\n\n\nP47817_WEE2A_XENLA_KD1\nP30291_WEE1_HUMAN_KD1\n0.249110\nTrue\n\n\nQ9W739_CDK1_RANDY_KD1\nP06493_CDK1_HUMAN_KD1\n0.249479\nTrue\n\n\nQ8AYG3_TTK_DANRE_KD1\nP33981_TTK_HUMAN_KD1\n0.249601\nTrue\n\n\n\n\n1195 rows × 3 columns",
    "crumbs": [
      "kinase_domain",
      "KD similarity & PSSM similarity"
    ]
  },
  {
    "objectID": "kinase_domain/kd_09a_predict_pspa.html",
    "href": "kinase_domain/kd_09a_predict_pspa.html",
    "title": "Predict",
    "section": "",
    "text": "import pandas as pd\nfrom katlas.train import *\nfrom katlas.dnn import *\nfrom fastai.vision.all import *\nfrom katlas.pssm import *\npspa_unk = pd.read_parquet('raw/kd_similar_pspa.parquet')\npspa_unk = pspa_unk[pspa_unk.within_threshold].copy()\nlen(pspa_unk)\n\n1230\n# from katlas.data import *\n\n# kd = Data.get_kd_uniprot()\nt5 = pd.read_parquet('raw/t5_kd.parquet')\ntest_pspa = t5.loc[pspa_unk.index].reset_index()",
    "crumbs": [
      "kinase_domain",
      "Predict"
    ]
  },
  {
    "objectID": "kinase_domain/kd_09a_predict_pspa.html#predict",
    "href": "kinase_domain/kd_09a_predict_pspa.html#predict",
    "title": "Predict",
    "section": "Predict",
    "text": "Predict\n\nsample=pd.read_parquet('train/pspa_t5.parquet')\n\n\ntarget_col = sample.columns[~sample.columns.str.startswith('T5')]\n\n\ntarget_col\n\nIndex(['-5P', '-4P', '-3P', '-2P', '-1P', '0P', '1P', '2P', '3P', '4P',\n       ...\n       '-5pY', '-4pY', '-3pY', '-2pY', '-1pY', '0pY', '1pY', '2pY', '3pY',\n       '4pY'],\n      dtype='object', length=230)\n\n\n\nfeat_col = test_pspa.columns[1:]\n\n\nfeat_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)\n\n\n\nn_feature = len(feat_col)\nn_target = len(target_col)\n\n\nn_feature,n_target\n\n(1024, 230)\n\n\n\ndef get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\n\nfrom tqdm import tqdm\n\n\ndef get_ensemble_pred(test_df, model_name,nfold=5):\n    ensemble = None\n    for i in tqdm(range(nfold)):\n        test_pred = predict_dl(test_df, \n                   feat_col, \n                   target_col,\n                   model_func=get_cnn, # model architecture\n                   model_pth=f'{model_name}_fold{i}', # only name, not with .pth\n                  )\n        if ensemble is None:\n            ensemble = test_pred.copy()   # start with first prediction\n        else:\n            ensemble += test_pred         # accumulate\n    \n    ensemble /= 5\n    return ensemble\n\n\npred = get_ensemble_pred(test_pspa,'cnn_pspa')\n\n100%|████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:05&lt;00:00,  1.16s/it]\n\n\n\npred.index=pspa_unk.index\n\n\npred.to_parquet('raw/pred_new_pspa.parquet')\n\n\npred\n\n\n\n\n\n\n\n\n-5P\n-4P\n-3P\n-2P\n-1P\n0P\n1P\n2P\n3P\n4P\n...\n-5pY\n-4pY\n-3pY\n-2pY\n-1pY\n0pY\n1pY\n2pY\n3pY\n4pY\n\n\n\n\nA0A8I3S724_AURKA_CANLF_KD1\n0.037882\n0.043779\n0.047041\n0.015380\n0.041898\n0.000035\n0.014323\n0.038704\n0.043827\n0.049526\n...\n0.044010\n0.040576\n0.037645\n0.013764\n0.059714\n3.364276e-06\n0.038454\n0.043046\n0.061429\n0.046730\n\n\nA0A8I5ZNK2_OXSR1_RAT_KD1\n0.049239\n0.043381\n0.043311\n0.028526\n0.024280\n0.000017\n0.015904\n0.036569\n0.055815\n0.055253\n...\n0.056746\n0.050559\n0.046230\n0.048480\n0.063029\n1.908836e-06\n0.024791\n0.022593\n0.038125\n0.032603\n\n\nA0JM20_TYRO3_XENTR_KD1\n0.051376\n0.052102\n0.052074\n0.052638\n0.039458\n0.000007\n0.014260\n0.036449\n0.041221\n0.043479\n...\n0.047453\n0.048676\n0.052394\n0.046324\n0.091800\n9.998582e-01\n0.070185\n0.070169\n0.022106\n0.042790\n\n\nA0JNB0_FYN_BOVIN_KD1\n0.046870\n0.045461\n0.040785\n0.051638\n0.031777\n0.000042\n0.014092\n0.031362\n0.044332\n0.045642\n...\n0.053741\n0.067277\n0.067271\n0.058158\n0.079825\n9.992056e-01\n0.115731\n0.104918\n0.031915\n0.042396\n\n\nA0M8R7_MET_PAPAN_KD1\n0.050430\n0.051898\n0.046124\n0.052797\n0.030787\n0.000008\n0.012470\n0.035201\n0.051783\n0.045867\n...\n0.055322\n0.063184\n0.067201\n0.055751\n0.128271\n9.998606e-01\n0.096431\n0.081910\n0.025833\n0.041041\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ9Z2R9_E2AK1_MOUSE_KD1\n0.034602\n0.038246\n0.029201\n0.018279\n0.023267\n0.000089\n0.006634\n0.026299\n0.060636\n0.040961\n...\n0.036762\n0.033087\n0.052582\n0.034784\n0.052302\n4.450690e-07\n0.022007\n0.019414\n0.033284\n0.040663\n\n\nQ9Z2W1_STK25_MOUSE_KD1\n0.045502\n0.040996\n0.040295\n0.032663\n0.030100\n0.000020\n0.017534\n0.042085\n0.043391\n0.050217\n...\n0.042046\n0.036751\n0.047517\n0.044899\n0.036057\n3.428805e-06\n0.019266\n0.016506\n0.029094\n0.024208\n\n\nQ9Z335_SBK1_RAT_KD1\n0.040285\n0.027252\n0.026376\n0.035437\n0.108038\n0.000049\n0.061123\n0.050412\n0.066567\n0.059834\n...\n0.026251\n0.025690\n0.013364\n0.027668\n0.028979\n1.546801e-06\n0.043730\n0.041582\n0.060285\n0.045016\n\n\nW0LYS5_CAMKI_MACNP_KD1\n0.049159\n0.035515\n0.025772\n0.020806\n0.057251\n0.000065\n0.014600\n0.028858\n0.027823\n0.049323\n...\n0.028890\n0.024585\n0.017603\n0.015780\n0.031326\n4.352188e-06\n0.035301\n0.101816\n0.042666\n0.032528\n\n\nX5M5N0_WNK_CAEEL_KD1\n0.038345\n0.037591\n0.039816\n0.043162\n0.025581\n0.000033\n0.016244\n0.033651\n0.038988\n0.045358\n...\n0.037754\n0.033027\n0.036153\n0.035582\n0.047813\n1.219898e-05\n0.028811\n0.033507\n0.038083\n0.036475\n\n\n\n\n1230 rows × 230 columns",
    "crumbs": [
      "kinase_domain",
      "Predict"
    ]
  },
  {
    "objectID": "kinase_domain/kd_09a_predict_pspa.html#test",
    "href": "kinase_domain/kd_09a_predict_pspa.html#test",
    "title": "Predict",
    "section": "test",
    "text": "test\n\ncdks = pspa_unk[pspa_unk.closest_pos_index.str.contains('CDK')]\n\n\nfor i in cdks.head(5).index:\n    plot_heatmap(recover_pssm(pred.loc[i]))\n    plt.show()\n    plt.close()",
    "crumbs": [
      "kinase_domain",
      "Predict"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html",
    "title": "DL training: Feature comparison on CNN model",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#setup",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#setup",
    "title": "DL training: Feature comparison on CNN model",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#data",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#data",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Data",
    "text": "Data\n\ndf_t5=pd.read_parquet('train/pspa_t5.parquet').reset_index()\ndf_esm=pd.read_parquet('train/pspa_esm.parquet').reset_index()\ndf_onehot = pd.read_parquet('train/pspa_onehot.parquet').reset_index()\ndf_onehot_pca = pd.read_parquet('train/pspa_onehot_pca.parquet').reset_index()\n\n\n(df_onehot['index'] == df_esm['index']).value_counts()\n\nindex\nTrue    368\nName: count, dtype: int64\n\n\n\n(df_t5['index'] == df_esm['index']).value_counts()\n\nindex\nTrue    368\nName: count, dtype: int64\n\n\n\nt5_col = df_t5.columns[df_t5.columns.str.startswith('T5_')]\n\n\nt5_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)\n\n\n\nesm_col = df_esm.columns[df_esm.columns.str.startswith('esm_')]\n\n\nesm_col\n\nIndex(['esm_0', 'esm_1', 'esm_2', 'esm_3', 'esm_4', 'esm_5', 'esm_6', 'esm_7',\n       'esm_8', 'esm_9',\n       ...\n       'esm_1270', 'esm_1271', 'esm_1272', 'esm_1273', 'esm_1274', 'esm_1275',\n       'esm_1276', 'esm_1277', 'esm_1278', 'esm_1279'],\n      dtype='object', length=1280)\n\n\n\ntarget_col = df_t5.columns[~df_t5.columns.isin(t5_col)][1:]\n\n\ntarget_col\n\nIndex(['-5P', '-4P', '-3P', '-2P', '-1P', '0P', '1P', '2P', '3P', '4P',\n       ...\n       '-5pY', '-4pY', '-3pY', '-2pY', '-1pY', '0pY', '1pY', '2pY', '3pY',\n       '4pY'],\n      dtype='object', length=230)\n\n\n\nonehot_col = df_onehot.columns[~df_onehot.columns.isin(target_col)][1:]\n\n\nonehot_col\n\nIndex(['65_-', '65_A', '65_C', '65_D', '65_E', '65_F', '65_G', '65_H', '65_I',\n       '65_K',\n       ...\n       '3192_M', '3192_N', '3192_P', '3192_Q', '3192_R', '3192_S', '3192_T',\n       '3192_V', '3192_W', '3192_Y'],\n      dtype='object', length=6849)\n\n\n\nonehot_pca_col = df_onehot_pca.columns[df_onehot_pca.columns.str.startswith('PCA')]\n\n\nonehot_pca_col\n\nIndex(['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9',\n       'PCA10',\n       ...\n       'PCA991', 'PCA992', 'PCA993', 'PCA994', 'PCA995', 'PCA996', 'PCA997',\n       'PCA998', 'PCA999', 'PCA1000'],\n      dtype='object', length=1000)\n\n\n\ninfo=Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\ninfo = info[info.kd_ID.notna()]\n\nsubfamily_map = info[['kd_ID','subfamily']].drop_duplicates().set_index('kd_ID')['subfamily']\nfamily_map = info[['kd_ID','family']].drop_duplicates().set_index('kd_ID')['family']\ngroup_map = info[['kd_ID','group']].drop_duplicates().set_index('kd_ID')['group']\n\npspa_info = pd.DataFrame(df_t5['index'].tolist(),columns=['kinase'])\n\npspa_info['subfamily'] = pspa_info.kinase.map(subfamily_map)\npspa_info['family'] = pspa_info.kinase.map(family_map)\npspa_info['group'] = pspa_info.kinase.map(group_map)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#split",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#split",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Split",
    "text": "Split\n\nsplits = get_splits(pspa_info, group='subfamily',nfold=5)\n\nsplit0 = splits[0]\n\nGroupKFold(n_splits=5, random_state=None, shuffle=False)\n# subfamily in train set: 120\n# subfamily in test set: 29",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#dataset",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#dataset",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Dataset",
    "text": "Dataset\n\n# dataset\nds_t5 = GeneralDataset(df_t5,t5_col,target_col)\nds_esm = GeneralDataset(df_esm,esm_col,target_col)\nds_onehot = GeneralDataset(df_onehot,onehot_col,target_col)\nds_onehot_pca = GeneralDataset(df_onehot_pca,onehot_pca_col,target_col)\n\n\nlen(ds_t5)\n\n368\n\n\n\ndl_t5 = DataLoader(ds_t5, batch_size=64, shuffle=True)\ndl_esm = DataLoader(ds_esm, batch_size=64, shuffle=True)\ndl_onehot = DataLoader(ds_onehot, batch_size=64, shuffle=True)\ndl_onehot_pca = DataLoader(ds_onehot_pca, batch_size=64, shuffle=True)\n\n\nxb,yb = next(iter(dl_t5))\n\nxb.shape,yb.shape\n\n(torch.Size([64, 1024]), torch.Size([64, 23, 10]))",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#model",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#model",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Model",
    "text": "Model\n\nn_t5 = len(t5_col)\nn_esm = len(esm_col)\nn_onehot = len(onehot_col)\nn_onehot_pca = len(onehot_pca_col)\nn_target = len(target_col)\n\n\nn_t5,n_esm,n_onehot,n_onehot_pca\n\n(1024, 1280, 6849, 1000)\n\n\n\n# def get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\ndef get_cnn_t5(): return PSSM_model(n_t5,n_target,model='CNN')\ndef get_cnn_esm(): return PSSM_model(n_esm,n_target,model='CNN')\ndef get_cnn_onehot(): return PSSM_model(n_onehot,n_target,model='CNN')\ndef get_cnn_onehot_pca(): return PSSM_model(n_onehot_pca,n_target,model='CNN')\n\n\nmodel = get_cnn_t5()\n\n\nlogits= model(xb)\n\n\nlogits.shape\n\ntorch.Size([64, 23, 10])",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#loss",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#loss",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Loss",
    "text": "Loss\n\nCE(logits,yb)\n\ntensor(3.3157, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#metrics",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#metrics",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Metrics",
    "text": "Metrics\n\nKLD(logits,yb)\n\ntensor(0.5744, grad_fn=&lt;MeanBackward0&gt;)\n\n\n\nJSD(logits,yb)\n\ntensor(0.1175, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#cv-train",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#cv-train",
    "title": "DL training: Feature comparison on CNN model",
    "section": "CV train",
    "text": "CV train\n\ncross-validation\n\n\noof_t5 = train_dl_cv(df_t5,t5_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_t5,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.231986\n3.125983\n0.406525\n0.085582\n00:05\n\n\n1\n3.138005\n3.045690\n0.326232\n0.073996\n-1:59:59\n\n\n2\n3.062126\n3.090588\n0.371130\n0.064781\n00:00\n\n\n3\n3.016940\n3.291427\n0.571969\n0.066470\n00:00\n\n\n4\n2.984665\n3.187309\n0.467851\n0.060243\n00:00\n\n\n5\n2.961451\n3.084717\n0.365259\n0.054002\n00:00\n\n\n6\n2.941049\n2.889636\n0.170178\n0.037260\n00:00\n\n\n7\n2.921982\n2.814090\n0.094632\n0.022759\n00:00\n\n\n8\n2.903746\n2.809765\n0.090306\n0.021266\n00:00\n\n\n9\n2.886869\n2.812037\n0.092579\n0.021582\n00:00\n\n\n10\n2.873026\n2.804671\n0.085213\n0.020041\n00:00\n\n\n11\n2.860586\n2.802081\n0.082622\n0.019404\n00:00\n\n\n12\n2.849770\n2.801163\n0.081705\n0.019056\n00:00\n\n\n13\n2.840398\n2.798161\n0.078702\n0.018495\n00:00\n\n\n14\n2.832530\n2.796730\n0.077272\n0.018087\n00:00\n\n\n15\n2.825470\n2.793934\n0.074476\n0.017469\n00:00\n\n\n16\n2.819361\n2.792650\n0.073192\n0.017139\n00:00\n\n\n17\n2.813775\n2.791878\n0.072420\n0.016957\n00:00\n\n\n18\n2.809550\n2.791618\n0.072160\n0.016895\n00:00\n\n\n19\n2.805743\n2.792055\n0.072597\n0.017010\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.223793\n3.123396\n0.368487\n0.080072\n00:00\n\n\n1\n3.109371\n2.997170\n0.242260\n0.058150\n00:00\n\n\n2\n3.033735\n3.019090\n0.264181\n0.044971\n00:00\n\n\n3\n2.987771\n3.001078\n0.246169\n0.046103\n00:00\n\n\n4\n2.961214\n2.931023\n0.176114\n0.040472\n00:00\n\n\n5\n2.945465\n3.011463\n0.256553\n0.040134\n00:00\n\n\n6\n2.926350\n2.862420\n0.107510\n0.025649\n00:00\n\n\n7\n2.906650\n2.837383\n0.082474\n0.019798\n00:00\n\n\n8\n2.888857\n2.830983\n0.076073\n0.018363\n00:00\n\n\n9\n2.874208\n2.834179\n0.079269\n0.019154\n00:00\n\n\n10\n2.861201\n2.829423\n0.074513\n0.017991\n00:00\n\n\n11\n2.849588\n2.825483\n0.070573\n0.017101\n00:00\n\n\n12\n2.839652\n2.827988\n0.073079\n0.017595\n00:00\n\n\n13\n2.830881\n2.823435\n0.068526\n0.016582\n00:00\n\n\n14\n2.823120\n2.821404\n0.066494\n0.016110\n00:00\n\n\n15\n2.816741\n2.820865\n0.065955\n0.016028\n00:00\n\n\n16\n2.810546\n2.820960\n0.066051\n0.015982\n00:00\n\n\n17\n2.805398\n2.819608\n0.064698\n0.015681\n00:00\n\n\n18\n2.801101\n2.819678\n0.064768\n0.015713\n00:00\n\n\n19\n2.797163\n2.819703\n0.064793\n0.015706\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.205939\n3.130619\n0.378235\n0.081714\n00:00\n\n\n1\n3.090387\n2.985123\n0.232739\n0.056950\n00:00\n\n\n2\n3.015869\n2.955130\n0.202746\n0.040430\n00:00\n\n\n3\n2.973886\n2.998454\n0.246071\n0.044894\n00:00\n\n\n4\n2.949371\n2.935931\n0.183547\n0.036840\n00:00\n\n\n5\n2.933519\n2.903759\n0.151375\n0.034098\n00:00\n\n\n6\n2.916420\n2.860321\n0.107937\n0.025347\n00:00\n\n\n7\n2.899531\n2.850880\n0.098496\n0.023110\n00:00\n\n\n8\n2.883238\n2.847718\n0.095335\n0.022554\n00:00\n\n\n9\n2.869618\n2.845551\n0.093167\n0.021987\n00:00\n\n\n10\n2.857811\n2.846352\n0.093968\n0.022244\n00:00\n\n\n11\n2.847661\n2.848390\n0.096006\n0.022610\n00:00\n\n\n12\n2.837994\n2.837989\n0.085605\n0.020239\n00:00\n\n\n13\n2.829376\n2.838523\n0.086140\n0.020283\n00:00\n\n\n14\n2.821541\n2.838088\n0.085704\n0.020245\n00:00\n\n\n15\n2.814889\n2.837663\n0.085279\n0.020044\n00:00\n\n\n16\n2.809013\n2.836939\n0.084556\n0.019932\n00:00\n\n\n17\n2.804235\n2.837022\n0.084638\n0.019987\n00:00\n\n\n18\n2.800163\n2.836908\n0.084524\n0.019963\n00:00\n\n\n19\n2.796664\n2.837320\n0.084936\n0.020062\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.195777\n3.128514\n0.365497\n0.079057\n00:00\n\n\n1\n3.092799\n2.992926\n0.229910\n0.056550\n00:00\n\n\n2\n3.020890\n2.947406\n0.184389\n0.036858\n00:00\n\n\n3\n2.978407\n2.962161\n0.199145\n0.039832\n00:00\n\n\n4\n2.953886\n2.903328\n0.140312\n0.033179\n00:00\n\n\n5\n2.935057\n2.900674\n0.137657\n0.032843\n00:00\n\n\n6\n2.915807\n2.865473\n0.102457\n0.024280\n00:00\n\n\n7\n2.896900\n2.858213\n0.095196\n0.022447\n-1:59:59\n\n\n8\n2.880532\n2.851980\n0.088964\n0.020906\n00:00\n\n\n9\n2.865812\n2.847365\n0.084349\n0.019993\n00:00\n\n\n10\n2.854017\n2.852216\n0.089200\n0.021138\n00:00\n\n\n11\n2.843368\n2.847860\n0.084843\n0.020181\n00:00\n\n\n12\n2.834106\n2.849026\n0.086009\n0.020298\n00:00\n\n\n13\n2.825445\n2.847659\n0.084642\n0.019993\n00:00\n\n\n14\n2.817815\n2.844594\n0.081577\n0.019337\n00:00\n\n\n15\n2.811150\n2.846112\n0.083096\n0.019709\n00:00\n\n\n16\n2.805433\n2.846061\n0.083044\n0.019748\n00:00\n\n\n17\n2.800725\n2.844932\n0.081915\n0.019495\n00:00\n\n\n18\n2.796557\n2.844240\n0.081223\n0.019321\n00:00\n\n\n19\n2.792958\n2.843945\n0.080928\n0.019248\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.215276\n3.119204\n0.369650\n0.080322\n00:00\n\n\n1\n3.105301\n3.022647\n0.273093\n0.061793\n00:00\n\n\n2\n3.028362\n3.080863\n0.331309\n0.054420\n00:00\n\n\n3\n2.985426\n3.196383\n0.446829\n0.055891\n00:00\n\n\n4\n2.960793\n3.046122\n0.296568\n0.049703\n00:00\n\n\n5\n2.939009\n3.013057\n0.263503\n0.045952\n00:00\n\n\n6\n2.919321\n2.914121\n0.164567\n0.036086\n00:00\n\n\n7\n2.903089\n2.873691\n0.124137\n0.027872\n00:00\n\n\n8\n2.885899\n2.859200\n0.109647\n0.025433\n00:00\n\n\n9\n2.871264\n2.847255\n0.097701\n0.022960\n00:00\n\n\n10\n2.858492\n2.841490\n0.091936\n0.021539\n00:00\n\n\n11\n2.847539\n2.846025\n0.096471\n0.022673\n00:00\n\n\n12\n2.838090\n2.838202\n0.088648\n0.020919\n00:00\n\n\n13\n2.829323\n2.837742\n0.088187\n0.020805\n00:00\n\n\n14\n2.821924\n2.836483\n0.086929\n0.020406\n00:00\n\n\n15\n2.815163\n2.835881\n0.086327\n0.020336\n00:00\n\n\n16\n2.809431\n2.836192\n0.086638\n0.020370\n00:00\n\n\n17\n2.804560\n2.835043\n0.085489\n0.020140\n00:00\n\n\n18\n2.800263\n2.834559\n0.085005\n0.019972\n00:00\n\n\n19\n2.796827\n2.834709\n0.085155\n0.019986\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_esm = train_dl_cv(df_esm,esm_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_esm,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.218573\n3.130500\n0.411041\n0.085887\n00:00\n\n\n1\n3.113306\n3.063366\n0.343908\n0.072510\n00:00\n\n\n2\n3.044713\n3.128430\n0.408971\n0.062826\n00:00\n\n\n3\n3.012064\n2.918778\n0.199320\n0.044662\n00:00\n\n\n4\n2.992838\n2.883704\n0.164246\n0.038140\n00:00\n\n\n5\n2.973829\n2.886671\n0.167212\n0.033750\n00:00\n\n\n6\n2.950023\n2.871562\n0.152104\n0.033124\n00:00\n\n\n7\n2.928650\n2.842351\n0.122893\n0.028465\n00:00\n\n\n8\n2.909526\n2.846817\n0.127358\n0.028738\n00:00\n\n\n9\n2.893397\n2.839327\n0.119868\n0.027651\n00:00\n\n\n10\n2.879705\n2.830204\n0.110746\n0.024490\n00:00\n\n\n11\n2.867001\n2.815144\n0.095686\n0.022132\n00:00\n\n\n12\n2.856134\n2.815215\n0.095757\n0.021334\n00:00\n\n\n13\n2.846439\n2.817239\n0.097781\n0.021900\n00:00\n\n\n14\n2.837932\n2.804470\n0.085012\n0.019254\n00:00\n\n\n15\n2.830515\n2.802957\n0.083499\n0.018903\n00:00\n\n\n16\n2.823586\n2.798179\n0.078721\n0.017778\n00:00\n\n\n17\n2.818660\n2.797979\n0.078521\n0.017781\n00:00\n\n\n18\n2.813803\n2.799959\n0.080501\n0.018190\n00:00\n\n\n19\n2.809424\n2.804340\n0.084882\n0.019029\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.211175\n3.126740\n0.371830\n0.080277\n00:00\n\n\n1\n3.097714\n3.006917\n0.252008\n0.059454\n00:00\n\n\n2\n3.029892\n2.989221\n0.234312\n0.043331\n00:00\n\n\n3\n2.996601\n2.897515\n0.142605\n0.033353\n00:00\n\n\n4\n2.971514\n2.883874\n0.128964\n0.030243\n00:00\n\n\n5\n2.950985\n2.868078\n0.113169\n0.026240\n00:00\n\n\n6\n2.929707\n2.863897\n0.108988\n0.025840\n00:00\n\n\n7\n2.909894\n2.847964\n0.093055\n0.022102\n00:00\n\n\n8\n2.891619\n2.835438\n0.080528\n0.019342\n00:00\n\n\n9\n2.875592\n2.832419\n0.077509\n0.018515\n00:00\n\n\n10\n2.861742\n2.844769\n0.089860\n0.021164\n00:00\n\n\n11\n2.850034\n2.837570\n0.082661\n0.019627\n-1:59:59\n\n\n12\n2.840404\n2.834485\n0.079576\n0.018942\n00:00\n\n\n13\n2.831792\n2.829283\n0.074373\n0.017769\n00:00\n\n\n14\n2.823824\n2.832996\n0.078087\n0.018544\n00:00\n\n\n15\n2.817176\n2.830905\n0.075995\n0.018151\n00:00\n\n\n16\n2.811294\n2.828579\n0.073670\n0.017569\n00:00\n\n\n17\n2.805925\n2.828720\n0.073810\n0.017546\n00:00\n\n\n18\n2.802000\n2.828678\n0.073768\n0.017531\n00:00\n\n\n19\n2.798535\n2.829595\n0.074686\n0.017751\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.189650\n3.118795\n0.366411\n0.080454\n00:00\n\n\n1\n3.072933\n2.949069\n0.196684\n0.047955\n00:00\n\n\n2\n3.003989\n2.902878\n0.150494\n0.033450\n00:00\n\n\n3\n2.965584\n2.923450\n0.171066\n0.038818\n00:00\n\n\n4\n2.947126\n2.894336\n0.141952\n0.032567\n00:00\n\n\n5\n2.933414\n2.899068\n0.146684\n0.030714\n00:00\n\n\n6\n2.917402\n2.874743\n0.122359\n0.027284\n00:00\n\n\n7\n2.903033\n2.867019\n0.114635\n0.026187\n00:00\n\n\n8\n2.887363\n2.861744\n0.109360\n0.025812\n00:00\n\n\n9\n2.873385\n2.852415\n0.100031\n0.023334\n00:00\n\n\n10\n2.860936\n2.855808\n0.103425\n0.024052\n00:00\n\n\n11\n2.849715\n2.848728\n0.096344\n0.022468\n00:00\n\n\n12\n2.840556\n2.851071\n0.098687\n0.022918\n00:00\n\n\n13\n2.831758\n2.845567\n0.093183\n0.021839\n00:00\n\n\n14\n2.824259\n2.845999\n0.093615\n0.021907\n00:00\n\n\n15\n2.817586\n2.840322\n0.087939\n0.020656\n00:00\n\n\n16\n2.811570\n2.841125\n0.088741\n0.020902\n00:00\n\n\n17\n2.806726\n2.842466\n0.090083\n0.021186\n00:00\n\n\n18\n2.802485\n2.842681\n0.090297\n0.021231\n00:00\n\n\n19\n2.798630\n2.842020\n0.089636\n0.021074\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.195183\n3.118322\n0.355305\n0.077934\n00:00\n\n\n1\n3.082233\n2.968889\n0.205872\n0.049987\n00:00\n\n\n2\n3.011883\n2.904984\n0.141968\n0.033716\n00:00\n\n\n3\n2.976276\n2.899045\n0.136029\n0.031855\n00:00\n\n\n4\n2.955704\n2.873515\n0.110498\n0.026167\n00:00\n\n\n5\n2.940040\n2.871017\n0.108000\n0.025250\n00:00\n\n\n6\n2.924179\n2.870664\n0.107647\n0.025609\n00:00\n\n\n7\n2.906053\n2.868157\n0.105140\n0.024547\n00:00\n\n\n8\n2.890117\n2.877202\n0.114185\n0.026758\n00:00\n\n\n9\n2.877448\n2.862576\n0.099559\n0.023611\n00:00\n\n\n10\n2.865353\n2.870563\n0.107546\n0.025280\n00:00\n\n\n11\n2.854365\n2.874944\n0.111927\n0.025855\n00:00\n\n\n12\n2.844372\n2.848586\n0.085569\n0.020533\n00:00\n\n\n13\n2.835772\n2.843719\n0.080703\n0.019419\n00:00\n\n\n14\n2.827890\n2.840074\n0.077057\n0.018537\n00:00\n\n\n15\n2.821218\n2.842312\n0.079296\n0.019070\n00:00\n\n\n16\n2.814460\n2.843519\n0.080502\n0.019425\n00:00\n\n\n17\n2.808998\n2.843082\n0.080066\n0.019307\n00:00\n\n\n18\n2.804054\n2.842385\n0.079369\n0.019130\n00:00\n\n\n19\n2.800103\n2.842556\n0.079539\n0.019165\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.215894\n3.136908\n0.387354\n0.082165\n00:00\n\n\n1\n3.104306\n3.038435\n0.288881\n0.063788\n00:00\n\n\n2\n3.030590\n2.996898\n0.247344\n0.048807\n00:00\n\n\n3\n2.991358\n3.048996\n0.299443\n0.054110\n00:00\n\n\n4\n2.970840\n2.980138\n0.230584\n0.042031\n00:00\n\n\n5\n2.953562\n2.913853\n0.164299\n0.032929\n00:00\n\n\n6\n2.932394\n2.891885\n0.142331\n0.030453\n00:00\n\n\n7\n2.912592\n2.876103\n0.126549\n0.028662\n00:00\n\n\n8\n2.894378\n2.854946\n0.105392\n0.024091\n00:00\n\n\n9\n2.880475\n2.878469\n0.128915\n0.029187\n00:00\n\n\n10\n2.869399\n2.866315\n0.116761\n0.026870\n-1:59:59\n\n\n11\n2.858616\n2.857310\n0.107756\n0.024535\n00:00\n\n\n12\n2.848621\n2.851251\n0.101698\n0.023382\n00:00\n\n\n13\n2.839408\n2.850880\n0.101326\n0.023133\n00:00\n\n\n14\n2.831282\n2.846311\n0.096757\n0.021999\n00:00\n\n\n15\n2.823905\n2.847420\n0.097865\n0.022233\n00:00\n\n\n16\n2.817375\n2.846087\n0.096534\n0.021952\n00:00\n\n\n17\n2.811876\n2.846603\n0.097049\n0.022015\n00:00\n\n\n18\n2.807177\n2.846167\n0.096613\n0.021907\n00:00\n\n\n19\n2.803102\n2.845773\n0.096219\n0.021831\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_onehot = train_dl_cv(df_onehot,onehot_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_onehot,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.241729\n3.129855\n0.410396\n0.085954\n00:00\n\n\n1\n3.118459\n2.949030\n0.229572\n0.057765\n00:00\n\n\n2\n3.033988\n3.190781\n0.471323\n0.088334\n00:00\n\n\n3\n2.987704\n3.219481\n0.500022\n0.092999\n00:00\n\n\n4\n2.960431\n3.010416\n0.290958\n0.060399\n00:00\n\n\n5\n2.937186\n2.858489\n0.139031\n0.032035\n00:00\n\n\n6\n2.915117\n2.825965\n0.106507\n0.024763\n00:00\n\n\n7\n2.895487\n2.815709\n0.096251\n0.022334\n00:00\n\n\n8\n2.878620\n2.811600\n0.092142\n0.021431\n00:00\n\n\n9\n2.864766\n2.806806\n0.087348\n0.020594\n00:00\n\n\n10\n2.865335\n2.823398\n0.103940\n0.024710\n00:00\n\n\n11\n2.856643\n2.865551\n0.146093\n0.034317\n00:00\n\n\n12\n2.846323\n2.844410\n0.124952\n0.029596\n00:00\n\n\n13\n2.837237\n2.846503\n0.127045\n0.030165\n00:00\n\n\n14\n2.828622\n2.844773\n0.125314\n0.029970\n00:00\n\n\n15\n2.821803\n2.845659\n0.126200\n0.030336\n00:00\n\n\n16\n2.815231\n2.854499\n0.135041\n0.032065\n00:00\n\n\n17\n2.809646\n2.853918\n0.134460\n0.031880\n00:00\n\n\n18\n2.804690\n2.863812\n0.144354\n0.033740\n00:00\n\n\n19\n2.800869\n2.862019\n0.142560\n0.033397\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.225740\n3.120343\n0.365433\n0.079265\n00:00\n\n\n1\n3.092932\n2.929717\n0.174807\n0.044543\n00:00\n\n\n2\n3.012357\n2.933971\n0.179062\n0.040116\n00:00\n\n\n3\n2.967497\n3.008852\n0.253942\n0.056422\n00:00\n\n\n4\n2.944517\n2.931387\n0.176478\n0.040202\n00:00\n\n\n5\n2.922362\n2.869078\n0.114169\n0.027175\n00:00\n\n\n6\n2.900000\n2.860790\n0.105881\n0.024987\n00:00\n\n\n7\n2.880755\n2.837488\n0.082578\n0.019853\n00:00\n\n\n8\n2.864326\n2.835598\n0.080688\n0.019286\n00:00\n\n\n9\n2.851032\n2.834610\n0.079701\n0.019193\n00:00\n\n\n10\n2.839240\n2.844608\n0.089698\n0.021751\n00:00\n\n\n11\n2.829191\n2.859667\n0.104757\n0.025480\n00:00\n\n\n12\n2.820400\n2.889618\n0.134709\n0.031713\n00:00\n\n\n13\n2.812532\n2.917234\n0.162324\n0.036734\n00:00\n\n\n14\n2.805487\n2.923786\n0.168876\n0.037859\n00:00\n\n\n15\n2.799415\n2.923557\n0.168647\n0.037845\n00:00\n\n\n16\n2.794328\n2.922689\n0.167780\n0.037635\n00:00\n\n\n17\n2.790126\n2.923844\n0.168935\n0.037836\n00:00\n\n\n18\n2.786213\n2.926367\n0.171457\n0.038297\n00:00\n\n\n19\n2.783368\n2.932413\n0.177504\n0.039521\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.218967\n3.136732\n0.384348\n0.082663\n00:00\n\n\n1\n3.093906\n2.985634\n0.233250\n0.058933\n00:00\n\n\n2\n3.011333\n2.894614\n0.142230\n0.033043\n-1:59:59\n\n\n3\n2.964075\n2.965128\n0.212744\n0.048578\n00:00\n\n\n4\n2.935478\n2.924548\n0.172164\n0.038266\n00:00\n\n\n5\n2.912812\n2.881381\n0.128998\n0.030290\n00:00\n\n\n6\n2.891613\n2.869622\n0.117238\n0.027099\n00:00\n\n\n7\n2.873108\n2.853028\n0.100644\n0.023654\n00:00\n\n\n8\n2.857590\n2.854012\n0.101628\n0.023780\n00:00\n\n\n9\n2.844302\n2.851610\n0.099226\n0.023698\n00:00\n\n\n10\n2.833019\n2.861218\n0.108834\n0.026176\n00:00\n\n\n11\n2.823390\n2.882062\n0.129678\n0.031256\n00:00\n\n\n12\n2.815375\n2.889038\n0.136654\n0.032736\n00:00\n\n\n13\n2.808285\n2.902188\n0.149804\n0.035950\n00:00\n\n\n14\n2.802253\n2.903341\n0.150957\n0.036045\n00:00\n\n\n15\n2.796853\n2.907264\n0.154880\n0.036983\n00:00\n\n\n16\n2.792192\n2.902311\n0.149927\n0.035911\n00:00\n\n\n17\n2.788202\n2.903109\n0.150725\n0.036129\n00:00\n\n\n18\n2.784824\n2.899214\n0.146830\n0.035210\n00:00\n\n\n19\n2.782123\n2.900155\n0.147771\n0.035431\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.213708\n3.135517\n0.372500\n0.080080\n00:00\n\n\n1\n3.082177\n2.988177\n0.225160\n0.056223\n00:00\n\n\n2\n3.008039\n2.911906\n0.148889\n0.033736\n00:00\n\n\n3\n2.966871\n2.987444\n0.224428\n0.049782\n00:00\n\n\n4\n2.939433\n2.915975\n0.152958\n0.035874\n00:00\n\n\n5\n2.916206\n2.878711\n0.115695\n0.027269\n00:00\n\n\n6\n2.895659\n2.865530\n0.102513\n0.024003\n00:00\n\n\n7\n2.876751\n2.852249\n0.089232\n0.021229\n00:00\n\n\n8\n2.861058\n2.847203\n0.084186\n0.019942\n00:00\n\n\n9\n2.847239\n2.851352\n0.088336\n0.021081\n00:00\n\n\n10\n2.835290\n2.867659\n0.104643\n0.025002\n00:00\n\n\n11\n2.824708\n2.896570\n0.133553\n0.031582\n00:00\n\n\n12\n2.815918\n2.988853\n0.225836\n0.051229\n00:00\n\n\n13\n2.808455\n2.996560\n0.233543\n0.053215\n00:00\n\n\n14\n2.801627\n3.011542\n0.248525\n0.055930\n00:00\n\n\n15\n2.796005\n3.014872\n0.251855\n0.055839\n00:00\n\n\n16\n2.791337\n3.019489\n0.256472\n0.056878\n00:00\n\n\n17\n2.787318\n3.022802\n0.259785\n0.057687\n00:00\n\n\n18\n2.783826\n3.014363\n0.251346\n0.056254\n00:00\n\n\n19\n2.780691\n2.995501\n0.232485\n0.052495\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.221471\n3.127624\n0.378070\n0.081323\n00:00\n\n\n1\n3.095710\n2.945078\n0.195524\n0.050102\n00:00\n\n\n2\n3.017401\n3.028205\n0.278651\n0.058818\n00:00\n\n\n3\n2.970227\n3.120655\n0.371100\n0.075140\n00:00\n\n\n4\n2.941291\n2.943682\n0.194128\n0.043123\n00:00\n\n\n5\n2.918821\n2.882842\n0.133289\n0.030490\n00:00\n\n\n6\n2.899817\n2.868371\n0.118817\n0.027515\n00:00\n\n\n7\n2.882284\n2.851362\n0.101808\n0.023707\n00:00\n\n\n8\n2.866183\n2.837627\n0.088073\n0.020545\n00:00\n\n\n9\n2.852493\n2.839459\n0.089905\n0.021024\n00:00\n\n\n10\n2.841285\n2.850833\n0.101280\n0.024133\n00:00\n\n\n11\n2.830965\n2.872638\n0.123084\n0.029573\n00:00\n\n\n12\n2.822024\n2.901451\n0.151897\n0.036424\n00:00\n\n\n13\n2.814215\n2.933485\n0.183931\n0.042047\n00:00\n\n\n14\n2.807524\n2.958659\n0.209105\n0.045336\n00:00\n\n\n15\n2.801464\n2.967607\n0.218053\n0.045995\n00:00\n\n\n16\n2.796345\n2.964210\n0.214656\n0.045273\n00:00\n\n\n17\n2.791933\n2.971480\n0.221927\n0.044817\n00:00\n\n\n18\n2.788266\n2.966847\n0.217293\n0.044949\n-1:59:59\n\n\n19\n2.785469\n2.979415\n0.229862\n0.045319\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_onehot_pca = train_dl_cv(df_onehot_pca,onehot_pca_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_onehot_pca,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.302440\n3.130807\n0.411349\n0.086566\n00:00\n\n\n1\n3.258555\n3.101584\n0.382126\n0.083854\n00:00\n\n\n2\n3.196990\n3.068951\n0.349493\n0.082148\n00:00\n\n\n3\n3.125379\n3.158087\n0.438629\n0.068792\n00:00\n\n\n4\n3.080759\n3.176002\n0.456544\n0.077207\n00:00\n\n\n5\n3.050390\n3.093245\n0.373786\n0.066183\n00:00\n\n\n6\n3.017987\n3.061568\n0.342110\n0.061022\n00:00\n\n\n7\n2.991386\n3.028012\n0.308554\n0.056661\n00:00\n\n\n8\n2.964049\n3.037252\n0.317794\n0.056610\n00:00\n\n\n9\n2.938226\n3.053089\n0.333631\n0.054992\n00:00\n\n\n10\n2.915097\n3.048690\n0.329231\n0.054219\n00:00\n\n\n11\n2.895682\n3.044618\n0.325159\n0.054037\n00:00\n\n\n12\n2.878375\n3.060385\n0.340927\n0.054751\n00:00\n\n\n13\n2.864154\n3.070291\n0.350833\n0.056314\n00:00\n\n\n14\n2.851747\n3.085761\n0.366303\n0.056557\n00:00\n\n\n15\n2.840938\n3.102062\n0.382604\n0.056397\n00:00\n\n\n16\n2.832283\n3.087585\n0.368127\n0.056023\n00:00\n\n\n17\n2.824592\n3.096884\n0.377425\n0.056253\n00:00\n\n\n18\n2.818097\n3.101140\n0.381682\n0.056162\n00:00\n\n\n19\n2.812865\n3.097883\n0.378425\n0.056126\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.298354\n3.127964\n0.373055\n0.080283\n00:00\n\n\n1\n3.247030\n3.087290\n0.332380\n0.074519\n00:00\n\n\n2\n3.169113\n3.031182\n0.276272\n0.063327\n00:00\n\n\n3\n3.094595\n3.071009\n0.316100\n0.054053\n00:00\n\n\n4\n3.048136\n3.109707\n0.354797\n0.058029\n00:00\n\n\n5\n3.015306\n3.053497\n0.298587\n0.050945\n00:00\n\n\n6\n2.986099\n2.997001\n0.242091\n0.045967\n00:00\n\n\n7\n2.957597\n3.006883\n0.251973\n0.043309\n00:00\n\n\n8\n2.931612\n2.995919\n0.241009\n0.042291\n00:00\n\n\n9\n2.908235\n2.980366\n0.225457\n0.039946\n00:00\n\n\n10\n2.888220\n2.985113\n0.230204\n0.039824\n00:00\n\n\n11\n2.871639\n2.990987\n0.236077\n0.040318\n00:00\n\n\n12\n2.856382\n2.995271\n0.240361\n0.042191\n00:00\n\n\n13\n2.843849\n2.994337\n0.239427\n0.040818\n00:00\n\n\n14\n2.833019\n2.995513\n0.240604\n0.040078\n00:00\n\n\n15\n2.823323\n3.001781\n0.246871\n0.039956\n00:00\n\n\n16\n2.815298\n3.001314\n0.246405\n0.040305\n00:00\n\n\n17\n2.808631\n3.002243\n0.247333\n0.040168\n00:00\n\n\n18\n2.803132\n2.998774\n0.243864\n0.040040\n00:00\n\n\n19\n2.798175\n2.994358\n0.239448\n0.040091\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.295080\n3.126930\n0.374546\n0.081449\n00:00\n\n\n1\n3.249624\n3.091933\n0.339549\n0.076986\n00:00\n\n\n2\n3.182515\n2.991126\n0.238742\n0.057952\n00:00\n\n\n3\n3.101832\n3.075372\n0.322987\n0.061918\n00:00\n\n\n4\n3.048044\n2.938845\n0.186461\n0.039768\n-1:59:59\n\n\n5\n3.006992\n3.011719\n0.259335\n0.053039\n00:00\n\n\n6\n2.981125\n2.945875\n0.193491\n0.042032\n00:00\n\n\n7\n2.959295\n2.916867\n0.164483\n0.037105\n00:00\n\n\n8\n2.933144\n2.903755\n0.151371\n0.034518\n00:00\n\n\n9\n2.909949\n2.905956\n0.153572\n0.034873\n00:00\n\n\n10\n2.889870\n2.902935\n0.150551\n0.032707\n00:00\n\n\n11\n2.872226\n2.900230\n0.147846\n0.032321\n00:00\n\n\n12\n2.857007\n2.898504\n0.146120\n0.031974\n00:00\n\n\n13\n2.844069\n2.895706\n0.143322\n0.031052\n00:00\n\n\n14\n2.833025\n2.895215\n0.142831\n0.030986\n00:00\n\n\n15\n2.823420\n2.898483\n0.146099\n0.032434\n00:00\n\n\n16\n2.815266\n2.897087\n0.144703\n0.032159\n00:00\n\n\n17\n2.808564\n2.899021\n0.146637\n0.032996\n00:00\n\n\n18\n2.802753\n2.897997\n0.145613\n0.032420\n00:00\n\n\n19\n2.798148\n2.898978\n0.146594\n0.032950\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.293581\n3.119297\n0.356281\n0.078183\n00:00\n\n\n1\n3.248300\n3.077060\n0.314044\n0.072615\n00:00\n\n\n2\n3.173673\n2.981124\n0.218107\n0.052698\n00:00\n\n\n3\n3.098941\n3.123670\n0.360653\n0.068389\n00:00\n\n\n4\n3.045402\n3.049009\n0.285992\n0.048215\n00:00\n\n\n5\n3.002400\n2.988642\n0.225625\n0.040536\n00:00\n\n\n6\n2.968429\n2.965917\n0.202901\n0.038006\n00:00\n\n\n7\n2.938216\n2.946674\n0.183658\n0.037474\n00:00\n\n\n8\n2.912993\n2.939785\n0.176768\n0.034624\n00:00\n\n\n9\n2.892099\n2.941057\n0.178041\n0.032950\n00:00\n\n\n10\n2.873873\n2.945688\n0.182671\n0.034669\n00:00\n\n\n11\n2.858302\n2.944762\n0.181746\n0.035534\n00:00\n\n\n12\n2.845130\n2.942033\n0.179016\n0.034631\n00:00\n\n\n13\n2.833590\n2.942556\n0.179540\n0.034126\n00:00\n\n\n14\n2.823955\n2.941175\n0.178158\n0.033951\n00:00\n\n\n15\n2.815761\n2.937775\n0.174758\n0.034204\n00:00\n\n\n16\n2.808282\n2.935336\n0.172319\n0.033550\n00:00\n\n\n17\n2.801749\n2.935470\n0.172453\n0.033193\n00:00\n\n\n18\n2.797108\n2.935189\n0.172173\n0.033423\n00:00\n\n\n19\n2.792621\n2.937222\n0.174205\n0.033567\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.293233\n3.128303\n0.378749\n0.081393\n00:00\n\n\n1\n3.246272\n3.100235\n0.350681\n0.078923\n00:00\n\n\n2\n3.178545\n3.058215\n0.308661\n0.072782\n00:00\n\n\n3\n3.108605\n3.107502\n0.357948\n0.070461\n00:00\n\n\n4\n3.062140\n3.080914\n0.331360\n0.057099\n00:00\n\n\n5\n3.025861\n3.006822\n0.257267\n0.049742\n00:00\n\n\n6\n2.992774\n3.009558\n0.260004\n0.047551\n00:00\n\n\n7\n2.959965\n2.975889\n0.226335\n0.046804\n00:00\n\n\n8\n2.932391\n2.991217\n0.241663\n0.043936\n00:00\n\n\n9\n2.909734\n2.957846\n0.208292\n0.042982\n00:00\n\n\n10\n2.888991\n2.960818\n0.211264\n0.042051\n00:00\n\n\n11\n2.871214\n2.967185\n0.217631\n0.041836\n00:00\n\n\n12\n2.856800\n2.963915\n0.214361\n0.040480\n00:00\n\n\n13\n2.844832\n2.964497\n0.214943\n0.040377\n00:00\n\n\n14\n2.833627\n2.967331\n0.217777\n0.040385\n00:00\n\n\n15\n2.824268\n2.961550\n0.211997\n0.040102\n00:00\n\n\n16\n2.816160\n2.961649\n0.212095\n0.040024\n00:00\n\n\n17\n2.809274\n2.973128\n0.223574\n0.040583\n00:00\n\n\n18\n2.803682\n2.963612\n0.214058\n0.039905\n00:00\n\n\n19\n2.798880\n2.968170\n0.218616\n0.040145\n00:00",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#score",
    "href": "kinase_domain/kd_06b_pspa_training_feature_comparison_cnn_subfamily.html#score",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Score",
    "text": "Score\n\nfrom katlas.pssm import *\n\nfrom functools import partial\n\n\ndef score_df(target,pred,func):\n    distance = [func(target.loc[i],pred.loc[i,target.columns]) for i in target.index]\n    return pd.Series(distance,index=target.index)\n\n\njsd_df = partial(score_df,func=js_divergence_flat)\njss_df = partial(score_df,func=js_similarity_flat)\n\nkld_df = partial(score_df,func=kl_divergence_flat)\n\n\ntarget=df_t5[target_col].copy()\n\n\n(oof_t5.nfold == oof_esm.nfold).value_counts()\n\nnfold\nTrue    368\nName: count, dtype: int64\n\n\n\npspa_info['split'] = oof_t5.nfold\n\n\npspa_info['t5'] =jsd_df(target,oof_t5)\npspa_info['esm'] =jsd_df(target,oof_esm)\npspa_info['onehot'] =jsd_df(target,oof_onehot)\npspa_info['onehot_pca'] =jsd_df(target,oof_onehot_pca)\n\n\nimport pandas as pd\n\nfrom katlas.plot import *\nfrom matplotlib import pyplot as plt\n\n\nset_sns()\n\n\npspa_info.to_parquet('raw/CNN_feature_compare_subfamily.parquet')\n\n\npspa_info=pd.read_parquet('raw/CNN_feature_compare_subfamily.parquet')\n\n\npspa_info = pspa_info.rename(columns={'t5':'T5(n=1,024)','esm':'ESM2(n=1,280)','onehot':'OneHot(n=6,849)','onehot_pca':'OneHot+PCA(n=1,000)'})\n\ncols=['OneHot(n=6,849)',\n      'OneHot+PCA(n=1,000)',\n      'ESM2(n=1,280)',\n      'T5(n=1,024)']\n\n\nplot_group_bar(pspa_info,cols,group='group')\nplt.ylabel('JS divergence')\nsave_svg('fig/CNN_feature_comparison_subfamily.svg')\n\n\n\n\n\n\n\n\n\nFor JS similarity (less differentiated)\n\npspa_info['t5'] =jss_df(target,oof_t5)\npspa_info['esm'] =jss_df(target,oof_esm)\npspa_info['onehot'] =jss_df(target,oof_onehot)\npspa_info['onehot_pca'] =jss_df(target,oof_onehot_pca)\n\n\nplot_group_bar(pspa_info,['t5','esm','onehot','onehot_pca'],group='group')\nplt.ylabel('JS divergence')\n\nText(0, 0.5, 'JS divergence')",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html",
    "title": "DL training: Feature comparison on MLP model",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#setup",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#setup",
    "title": "DL training: Feature comparison on MLP model",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#data",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#data",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Data",
    "text": "Data\n\ndf_t5=pd.read_parquet('train/pspa_t5.parquet').reset_index()\ndf_esm=pd.read_parquet('train/pspa_esm.parquet').reset_index()\ndf_onehot = pd.read_parquet('train/pspa_onehot.parquet').reset_index()\ndf_onehot_pca = pd.read_parquet('train/pspa_onehot_pca.parquet').reset_index()\n\n\n(df_onehot['index'] == df_esm['index']).value_counts()\n\nindex\nTrue    368\nName: count, dtype: int64\n\n\n\n(df_t5['index'] == df_esm['index']).value_counts()\n\nindex\nTrue    368\nName: count, dtype: int64\n\n\n\nt5_col = df_t5.columns[df_t5.columns.str.startswith('T5_')]\n\n\nt5_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)\n\n\n\nesm_col = df_esm.columns[df_esm.columns.str.startswith('esm_')]\n\n\nesm_col\n\nIndex(['esm_0', 'esm_1', 'esm_2', 'esm_3', 'esm_4', 'esm_5', 'esm_6', 'esm_7',\n       'esm_8', 'esm_9',\n       ...\n       'esm_1270', 'esm_1271', 'esm_1272', 'esm_1273', 'esm_1274', 'esm_1275',\n       'esm_1276', 'esm_1277', 'esm_1278', 'esm_1279'],\n      dtype='object', length=1280)\n\n\n\ntarget_col = df_t5.columns[~df_t5.columns.isin(t5_col)][1:]\n\n\ntarget_col\n\nIndex(['-5P', '-4P', '-3P', '-2P', '-1P', '0P', '1P', '2P', '3P', '4P',\n       ...\n       '-5pY', '-4pY', '-3pY', '-2pY', '-1pY', '0pY', '1pY', '2pY', '3pY',\n       '4pY'],\n      dtype='object', length=230)\n\n\n\nonehot_col = df_onehot.columns[~df_onehot.columns.isin(target_col)][1:]\n\n\nonehot_col\n\nIndex(['65_-', '65_A', '65_C', '65_D', '65_E', '65_F', '65_G', '65_H', '65_I',\n       '65_K',\n       ...\n       '3192_M', '3192_N', '3192_P', '3192_Q', '3192_R', '3192_S', '3192_T',\n       '3192_V', '3192_W', '3192_Y'],\n      dtype='object', length=6849)\n\n\n\nonehot_pca_col = df_onehot_pca.columns[df_onehot_pca.columns.str.startswith('PCA')]\n\n\nonehot_pca_col\n\nIndex(['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9',\n       'PCA10',\n       ...\n       'PCA991', 'PCA992', 'PCA993', 'PCA994', 'PCA995', 'PCA996', 'PCA997',\n       'PCA998', 'PCA999', 'PCA1000'],\n      dtype='object', length=1000)\n\n\n\ninfo=Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\ninfo = info[info.kd_ID.notna()]\n\nsubfamily_map = info[['kd_ID','subfamily']].drop_duplicates().set_index('kd_ID')['subfamily']\nfamily_map = info[['kd_ID','family']].drop_duplicates().set_index('kd_ID')['family']\ngroup_map = info[['kd_ID','group']].drop_duplicates().set_index('kd_ID')['group']\n\npspa_info = pd.DataFrame(df_t5['index'].tolist(),columns=['kinase'])\n\npspa_info['subfamily'] = pspa_info.kinase.map(subfamily_map)\npspa_info['family'] = pspa_info.kinase.map(family_map)\npspa_info['group'] = pspa_info.kinase.map(group_map)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#split",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#split",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Split",
    "text": "Split\n\nsplits = get_splits(pspa_info, group='subfamily',nfold=5)\n\nsplit0 = splits[0]\n\nGroupKFold(n_splits=5, random_state=None, shuffle=False)\n# subfamily in train set: 120\n# subfamily in test set: 29",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#dataset",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#dataset",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Dataset",
    "text": "Dataset\n\n# dataset\nds_t5 = GeneralDataset(df_t5,t5_col,target_col)\nds_esm = GeneralDataset(df_esm,esm_col,target_col)\nds_onehot = GeneralDataset(df_onehot,onehot_col,target_col)\nds_onehot_pca = GeneralDataset(df_onehot_pca,onehot_pca_col,target_col)\n\n\nlen(ds_t5)\n\n368\n\n\n\ndl_t5 = DataLoader(ds_t5, batch_size=64, shuffle=True)\ndl_esm = DataLoader(ds_esm, batch_size=64, shuffle=True)\ndl_onehot = DataLoader(ds_onehot, batch_size=64, shuffle=True)\ndl_onehot_pca = DataLoader(ds_onehot_pca, batch_size=64, shuffle=True)\n\n\nxb,yb = next(iter(dl_t5))\n\nxb.shape,yb.shape\n\n(torch.Size([64, 1024]), torch.Size([64, 23, 10]))",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#model",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#model",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Model",
    "text": "Model\n\nn_t5 = len(t5_col)\nn_esm = len(esm_col)\nn_onehot = len(onehot_col)\nn_onehot_pca = len(onehot_pca_col)\nn_target = len(target_col)\n\n\nn_t5,n_esm,n_onehot,n_onehot_pca\n\n(1024, 1280, 6849, 1000)\n\n\n\n# def get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\ndef get_mlp_t5(): return PSSM_model(n_t5,n_target,model='MLP')\ndef get_mlp_esm(): return PSSM_model(n_esm,n_target,model='MLP')\ndef get_mlp_onehot(): return PSSM_model(n_onehot,n_target,model='MLP')\ndef get_mlp_onehot_pca(): return PSSM_model(n_onehot_pca,n_target,model='MLP')\n\n\nmodel = get_mlp_t5()\n\n\nlogits= model(xb)\n\n\nlogits.shape\n\ntorch.Size([64, 23, 10])",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#loss",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#loss",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Loss",
    "text": "Loss\n\nCE(logits,yb)\n\ntensor(3.2301, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#metrics",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#metrics",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Metrics",
    "text": "Metrics\n\nKLD(logits,yb)\n\ntensor(0.4888, grad_fn=&lt;MeanBackward0&gt;)\n\n\n\nJSD(logits,yb)\n\ntensor(0.1021, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#cv-train",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#cv-train",
    "title": "DL training: Feature comparison on MLP model",
    "section": "CV train",
    "text": "CV train\n\ncross-validation\n\n\noof_t5 = train_dl_cv(df_t5,t5_col,target_col,\n                  splits = splits,\n                  model_func = get_mlp_t5,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.148606\n3.121804\n0.402347\n0.085257\n00:00\n\n\n1\n3.072263\n3.087032\n0.367574\n0.081199\n00:00\n\n\n2\n3.009716\n3.024146\n0.304688\n0.072146\n00:00\n\n\n3\n2.956377\n2.943933\n0.224475\n0.056424\n00:00\n\n\n4\n2.916552\n2.875516\n0.156058\n0.040018\n00:00\n\n\n5\n2.888994\n2.847860\n0.128402\n0.031854\n00:00\n\n\n6\n2.868063\n2.812665\n0.093207\n0.022109\n00:00\n\n\n7\n2.851901\n2.805371\n0.085913\n0.020331\n00:00\n\n\n8\n2.839283\n2.805355\n0.085897\n0.020335\n00:00\n\n\n9\n2.829078\n2.798256\n0.078798\n0.018366\n00:00\n\n\n10\n2.821064\n2.804793\n0.085335\n0.019795\n00:00\n\n\n11\n2.814147\n2.798561\n0.079103\n0.018454\n00:00\n\n\n12\n2.808187\n2.798406\n0.078948\n0.018366\n00:00\n\n\n13\n2.802989\n2.801632\n0.082174\n0.019130\n00:00\n\n\n14\n2.798415\n2.798108\n0.078650\n0.018254\n00:00\n\n\n15\n2.794516\n2.796008\n0.076550\n0.017756\n00:00\n\n\n16\n2.791063\n2.795204\n0.075746\n0.017629\n00:00\n\n\n17\n2.787868\n2.795507\n0.076049\n0.017736\n-1:59:59\n\n\n18\n2.785587\n2.795144\n0.075686\n0.017636\n00:00\n\n\n19\n2.783626\n2.795208\n0.075750\n0.017641\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.138617\n3.128191\n0.373281\n0.080388\n00:00\n\n\n1\n3.052587\n3.099994\n0.345084\n0.076962\n00:00\n\n\n2\n2.987546\n3.036049\n0.281140\n0.067385\n00:00\n\n\n3\n2.936046\n2.949912\n0.195002\n0.050177\n00:00\n\n\n4\n2.899863\n2.884509\n0.129600\n0.033173\n00:00\n\n\n5\n2.874496\n2.846201\n0.091292\n0.022750\n00:00\n\n\n6\n2.855753\n2.834026\n0.079116\n0.019371\n00:00\n\n\n7\n2.840722\n2.826782\n0.071872\n0.017719\n00:00\n\n\n8\n2.828521\n2.834439\n0.079530\n0.019417\n00:00\n\n\n9\n2.819003\n2.826963\n0.072054\n0.017538\n00:00\n\n\n10\n2.810733\n2.823351\n0.068442\n0.016784\n00:00\n\n\n11\n2.803984\n2.826729\n0.071820\n0.017377\n00:00\n\n\n12\n2.798471\n2.822295\n0.067386\n0.016392\n00:00\n\n\n13\n2.793528\n2.823175\n0.068266\n0.016555\n00:00\n\n\n14\n2.789041\n2.821938\n0.067028\n0.016247\n00:00\n\n\n15\n2.785495\n2.819557\n0.064648\n0.015734\n00:00\n\n\n16\n2.782051\n2.820376\n0.065467\n0.015946\n00:00\n\n\n17\n2.779409\n2.819542\n0.064633\n0.015715\n00:00\n\n\n18\n2.776891\n2.820054\n0.065144\n0.015840\n00:00\n\n\n19\n2.774755\n2.820162\n0.065253\n0.015864\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.132746\n3.129335\n0.376952\n0.081733\n00:00\n\n\n1\n3.044635\n3.098221\n0.345837\n0.077880\n00:00\n\n\n2\n2.977475\n3.029599\n0.277215\n0.067289\n00:00\n\n\n3\n2.928447\n2.946265\n0.193881\n0.049801\n00:00\n\n\n4\n2.894571\n2.878941\n0.126558\n0.031526\n00:00\n\n\n5\n2.870487\n2.854545\n0.102161\n0.024659\n00:00\n\n\n6\n2.851943\n2.844638\n0.092254\n0.021932\n00:00\n\n\n7\n2.837645\n2.839031\n0.086647\n0.020559\n00:00\n\n\n8\n2.826392\n2.835832\n0.083448\n0.019848\n00:00\n\n\n9\n2.817550\n2.839705\n0.087322\n0.020473\n00:00\n\n\n10\n2.810197\n2.840906\n0.088522\n0.021065\n00:00\n\n\n11\n2.804141\n2.835611\n0.083227\n0.019450\n00:00\n\n\n12\n2.798564\n2.835332\n0.082948\n0.019531\n00:00\n\n\n13\n2.793507\n2.836511\n0.084127\n0.019697\n00:00\n\n\n14\n2.789054\n2.836247\n0.083863\n0.019667\n00:00\n\n\n15\n2.785331\n2.834682\n0.082298\n0.019266\n00:00\n\n\n16\n2.782074\n2.837207\n0.084823\n0.019836\n00:00\n\n\n17\n2.779473\n2.836932\n0.084548\n0.019785\n00:00\n\n\n18\n2.777340\n2.836301\n0.083917\n0.019662\n00:00\n\n\n19\n2.775474\n2.836297\n0.083913\n0.019675\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.133904\n3.137529\n0.374512\n0.080143\n00:00\n\n\n1\n3.051439\n3.116435\n0.353418\n0.077698\n00:00\n\n\n2\n2.983982\n3.059940\n0.296923\n0.069758\n00:00\n\n\n3\n2.933919\n2.971472\n0.208456\n0.052888\n00:00\n\n\n4\n2.897793\n2.900559\n0.137543\n0.035083\n00:00\n\n\n5\n2.873204\n2.871643\n0.108627\n0.026768\n00:00\n\n\n6\n2.854192\n2.859234\n0.096217\n0.023959\n00:00\n\n\n7\n2.838984\n2.853621\n0.090605\n0.021992\n00:00\n\n\n8\n2.827404\n2.853444\n0.090427\n0.021758\n00:00\n\n\n9\n2.817780\n2.850291\n0.087274\n0.021522\n00:00\n\n\n10\n2.809961\n2.848032\n0.085015\n0.020275\n00:00\n\n\n11\n2.803262\n2.850563\n0.087546\n0.021736\n00:00\n\n\n12\n2.797405\n2.849761\n0.086744\n0.020918\n00:00\n\n\n13\n2.792234\n2.845738\n0.082722\n0.019952\n00:00\n\n\n14\n2.787778\n2.846671\n0.083654\n0.020148\n00:00\n\n\n15\n2.783718\n2.847657\n0.084641\n0.020426\n00:00\n\n\n16\n2.780527\n2.846283\n0.083267\n0.020192\n00:00\n\n\n17\n2.777715\n2.846755\n0.083738\n0.020268\n00:00\n\n\n18\n2.775372\n2.846951\n0.083934\n0.020351\n00:00\n\n\n19\n2.773362\n2.846569\n0.083552\n0.020249\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.125827\n3.126822\n0.377269\n0.081392\n00:00\n\n\n1\n3.043140\n3.096131\n0.346577\n0.077685\n00:00\n\n\n2\n2.979392\n3.034656\n0.285102\n0.068493\n00:00\n\n\n3\n2.931132\n2.957115\n0.207562\n0.052795\n00:00\n\n\n4\n2.896671\n2.893782\n0.144228\n0.036598\n00:00\n\n\n5\n2.872172\n2.861912\n0.112359\n0.027619\n00:00\n\n\n6\n2.854473\n2.847451\n0.097898\n0.023141\n00:00\n\n\n7\n2.840559\n2.843453\n0.093899\n0.022363\n00:00\n\n\n8\n2.829472\n2.845010\n0.095456\n0.022714\n00:00\n\n\n9\n2.820066\n2.836954\n0.087400\n0.020894\n00:00\n\n\n10\n2.812284\n2.835765\n0.086211\n0.020910\n00:00\n\n\n11\n2.805969\n2.840066\n0.090512\n0.021520\n00:00\n\n\n12\n2.800283\n2.836174\n0.086620\n0.020442\n00:00\n\n\n13\n2.795211\n2.834489\n0.084936\n0.020178\n00:00\n\n\n14\n2.790876\n2.834798\n0.085245\n0.020084\n00:00\n\n\n15\n2.786967\n2.835122\n0.085568\n0.020155\n00:00\n\n\n16\n2.783756\n2.831621\n0.082068\n0.019498\n-1:59:59\n\n\n17\n2.781121\n2.831618\n0.082064\n0.019431\n00:00\n\n\n18\n2.778701\n2.832057\n0.082503\n0.019483\n00:00\n\n\n19\n2.776771\n2.832255\n0.082701\n0.019531\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_esm = train_dl_cv(df_esm,esm_col,target_col,\n                  splits = splits,\n                  model_func = get_mlp_esm,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.170443\n3.128315\n0.408857\n0.086049\n00:00\n\n\n1\n3.091747\n3.074181\n0.354723\n0.079727\n00:00\n\n\n2\n3.024167\n2.957788\n0.238329\n0.059704\n00:00\n\n\n3\n2.968613\n2.866479\n0.147021\n0.037654\n00:00\n\n\n4\n2.926947\n2.807119\n0.087661\n0.020968\n00:00\n\n\n5\n2.896099\n2.801955\n0.082497\n0.019621\n00:00\n\n\n6\n2.873465\n2.799124\n0.079666\n0.018746\n00:00\n\n\n7\n2.856784\n2.796772\n0.077314\n0.018224\n00:00\n\n\n8\n2.843669\n2.794605\n0.075147\n0.017636\n00:00\n\n\n9\n2.833229\n2.799318\n0.079859\n0.018553\n00:00\n\n\n10\n2.824726\n2.800097\n0.080639\n0.018848\n00:00\n\n\n11\n2.817148\n2.793399\n0.073941\n0.017220\n00:00\n\n\n12\n2.810647\n2.795838\n0.076380\n0.017713\n00:00\n\n\n13\n2.805257\n2.795752\n0.076294\n0.017630\n00:00\n\n\n14\n2.800452\n2.791506\n0.072048\n0.016825\n00:00\n\n\n15\n2.796498\n2.791960\n0.072502\n0.016795\n00:00\n\n\n16\n2.792618\n2.793065\n0.073607\n0.017045\n00:00\n\n\n17\n2.789762\n2.792158\n0.072700\n0.016887\n00:00\n\n\n18\n2.787136\n2.791858\n0.072400\n0.016806\n00:00\n\n\n19\n2.784748\n2.791649\n0.072191\n0.016751\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.122061\n3.125437\n0.370527\n0.079903\n00:00\n\n\n1\n3.039709\n3.077375\n0.322466\n0.073699\n00:00\n\n\n2\n2.981365\n2.966509\n0.211600\n0.053809\n00:00\n\n\n3\n2.933924\n2.868390\n0.113481\n0.029373\n00:00\n\n\n4\n2.898599\n2.839211\n0.084302\n0.020951\n00:00\n\n\n5\n2.873605\n2.834185\n0.079276\n0.019625\n00:00\n\n\n6\n2.855162\n2.833194\n0.078285\n0.018720\n00:00\n\n\n7\n2.840910\n2.828449\n0.073540\n0.017761\n00:00\n\n\n8\n2.829222\n2.824754\n0.069845\n0.016848\n00:00\n\n\n9\n2.819603\n2.827720\n0.072810\n0.017521\n00:00\n\n\n10\n2.811651\n2.827686\n0.072777\n0.017430\n00:00\n\n\n11\n2.804908\n2.822721\n0.067812\n0.016356\n00:00\n\n\n12\n2.799530\n2.821344\n0.066434\n0.016001\n00:00\n\n\n13\n2.794613\n2.824224\n0.069315\n0.016675\n00:00\n\n\n14\n2.790092\n2.823013\n0.068104\n0.016371\n00:00\n\n\n15\n2.786438\n2.824799\n0.069890\n0.016737\n00:00\n\n\n16\n2.783296\n2.822070\n0.067161\n0.016108\n00:00\n\n\n17\n2.780327\n2.822039\n0.067130\n0.016070\n00:00\n\n\n18\n2.778242\n2.822380\n0.067470\n0.016145\n00:00\n\n\n19\n2.776311\n2.822826\n0.067917\n0.016256\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.131628\n3.128202\n0.375819\n0.081358\n00:00\n\n\n1\n3.046990\n3.089172\n0.336788\n0.076419\n00:00\n\n\n2\n2.980138\n2.984057\n0.231674\n0.058168\n00:00\n\n\n3\n2.931372\n2.893255\n0.140872\n0.035893\n00:00\n\n\n4\n2.896703\n2.848695\n0.096311\n0.023613\n00:00\n\n\n5\n2.872715\n2.847809\n0.095425\n0.022987\n00:00\n\n\n6\n2.854965\n2.840352\n0.087968\n0.021104\n00:00\n\n\n7\n2.841479\n2.841226\n0.088842\n0.021400\n00:00\n\n\n8\n2.829988\n2.839816\n0.087432\n0.020786\n00:00\n\n\n9\n2.820873\n2.840088\n0.087704\n0.020787\n00:00\n\n\n10\n2.813017\n2.840173\n0.087789\n0.021121\n00:00\n\n\n11\n2.806214\n2.837716\n0.085333\n0.020274\n00:00\n\n\n12\n2.800474\n2.840278\n0.087895\n0.020892\n00:00\n\n\n13\n2.795398\n2.837604\n0.085220\n0.020280\n00:00\n\n\n14\n2.791186\n2.838032\n0.085647\n0.020317\n00:00\n\n\n15\n2.787181\n2.837193\n0.084809\n0.020108\n00:00\n\n\n16\n2.783750\n2.837958\n0.085574\n0.020211\n00:00\n\n\n17\n2.781101\n2.838556\n0.086172\n0.020365\n00:00\n\n\n18\n2.778903\n2.838520\n0.086137\n0.020391\n00:00\n\n\n19\n2.776784\n2.838481\n0.086097\n0.020377\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.120882\n3.127987\n0.364970\n0.079264\n00:00\n\n\n1\n3.036895\n3.088904\n0.325887\n0.074284\n00:00\n\n\n2\n2.972838\n2.992755\n0.229738\n0.057605\n00:00\n\n\n3\n2.926071\n2.886852\n0.123836\n0.031949\n00:00\n\n\n4\n2.892499\n2.848272\n0.085255\n0.020823\n00:00\n\n\n5\n2.870296\n2.847814\n0.084798\n0.020389\n00:00\n\n\n6\n2.853154\n2.849026\n0.086010\n0.020700\n00:00\n\n\n7\n2.839834\n2.847083\n0.084066\n0.020318\n-1:59:59\n\n\n8\n2.828994\n2.844793\n0.081776\n0.019672\n00:00\n\n\n9\n2.819419\n2.842653\n0.079636\n0.019257\n00:00\n\n\n10\n2.811447\n2.841825\n0.078808\n0.019056\n00:00\n\n\n11\n2.804928\n2.848768\n0.085752\n0.020495\n00:00\n\n\n12\n2.799309\n2.842607\n0.079590\n0.019078\n00:00\n\n\n13\n2.794755\n2.841860\n0.078843\n0.019069\n00:00\n\n\n14\n2.790560\n2.844399\n0.081383\n0.019448\n00:00\n\n\n15\n2.787015\n2.840157\n0.077140\n0.018435\n00:00\n\n\n16\n2.783412\n2.840241\n0.077225\n0.018553\n00:00\n\n\n17\n2.780463\n2.841109\n0.078092\n0.018732\n00:00\n\n\n18\n2.777783\n2.840881\n0.077865\n0.018649\n00:00\n\n\n19\n2.775528\n2.840620\n0.077603\n0.018587\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.133451\n3.130460\n0.380906\n0.081534\n00:00\n\n\n1\n3.053220\n3.090420\n0.340867\n0.076725\n00:00\n\n\n2\n2.989331\n2.990456\n0.240902\n0.060124\n00:00\n\n\n3\n2.940887\n2.895016\n0.145463\n0.037410\n00:00\n\n\n4\n2.905284\n2.854676\n0.105123\n0.025265\n00:00\n\n\n5\n2.879787\n2.847856\n0.098302\n0.023136\n00:01\n\n\n6\n2.860288\n2.840653\n0.091100\n0.021613\n00:00\n\n\n7\n2.845451\n2.835020\n0.085466\n0.020448\n00:00\n\n\n8\n2.833287\n2.837122\n0.087568\n0.020906\n00:00\n\n\n9\n2.824138\n2.845146\n0.095592\n0.022325\n00:00\n\n\n10\n2.816832\n2.844034\n0.094480\n0.021783\n00:00\n\n\n11\n2.809799\n2.845085\n0.095532\n0.021947\n00:00\n\n\n12\n2.803902\n2.840001\n0.090448\n0.020957\n00:00\n\n\n13\n2.798779\n2.840082\n0.090528\n0.020978\n00:00\n\n\n14\n2.794424\n2.840935\n0.091381\n0.021004\n00:00\n\n\n15\n2.790275\n2.840972\n0.091418\n0.021129\n00:00\n\n\n16\n2.786711\n2.842730\n0.093176\n0.021477\n00:00\n\n\n17\n2.783685\n2.841322\n0.091769\n0.021195\n00:00\n\n\n18\n2.781190\n2.841967\n0.092414\n0.021321\n00:00\n\n\n19\n2.779186\n2.842168\n0.092614\n0.021357\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_onehot = train_dl_cv(df_onehot,onehot_col,target_col,\n                  splits = splits,\n                  model_func = get_mlp_onehot,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.107481\n3.079334\n0.359876\n0.080672\n00:00\n\n\n1\n3.024266\n2.912568\n0.193110\n0.048698\n00:00\n\n\n2\n2.961029\n2.823816\n0.104358\n0.026342\n00:00\n\n\n3\n2.913608\n2.798980\n0.079521\n0.019046\n00:00\n\n\n4\n2.879827\n2.794405\n0.074947\n0.017684\n00:00\n\n\n5\n2.855628\n2.792629\n0.073171\n0.017242\n00:00\n\n\n6\n2.837858\n2.791636\n0.072178\n0.017052\n00:00\n\n\n7\n2.824691\n2.795679\n0.076221\n0.017815\n00:00\n\n\n8\n2.814432\n2.790493\n0.071035\n0.016618\n00:00\n\n\n9\n2.806232\n2.789299\n0.069841\n0.016276\n00:00\n\n\n10\n2.799621\n2.789852\n0.070394\n0.016454\n00:00\n\n\n11\n2.794031\n2.789215\n0.069757\n0.016316\n00:00\n\n\n12\n2.789312\n2.786340\n0.066882\n0.015715\n00:00\n\n\n13\n2.785412\n2.787108\n0.067650\n0.015764\n00:00\n\n\n14\n2.781868\n2.788352\n0.068894\n0.016100\n00:00\n\n\n15\n2.779205\n2.786545\n0.067087\n0.015683\n00:00\n\n\n16\n2.776669\n2.787676\n0.068218\n0.015941\n00:00\n\n\n17\n2.774686\n2.786329\n0.066871\n0.015623\n00:00\n\n\n18\n2.772782\n2.786216\n0.066758\n0.015591\n00:00\n\n\n19\n2.771490\n2.786206\n0.066748\n0.015591\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.105893\n3.100944\n0.346035\n0.077511\n00:00\n\n\n1\n3.014429\n2.962021\n0.207112\n0.052557\n00:00\n\n\n2\n2.950377\n2.859910\n0.105000\n0.026838\n00:00\n\n\n3\n2.902731\n2.833114\n0.078204\n0.019364\n00:00\n\n\n4\n2.869296\n2.823380\n0.068471\n0.016776\n00:00\n\n\n5\n2.846127\n2.823797\n0.068887\n0.016775\n00:00\n\n\n6\n2.828729\n2.825376\n0.070467\n0.017084\n00:00\n\n\n7\n2.815908\n2.820808\n0.065898\n0.015970\n00:00\n\n\n8\n2.805543\n2.821366\n0.066457\n0.016000\n00:00\n\n\n9\n2.797379\n2.821266\n0.066356\n0.015913\n00:00\n\n\n10\n2.790692\n2.820984\n0.066074\n0.015859\n-1:59:59\n\n\n11\n2.785251\n2.819274\n0.064364\n0.015452\n00:00\n\n\n12\n2.780683\n2.820099\n0.065189\n0.015606\n00:00\n\n\n13\n2.776782\n2.818330\n0.063421\n0.015201\n00:00\n\n\n14\n2.773221\n2.820004\n0.065095\n0.015603\n00:00\n\n\n15\n2.770192\n2.818957\n0.064048\n0.015363\n00:00\n\n\n16\n2.767708\n2.818357\n0.063448\n0.015216\n00:00\n\n\n17\n2.765712\n2.818135\n0.063225\n0.015147\n00:00\n\n\n18\n2.763849\n2.818332\n0.063422\n0.015199\n00:00\n\n\n19\n2.762640\n2.818598\n0.063689\n0.015266\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.088713\n3.107045\n0.354661\n0.078924\n00:00\n\n\n1\n3.003663\n2.985674\n0.233290\n0.057648\n00:00\n\n\n2\n2.941490\n2.883777\n0.131393\n0.032687\n00:00\n\n\n3\n2.897114\n2.852958\n0.100574\n0.024289\n00:00\n\n\n4\n2.864851\n2.847725\n0.095341\n0.022589\n00:00\n\n\n5\n2.842869\n2.844643\n0.092260\n0.021997\n00:00\n\n\n6\n2.826611\n2.845072\n0.092688\n0.021976\n00:00\n\n\n7\n2.813991\n2.847180\n0.094796\n0.022378\n00:00\n\n\n8\n2.804400\n2.841731\n0.089347\n0.021196\n00:00\n\n\n9\n2.796265\n2.840563\n0.088179\n0.020948\n00:00\n\n\n10\n2.789751\n2.840242\n0.087858\n0.020796\n00:00\n\n\n11\n2.784153\n2.840891\n0.088507\n0.021003\n00:00\n\n\n12\n2.779781\n2.840099\n0.087715\n0.020793\n00:00\n\n\n13\n2.775961\n2.839979\n0.087595\n0.020757\n00:00\n\n\n14\n2.772897\n2.838845\n0.086462\n0.020503\n00:00\n\n\n15\n2.770104\n2.839367\n0.086983\n0.020601\n00:00\n\n\n16\n2.767797\n2.839252\n0.086869\n0.020576\n00:00\n\n\n17\n2.765796\n2.839692\n0.087309\n0.020678\n00:00\n\n\n18\n2.764111\n2.839003\n0.086619\n0.020530\n00:00\n\n\n19\n2.762813\n2.839128\n0.086744\n0.020563\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.096087\n3.110922\n0.347905\n0.077215\n00:00\n\n\n1\n3.005267\n2.995671\n0.232655\n0.057557\n00:00\n\n\n2\n2.944075\n2.882715\n0.119698\n0.030261\n00:00\n\n\n3\n2.899745\n2.851894\n0.088877\n0.021891\n00:00\n\n\n4\n2.867660\n2.845201\n0.082184\n0.019869\n00:00\n\n\n5\n2.844286\n2.842517\n0.079500\n0.019032\n00:00\n\n\n6\n2.827374\n2.840275\n0.077259\n0.018516\n00:00\n\n\n7\n2.814086\n2.840380\n0.077364\n0.018408\n00:00\n\n\n8\n2.803528\n2.838695\n0.075679\n0.018048\n00:00\n\n\n9\n2.794903\n2.840422\n0.077406\n0.018451\n00:00\n\n\n10\n2.787970\n2.838255\n0.075238\n0.017898\n00:00\n\n\n11\n2.782125\n2.838354\n0.075338\n0.017878\n00:00\n\n\n12\n2.777524\n2.837784\n0.074767\n0.017789\n00:00\n\n\n13\n2.773693\n2.837262\n0.074245\n0.017670\n00:00\n\n\n14\n2.770172\n2.836403\n0.073387\n0.017436\n00:00\n\n\n15\n2.767393\n2.836872\n0.073856\n0.017510\n00:00\n\n\n16\n2.765167\n2.836347\n0.073330\n0.017404\n00:00\n\n\n17\n2.763296\n2.836466\n0.073450\n0.017456\n00:00\n\n\n18\n2.761725\n2.836351\n0.073334\n0.017465\n00:00\n\n\n19\n2.760158\n2.836510\n0.073494\n0.017488\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.100043\n3.093074\n0.343521\n0.077535\n00:00\n\n\n1\n3.013312\n2.967172\n0.217618\n0.053456\n00:00\n\n\n2\n2.951631\n2.892219\n0.142666\n0.035091\n00:00\n\n\n3\n2.903811\n2.850470\n0.100917\n0.024567\n00:00\n\n\n4\n2.870965\n2.840093\n0.090540\n0.021754\n00:00\n\n\n5\n2.847079\n2.836390\n0.086837\n0.020592\n00:00\n\n\n6\n2.830200\n2.832452\n0.082898\n0.019636\n00:00\n\n\n7\n2.817096\n2.833317\n0.083763\n0.019721\n00:00\n\n\n8\n2.806404\n2.832405\n0.082851\n0.019474\n00:00\n\n\n9\n2.798034\n2.832736\n0.083183\n0.019539\n00:00\n\n\n10\n2.791615\n2.829747\n0.080194\n0.018905\n00:00\n\n\n11\n2.786198\n2.830539\n0.080985\n0.018936\n00:00\n\n\n12\n2.781335\n2.829982\n0.080428\n0.018835\n00:00\n\n\n13\n2.777448\n2.830047\n0.080494\n0.018879\n00:00\n\n\n14\n2.774225\n2.829092\n0.079538\n0.018666\n00:00\n\n\n15\n2.771223\n2.828914\n0.079361\n0.018591\n00:00\n\n\n16\n2.768771\n2.828378\n0.078825\n0.018487\n00:00\n\n\n17\n2.766705\n2.828239\n0.078686\n0.018401\n-1:59:59\n\n\n18\n2.765024\n2.827764\n0.078210\n0.018329\n00:00\n\n\n19\n2.763847\n2.827958\n0.078404\n0.018370\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_onehot_pca = train_dl_cv(df_onehot_pca,onehot_pca_col,target_col,\n                  splits = splits,\n                  model_func = get_mlp_onehot_pca,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.189602\n3.113463\n0.394005\n0.084773\n00:00\n\n\n1\n3.104172\n2.977305\n0.257847\n0.062730\n00:00\n\n\n2\n3.021253\n2.857183\n0.137725\n0.035252\n00:00\n\n\n3\n2.958511\n2.821630\n0.102172\n0.025253\n00:00\n\n\n4\n2.914731\n2.809329\n0.089871\n0.021631\n00:00\n\n\n5\n2.883622\n2.808552\n0.089094\n0.021433\n00:00\n\n\n6\n2.860193\n2.807707\n0.088249\n0.021026\n00:00\n\n\n7\n2.842225\n2.802818\n0.083360\n0.019840\n00:00\n\n\n8\n2.828530\n2.801093\n0.081635\n0.019522\n00:00\n\n\n9\n2.817219\n2.799792\n0.080334\n0.019123\n00:00\n\n\n10\n2.807956\n2.800104\n0.080646\n0.019109\n00:00\n\n\n11\n2.800482\n2.800750\n0.081292\n0.019176\n00:00\n\n\n12\n2.794514\n2.799026\n0.079568\n0.018824\n00:00\n\n\n13\n2.789384\n2.798746\n0.079288\n0.018717\n00:00\n\n\n14\n2.785229\n2.799291\n0.079833\n0.018810\n00:00\n\n\n15\n2.781757\n2.798232\n0.078774\n0.018590\n00:00\n\n\n16\n2.778828\n2.797459\n0.078001\n0.018401\n00:00\n\n\n17\n2.776417\n2.797653\n0.078195\n0.018469\n00:00\n\n\n18\n2.774153\n2.798243\n0.078785\n0.018586\n00:00\n\n\n19\n2.772419\n2.798348\n0.078890\n0.018593\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.182634\n3.119604\n0.364695\n0.079957\n00:00\n\n\n1\n3.094388\n3.023017\n0.268108\n0.064864\n00:00\n\n\n2\n3.009603\n2.895565\n0.140655\n0.037207\n00:00\n\n\n3\n2.945920\n2.855029\n0.100119\n0.025731\n00:00\n\n\n4\n2.902055\n2.841548\n0.086639\n0.021765\n00:00\n\n\n5\n2.870601\n2.840891\n0.085981\n0.021420\n00:00\n\n\n6\n2.847384\n2.835758\n0.080849\n0.019897\n00:00\n\n\n7\n2.830473\n2.836553\n0.081643\n0.020070\n00:00\n\n\n8\n2.816775\n2.834080\n0.079170\n0.019415\n00:00\n\n\n9\n2.806609\n2.833592\n0.078683\n0.019308\n00:00\n\n\n10\n2.798110\n2.834079\n0.079170\n0.019278\n00:00\n\n\n11\n2.791102\n2.832111\n0.077202\n0.018827\n00:00\n\n\n12\n2.785033\n2.833967\n0.079058\n0.019225\n00:00\n\n\n13\n2.779964\n2.833513\n0.078604\n0.019094\n00:00\n\n\n14\n2.776213\n2.832083\n0.077174\n0.018749\n00:00\n\n\n15\n2.772797\n2.832464\n0.077554\n0.018839\n00:00\n\n\n16\n2.770095\n2.831249\n0.076339\n0.018502\n00:00\n\n\n17\n2.767329\n2.832006\n0.077097\n0.018690\n00:00\n\n\n18\n2.765280\n2.832045\n0.077135\n0.018729\n00:00\n\n\n19\n2.763488\n2.831995\n0.077086\n0.018688\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.180655\n3.133078\n0.380694\n0.082307\n00:00\n\n\n1\n3.087744\n3.049715\n0.297332\n0.070353\n00:00\n\n\n2\n3.001378\n2.914612\n0.162228\n0.041429\n00:00\n\n\n3\n2.940427\n2.872758\n0.120375\n0.030020\n00:00\n\n\n4\n2.897774\n2.859895\n0.107511\n0.026098\n00:00\n\n\n5\n2.867156\n2.863013\n0.110629\n0.026861\n00:00\n\n\n6\n2.844925\n2.856844\n0.104461\n0.025312\n00:00\n\n\n7\n2.828006\n2.852781\n0.100397\n0.024134\n00:00\n\n\n8\n2.815066\n2.853749\n0.101365\n0.024317\n00:00\n\n\n9\n2.804623\n2.853329\n0.100945\n0.024254\n00:00\n\n\n10\n2.796463\n2.850767\n0.098383\n0.023635\n00:00\n\n\n11\n2.789638\n2.851188\n0.098804\n0.023729\n00:00\n\n\n12\n2.784149\n2.847641\n0.095257\n0.022792\n00:00\n\n\n13\n2.779597\n2.850568\n0.098185\n0.023457\n00:00\n\n\n14\n2.775884\n2.850853\n0.098469\n0.023641\n00:00\n\n\n15\n2.772516\n2.850517\n0.098133\n0.023541\n00:00\n\n\n16\n2.769773\n2.849717\n0.097334\n0.023291\n00:00\n\n\n17\n2.767376\n2.848876\n0.096492\n0.023068\n00:00\n\n\n18\n2.765348\n2.848939\n0.096556\n0.023068\n00:00\n\n\n19\n2.763793\n2.849362\n0.096978\n0.023216\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.171948\n3.122044\n0.359027\n0.078739\n00:00\n\n\n1\n3.078477\n3.038632\n0.275615\n0.066434\n00:00\n\n\n2\n2.995987\n2.918788\n0.155771\n0.040377\n00:00\n\n\n3\n2.935148\n2.868035\n0.105018\n0.026499\n00:00\n\n\n4\n2.893677\n2.856677\n0.093661\n0.023154\n00:00\n\n\n5\n2.863889\n2.860430\n0.097414\n0.023751\n00:00\n\n\n6\n2.841698\n2.854681\n0.091664\n0.022408\n00:00\n\n\n7\n2.825094\n2.852442\n0.089426\n0.021593\n00:00\n\n\n8\n2.812347\n2.851212\n0.088195\n0.021338\n00:00\n\n\n9\n2.802684\n2.850125\n0.087109\n0.020951\n00:00\n\n\n10\n2.794548\n2.848400\n0.085383\n0.020580\n00:00\n\n\n11\n2.788096\n2.847420\n0.084403\n0.020379\n-1:59:59\n\n\n12\n2.782459\n2.848621\n0.085605\n0.020491\n00:00\n\n\n13\n2.777640\n2.847715\n0.084698\n0.020367\n00:00\n\n\n14\n2.773699\n2.847724\n0.084707\n0.020411\n00:00\n\n\n15\n2.770435\n2.847151\n0.084134\n0.020171\n00:00\n\n\n16\n2.767452\n2.847463\n0.084447\n0.020274\n00:00\n\n\n17\n2.765041\n2.847303\n0.084286\n0.020241\n00:00\n\n\n18\n2.762976\n2.847187\n0.084170\n0.020176\n00:00\n\n\n19\n2.761266\n2.846792\n0.083776\n0.020062\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.168980\n3.113049\n0.363495\n0.080159\n00:00\n\n\n1\n3.080419\n3.011974\n0.262420\n0.064262\n00:00\n\n\n2\n2.998897\n2.907214\n0.157660\n0.039925\n00:00\n\n\n3\n2.938524\n2.865003\n0.115449\n0.028375\n00:00\n\n\n4\n2.896167\n2.856457\n0.106903\n0.026023\n00:00\n\n\n5\n2.866137\n2.853608\n0.104054\n0.025234\n00:00\n\n\n6\n2.844121\n2.851347\n0.101793\n0.024680\n00:00\n\n\n7\n2.827480\n2.847170\n0.097616\n0.023724\n00:00\n\n\n8\n2.815023\n2.844982\n0.095428\n0.023147\n00:00\n\n\n9\n2.804815\n2.843091\n0.093538\n0.022543\n00:00\n\n\n10\n2.796711\n2.843977\n0.094423\n0.022789\n00:00\n\n\n11\n2.790092\n2.843254\n0.093701\n0.022592\n00:00\n\n\n12\n2.784432\n2.842181\n0.092628\n0.022250\n00:00\n\n\n13\n2.779616\n2.841425\n0.091872\n0.022164\n00:00\n\n\n14\n2.776180\n2.840833\n0.091280\n0.021957\n00:00\n\n\n15\n2.772646\n2.840190\n0.090637\n0.021706\n00:00\n\n\n16\n2.770050\n2.839524\n0.089970\n0.021553\n00:00\n\n\n17\n2.767612\n2.840582\n0.091028\n0.021872\n00:00\n\n\n18\n2.765678\n2.840996\n0.091442\n0.021974\n00:00\n\n\n19\n2.764087\n2.840355\n0.090801\n0.021799\n00:00",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#score",
    "href": "kinase_domain/kd_06c_pspa_training_feature_comparison_mlp.html#score",
    "title": "DL training: Feature comparison on MLP model",
    "section": "Score",
    "text": "Score\n\nfrom katlas.pssm import *\n\nfrom functools import partial\n\n\ndef score_df(target,pred,func):\n    distance = [func(target.loc[i],pred.loc[i,target.columns]) for i in target.index]\n    return pd.Series(distance,index=target.index)\n\n\njsd_df = partial(score_df,func=js_divergence_flat)\njss_df = partial(score_df,func=js_similarity_flat)\n\nkld_df = partial(score_df,func=kl_divergence_flat)\n\n\ntarget=df_t5[target_col].copy()\n\n\n(oof_t5.nfold == oof_esm.nfold).value_counts()\n\nnfold\nTrue    368\nName: count, dtype: int64\n\n\n\npspa_info['split'] = oof_t5.nfold\n\n\npspa_info['t5'] =jsd_df(target,oof_t5)\npspa_info['esm'] =jsd_df(target,oof_esm)\npspa_info['onehot'] =jsd_df(target,oof_onehot)\npspa_info['onehot_pca'] =jsd_df(target,oof_onehot_pca)\n\n\nfrom katlas.plot import *\n\n\nset_sns()\n\n\npspa_info.to_parquet('raw/MLP_feature_compare_subfamily.parquet')\n\n\nplot_group_bar(pspa_info,['onehot','onehot_pca','esm','t5',],group='group')\nplt.ylabel('JS divergence')\nsave_svg('fig/MLP_feature_comparison.svg')\n\n\n\n\n\n\n\n\n\nFor JS similarity (less differentiated)\n\npspa_info['t5'] =jss_df(target,oof_t5)\npspa_info['esm'] =jss_df(target,oof_esm)\npspa_info['onehot'] =jss_df(target,oof_onehot)\npspa_info['onehot_pca'] =jss_df(target,oof_onehot_pca)\n\n\nplot_group_bar(pspa_info,['t5','esm','onehot','onehot_pca'],group='group')\nplt.ylabel('JS divergence')\n\nText(0, 0.5, 'JS divergence')",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on MLP model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_09b_predict_cddm.html",
    "href": "kinase_domain/kd_09b_predict_cddm.html",
    "title": "Predict",
    "section": "",
    "text": "import pandas as pd\nfrom katlas.train import *\nfrom katlas.dnn import *\nfrom fastai.vision.all import *\nfrom katlas.pssm import *\ncddm_unk = pd.read_parquet('raw/kd_similar_cddm.parquet')\ncddm_unk = cddm_unk[cddm_unk.within_threshold].copy()\n# from katlas.data import *\n\n# kd = Data.get_kd_uniprot()\nt5 = pd.read_parquet('raw/t5_kd.parquet')\ntest_cddm = t5.loc[cddm_unk.index].reset_index()",
    "crumbs": [
      "kinase_domain",
      "Predict"
    ]
  },
  {
    "objectID": "kinase_domain/kd_09b_predict_cddm.html#predict",
    "href": "kinase_domain/kd_09b_predict_cddm.html#predict",
    "title": "Predict",
    "section": "Predict",
    "text": "Predict\n\nsample=pd.read_parquet('train/cddm_t5.parquet')\n\n\ntarget_col = sample.columns[~sample.columns.str.startswith('T5')]\n\n\ntarget_col\n\nIndex(['-20P', '-19P', '-18P', '-17P', '-16P', '-15P', '-14P', '-13P', '-12P',\n       '-11P',\n       ...\n       '11pY', '12pY', '13pY', '14pY', '15pY', '16pY', '17pY', '18pY', '19pY',\n       '20pY'],\n      dtype='object', length=943)\n\n\n\nfeat_col = test_cddm.columns[1:]\n\n\nfeat_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)\n\n\n\nn_feature = len(feat_col)\nn_target = len(target_col)\n\n\nn_feature,n_target\n\n(1024, 943)\n\n\n\ndef get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\n\nfrom tqdm import tqdm\n\n\ndef get_ensemble_pred(test_df, model_name,nfold=5):\n    ensemble = None\n    for i in tqdm(range(nfold)):\n        test_pred = predict_dl(test_df, \n                   feat_col, \n                   target_col,\n                   model_func=get_cnn, # model architecture\n                   model_pth=f'{model_name}_fold{i}', # only name, not with .pth\n                  )\n        if ensemble is None:\n            ensemble = test_pred.copy()   # start with first prediction\n        else:\n            ensemble += test_pred         # accumulate\n    \n    ensemble /= 5\n    return ensemble\n\n\npred = get_ensemble_pred(test_cddm,'cnn_cddm')\n\n100%|████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:09&lt;00:00,  1.89s/it]\n\n\n\npred.index=cddm_unk.index\n\n\npred.to_parquet('raw/pred_new_cddm.parquet')\n\n\npred\n\n\n\n\n\n\n\n\n-20P\n-19P\n-18P\n-17P\n-16P\n-15P\n-14P\n-13P\n-12P\n-11P\n...\n11pY\n12pY\n13pY\n14pY\n15pY\n16pY\n17pY\n18pY\n19pY\n20pY\n\n\n\n\nA0A8I3S724_AURKA_CANLF_KD1\n0.058566\n0.047093\n0.038226\n0.060463\n0.059130\n0.054548\n0.054172\n0.049232\n0.047558\n0.059301\n...\n0.011735\n0.011759\n0.015638\n0.011591\n0.011264\n0.015564\n0.016801\n0.013457\n0.016039\n0.015655\n\n\nA0A8I5ZNK2_OXSR1_RAT_KD1\n0.062874\n0.044732\n0.037693\n0.069321\n0.069203\n0.048762\n0.055191\n0.046259\n0.054198\n0.052150\n...\n0.009368\n0.014231\n0.010534\n0.009535\n0.007872\n0.018224\n0.026171\n0.012271\n0.011304\n0.023689\n\n\nA0JM20_TYRO3_XENTR_KD1\n0.043008\n0.046507\n0.053662\n0.055524\n0.040229\n0.046882\n0.063473\n0.061160\n0.048801\n0.045304\n...\n0.013642\n0.019686\n0.012491\n0.010734\n0.012548\n0.011841\n0.014706\n0.006341\n0.018013\n0.015684\n\n\nA0JNB0_FYN_BOVIN_KD1\n0.045568\n0.047251\n0.050904\n0.050163\n0.047431\n0.048869\n0.060826\n0.054838\n0.052466\n0.041447\n...\n0.015842\n0.020160\n0.014444\n0.012258\n0.011229\n0.013144\n0.014181\n0.007040\n0.017035\n0.017139\n\n\nA0M8R7_MET_PAPAN_KD1\n0.042183\n0.045986\n0.049634\n0.047944\n0.040924\n0.046336\n0.061326\n0.060749\n0.046776\n0.042471\n...\n0.014246\n0.020650\n0.013831\n0.011233\n0.012048\n0.012316\n0.014068\n0.006437\n0.017606\n0.016929\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ9Z2B9_KS6A4_MOUSE_KD1\n0.062978\n0.046201\n0.043306\n0.047586\n0.060256\n0.057318\n0.069925\n0.054924\n0.057089\n0.056542\n...\n0.009725\n0.009109\n0.013359\n0.011704\n0.007290\n0.015323\n0.023502\n0.008287\n0.016022\n0.014946\n\n\nQ9Z2G7_GRK7_ICTTR_KD1\n0.069125\n0.050716\n0.028324\n0.078284\n0.088472\n0.043415\n0.070791\n0.038503\n0.033959\n0.072650\n...\n0.007297\n0.005966\n0.006196\n0.012518\n0.006082\n0.022531\n0.026919\n0.019598\n0.009070\n0.015517\n\n\nQ9Z2R9_E2AK1_MOUSE_KD1\n0.052221\n0.055948\n0.027863\n0.051704\n0.028007\n0.048318\n0.038666\n0.040143\n0.050289\n0.033800\n...\n0.007105\n0.004360\n0.002075\n0.015135\n0.002591\n0.014851\n0.005058\n0.013597\n0.005913\n0.015426\n\n\nQ9Z2W1_STK25_MOUSE_KD1\n0.053220\n0.045374\n0.031947\n0.051374\n0.052299\n0.055456\n0.054058\n0.051449\n0.048602\n0.050390\n...\n0.010350\n0.012648\n0.010529\n0.008406\n0.008619\n0.020545\n0.017907\n0.013738\n0.011008\n0.021155\n\n\nW0LYS5_CAMKI_MACNP_KD1\n0.075941\n0.072653\n0.044654\n0.047528\n0.066485\n0.048711\n0.076716\n0.036033\n0.064526\n0.062745\n...\n0.012258\n0.011500\n0.007500\n0.017919\n0.009034\n0.013052\n0.025094\n0.009916\n0.012742\n0.014000\n\n\n\n\n1195 rows × 943 columns",
    "crumbs": [
      "kinase_domain",
      "Predict"
    ]
  },
  {
    "objectID": "kinase_domain/kd_09b_predict_cddm.html#test",
    "href": "kinase_domain/kd_09b_predict_cddm.html#test",
    "title": "Predict",
    "section": "test",
    "text": "test\n\ncdks = cddm_unk[cddm_unk.closest_pos_index.str.contains('CDK')]\n\n\nfor i in cdks.head(5).index:\n    print(i)\n    plot_heatmap(recover_pssm(pred.loc[i]))\n    plt.show()\n    plt.close()\n\nB2MVY4_CDK4_SHEEP_KD1\n\n\n\n\n\n\n\n\n\nO35831_CDK17_RAT_KD1\n\n\n\n\n\n\n\n\n\nO55076_CDK2_CRIGR_KD1\n\n\n\n\n\n\n\n\n\nP11440_CDK1_MOUSE_KD1\n\n\n\n\n\n\n\n\n\nP13863_CDK1_CHICK_KD1",
    "crumbs": [
      "kinase_domain",
      "Predict"
    ]
  },
  {
    "objectID": "kinase_domain/kd_03_feature_extract.html",
    "href": "kinase_domain/kd_03_feature_extract.html",
    "title": "Extract KD features",
    "section": "",
    "text": "import pandas as pd\nfrom katlas.core import *\nfrom katlas.feature import *\nfrom katlas.plot import *\ndf = Data.get_kd_uniprot()\n# filter active kinase domain\ndf = df[df.active_D1_D2.astype(bool)].reset_index(drop=True)\ndf.columns\n\nIndex(['kd_ID', 'Uniprot', 'Entry Name', 'Protein names', 'Gene Names',\n       'Gene Names (primary)', 'Organism', 'kd_note', 'kd_evidence',\n       'kd_start', 'kd_end', 'kd_seq', 'Domain [FT]', 'Domain [CC]', 'Region',\n       'Motif', 'Protein families', 'Reactome', 'ComplexPortal',\n       'Subcellular location [CC]', 'Gene Ontology (biological process)',\n       'Tissue specificity', 'Interacts with', 'Subunit structure',\n       'Function [CC]', 'Activity regulation', 'full_seq', 'D1', 'D2', 'D3',\n       'N1', 'active_D1_D2'],\n      dtype='object')\ndf.shape\n\n(4209, 32)",
    "crumbs": [
      "kinase_domain",
      "Extract KD features"
    ]
  },
  {
    "objectID": "kinase_domain/kd_03_feature_extract.html#onehot-of-sequence-alignment",
    "href": "kinase_domain/kd_03_feature_extract.html#onehot-of-sequence-alignment",
    "title": "Extract KD features",
    "section": "Onehot of sequence alignment",
    "text": "Onehot of sequence alignment\n\nalign = pd.read_parquet('raw/uniprot_kd_align.parquet')\n\n\nalign.columns = align.columns.astype(int)\n\n\nactive=(align[1525]=='D')& (align[1724]=='D')\nalign = align[active]\n\n\nalign.shape\n\n(4209, 3434)\n\n\n\ncounts_df = align.apply(lambda col: col.value_counts(), axis=0).fillna(0)\nfreq_df = counts_df.div(counts_df.sum(axis=0), axis=1)\n\n\n# remove '-' first line\nmax_series=freq_df.iloc[1:,:]\n\n\nfreq_max = pd.concat([max_series.idxmax(),max_series.max()],axis=1)\nfreq_max.columns = ['aa','max_value']\nfreq_max = freq_max.sort_values('max_value',ascending=False).reset_index(names='position')\n\n\nfreq_max\n\n\n\n\n\n\n\n\nposition\naa\nmax_value\n\n\n\n\n0\n1724\nD\n1.000000\n\n\n1\n1525\nD\n1.000000\n\n\n2\n1549\nN\n0.988121\n\n\n3\n1730\nG\n0.959135\n\n\n4\n2618\nD\n0.948919\n\n\n...\n...\n...\n...\n\n\n3429\n337\nA\n0.000000\n\n\n3430\n338\nA\n0.000000\n\n\n3431\n339\nA\n0.000000\n\n\n3432\n1899\nA\n0.000000\n\n\n3433\n1900\nA\n0.000000\n\n\n\n\n3434 rows × 3 columns\n\n\n\n\nonehot_col = freq_max[freq_max.max_value&gt;0.05].position.sort_values().tolist()\n\n\nlen(onehot_col)\n\n358\n\n\n\nalign = align[onehot_col]\n\n\nfrom sklearn.preprocessing import OneHotEncoder\n\ndef get_onehot(df):\n    df=df.copy()\n    encoded_df = pd.DataFrame(index=df.index)\n    \n    encoder = OneHotEncoder(sparse_output=False, dtype=int, handle_unknown='ignore')\n    \n    for col in df.columns:\n        reshaped = df[[col]]  # keep as DataFrame\n        encoded = encoder.fit_transform(reshaped)\n        aa_labels = encoder.categories_[0]\n        new_col_names = [f\"{col}_{aa}\" for aa in aa_labels]\n        encoded_subdf = pd.DataFrame(encoded,index=df.index)\n        encoded_subdf.columns=new_col_names\n        encoded_df = pd.concat([encoded_df, encoded_subdf], axis=1)\n    return encoded_df\n\n\nonehot=get_onehot(align)\n\n\nonehot.head()\n\n\n\n\n\n\n\n\n65_-\n65_A\n65_C\n65_D\n65_E\n65_F\n65_G\n65_H\n65_I\n65_K\n...\n3192_M\n3192_N\n3192_P\n3192_Q\n3192_R\n3192_S\n3192_T\n3192_V\n3192_W\n3192_Y\n\n\n\n\nA0A075F7E9_LERK1_ORYSI_KD1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nA0A078CGE6_M3KE1_BRANA_KD1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nA0A0K3AV08_MLK1_CAEEL_KD1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nA0A0P0VIP0_LRSK7_ORYSJ_KD1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nA0A0P0XII1_CERK1_ORYSJ_KD1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n...\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n5 rows × 6849 columns\n\n\n\n\nonehot.shape\n\n(4209, 6849)\n\n\nIt contains the active kd_ID\n\nonehot.to_parquet('raw/onehot_kd.parquet')",
    "crumbs": [
      "kinase_domain",
      "Extract KD features"
    ]
  },
  {
    "objectID": "kinase_domain/kd_03_feature_extract.html#onehot-pca",
    "href": "kinase_domain/kd_03_feature_extract.html#onehot-pca",
    "title": "Extract KD features",
    "section": "Onehot + PCA",
    "text": "Onehot + PCA\nSince onehot gives 6849 columns, we can PCA reduce the column number.\nWe chose 1000 as t5 and esm have a range of 1000 features.\n\nonehot_pca = reduce_feature(onehot,n=1000)\n\n\nonehot_pca.to_parquet('raw/onehot_pca_kd.parquet')",
    "crumbs": [
      "kinase_domain",
      "Extract KD features"
    ]
  },
  {
    "objectID": "kinase_domain/kd_03_feature_extract.html#t5-embeddings",
    "href": "kinase_domain/kd_03_feature_extract.html#t5-embeddings",
    "title": "Extract KD features",
    "section": "T5 embeddings",
    "text": "T5 embeddings\n\nfeat_t5 = get_t5(df,'kd_seq')\n\nYou are using the default legacy behaviour of the &lt;class 'transformers.models.t5.tokenization_t5.T5Tokenizer'&gt;. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565\n\n\n\n\n\n\n\n\n\nfeat_t5.index=df.kd_ID\n\n\nfeat_t5.head()\n\n/home/sky1ove/git/KATLAS/katlas/.venv/lib/python3.12/site-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n  has_large_values = (abs_vals &gt; 1e6).any()\n/home/sky1ove/git/KATLAS/katlas/.venv/lib/python3.12/site-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n  has_large_values = (abs_vals &gt; 1e6).any()\n\n\n\n\n\n\n\n\n\nT5_0\nT5_1\nT5_2\nT5_3\nT5_4\nT5_5\nT5_6\nT5_7\nT5_8\nT5_9\n...\nT5_1014\nT5_1015\nT5_1016\nT5_1017\nT5_1018\nT5_1019\nT5_1020\nT5_1021\nT5_1022\nT5_1023\n\n\nkd_ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA0A075F7E9_LERK1_ORYSI_KD1\n0.014122\n0.068848\n0.016113\n-0.001555\n-0.001301\n0.021393\n0.030304\n-0.062408\n0.028427\n-0.017532\n...\n-0.029297\n0.014900\n-0.006233\n-0.069824\n0.044067\n-0.009636\n-0.007458\n0.021240\n0.005264\n-0.034637\n\n\nA0A078CGE6_M3KE1_BRANA_KD1\n0.054565\n0.093811\n-0.007420\n0.018890\n-0.042236\n-0.005402\n-0.004921\n-0.046844\n-0.013443\n-0.019501\n...\n-0.016037\n0.000758\n-0.038391\n-0.041321\n0.069580\n-0.022415\n-0.026306\n-0.001375\n0.006599\n-0.034485\n\n\nA0A0K3AV08_MLK1_CAEEL_KD1\n0.014870\n-0.008934\n0.000822\n0.001986\n-0.035767\n0.023880\n-0.012856\n-0.056274\n-0.004978\n-0.001923\n...\n-0.032349\n-0.057129\n-0.005463\n-0.107910\n0.020889\n-0.009666\n-0.022614\n-0.019882\n0.040466\n-0.021912\n\n\nA0A0P0VIP0_LRSK7_ORYSJ_KD1\n-0.008522\n0.062134\n-0.014053\n-0.027054\n-0.025665\n0.014648\n0.015022\n-0.045959\n0.023544\n-0.036133\n...\n0.037994\n-0.022903\n0.046082\n-0.082703\n0.000940\n-0.009811\n0.008896\n0.014931\n0.028061\n-0.037994\n\n\nA0A0P0XII1_CERK1_ORYSJ_KD1\n0.029053\n0.076050\n0.014656\n0.015732\n-0.006050\n0.019882\n-0.003336\n-0.041016\n0.060211\n-0.014572\n...\n0.014740\n0.019989\n0.011230\n-0.040222\n0.044403\n-0.001749\n-0.013168\n0.018524\n-0.018280\n-0.034912\n\n\n\n\n5 rows × 1024 columns\n\n\n\n\n# feat_t5.to_parquet('raw/t5_kd.parquet')",
    "crumbs": [
      "kinase_domain",
      "Extract KD features"
    ]
  },
  {
    "objectID": "kinase_domain/kd_03_feature_extract.html#esm2-embeddings",
    "href": "kinase_domain/kd_03_feature_extract.html#esm2-embeddings",
    "title": "Extract KD features",
    "section": "ESM2 embeddings",
    "text": "ESM2 embeddings\n\nget_esm\n\n\nfeat_esm = get_esm(df,'kd_seq')\n\nrepr_layers number for model esm2_t33_650M_UR50D is 33.\nYou can also choose other esm2 models: \nesm2_t48_15B_UR50D\nesm2_t36_3B_UR50D\nesm2_t33_650M_UR50D\nesm2_t30_150M_UR50D\nesm2_t12_35M_UR50D\nesm2_t6_8M_UR50D\n\n\n\n\n\n\n/home/sky1ove/git/KATLAS/katlas/.venv/lib/python3.12/site-packages/logomaker/../fairscale/nn/data_parallel/fully_sharded_data_parallel.py:2562: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n  if data.storage().size() &gt; 0:\n\n\n\nfeat_esm.index=df.kd_ID\n\n\nfeat_esm.to_parquet('raw/esm_kd.parquet')\n\n\nfeat_esm.head()\n\n/home/sky1ove/git/KATLAS/katlas/.venv/lib/python3.12/site-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n  has_large_values = (abs_vals &gt; 1e6).any()\n/home/sky1ove/git/KATLAS/katlas/.venv/lib/python3.12/site-packages/pandas/io/formats/format.py:1458: RuntimeWarning: overflow encountered in cast\n  has_large_values = (abs_vals &gt; 1e6).any()\n\n\n\n\n\n\n\n\n\nesm_0\nesm_1\nesm_2\nesm_3\nesm_4\nesm_5\nesm_6\nesm_7\nesm_8\nesm_9\n...\nesm_1270\nesm_1271\nesm_1272\nesm_1273\nesm_1274\nesm_1275\nesm_1276\nesm_1277\nesm_1278\nesm_1279\n\n\nkd_ID\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA0A075F7E9_LERK1_ORYSI_KD1\n-0.014076\n-0.047668\n-0.030716\n-0.045868\n-0.062622\n-0.116272\n-0.007904\n0.056915\n0.010590\n0.020737\n...\n0.020691\n-0.012749\n-0.077209\n0.087402\n0.007301\n-0.010765\n0.094604\n-0.053802\n0.049164\n0.014648\n\n\nA0A078CGE6_M3KE1_BRANA_KD1\n0.012405\n-0.039764\n-0.004433\n-0.019089\n-0.064331\n-0.048035\n0.120789\n-0.026199\n-0.058777\n0.143188\n...\n0.082520\n-0.046143\n-0.080872\n0.077515\n0.004078\n-0.046143\n0.029099\n-0.214355\n0.070923\n0.146851\n\n\nA0A0K3AV08_MLK1_CAEEL_KD1\n0.047180\n-0.048553\n0.022888\n0.006191\n-0.028015\n-0.094177\n0.104492\n-0.006901\n0.016891\n0.066223\n...\n0.023575\n-0.010071\n-0.090149\n0.075684\n0.022385\n-0.044006\n0.071838\n-0.078369\n0.013710\n0.071838\n\n\nA0A0P0VIP0_LRSK7_ORYSJ_KD1\n-0.086121\n-0.039001\n-0.012978\n-0.087524\n-0.117981\n-0.046600\n-0.037628\n0.059875\n0.037323\n0.087708\n...\n-0.061615\n-0.025787\n-0.085449\n0.133667\n0.016953\n-0.106079\n0.025635\n-0.045868\n0.080750\n0.021927\n\n\nA0A0P0XII1_CERK1_ORYSJ_KD1\n0.004047\n-0.067383\n-0.022156\n-0.011215\n-0.110840\n-0.077637\n0.012314\n0.012299\n-0.011688\n0.047485\n...\n0.056519\n-0.023270\n-0.094849\n0.101746\n-0.033417\n-0.050415\n0.054749\n-0.071594\n0.046631\n0.021667\n\n\n\n\n5 rows × 1280 columns\n\n\n\n\nfeat_esm.shape\n\n(4209, 1280)",
    "crumbs": [
      "kinase_domain",
      "Extract KD features"
    ]
  },
  {
    "objectID": "kinase_domain/kd_11_plot_pspa_kd_t5.html",
    "href": "kinase_domain/kd_11_plot_pspa_kd_t5.html",
    "title": "katlas-raw",
    "section": "",
    "text": "from katlas.common import *\nimport pandas as pd\n\nfrom katlas.plot import *\nfrom matplotlib import pyplot as plt\n\n\n\nt5 = pd.read_parquet('raw/t5_kd.parquet')\n\n\npspa=pd.read_parquet('train/pspa_t5.parquet')\n\n\ninfo=Data.get_kinase_info()\n\n\ninfo = info[info.pseudo=='0']\n\n\ninfo.kd_ID.str.len().sort_values()\n\n518    20.0\n32     20.0\n28     20.0\n27     20.0\n497    20.0\n       ... \n43      NaN\n44      NaN\n486     NaN\n487     NaN\n488     NaN\nName: kd_ID, Length: 462, dtype: float64\n\n\n\ninfo=info.dropna(subset='kd_ID')\n\n\npspa_cat_map = info.set_index('kd_ID')['pspa_category_big']\n\n\nidxs = (pspa_cat_map.value_counts()&gt;=8)[lambda s: s].index\nhue_map = pspa_cat_map[pspa_cat_map.isin(idxs)]\n\n\npspa = pspa.loc[:,pspa.columns.str.startswith('T5')]\n\n\nembed_df=reduce_feature(pspa,method='UMAP',complexity=15,min_dist=0.2)\n\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../umap/umap_.py:1952: UserWarning: n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n  warn(\n\n\n\nplot_2d(embed_df,hue=hue_map,\n        legend=True,\n        legend_title='PSPA category (cnt≥8)',height=4\n        )\nplt.title('UMAP plot of KD T5 embeddings')\nsave_svg('fig/umap_t5_pspa_category.svg')",
    "crumbs": [
      "kinase_domain",
      "kd_11_plot_pspa_kd_t5.html"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html",
    "title": "DL training: Model comparison on T5 feature",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#setup",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#setup",
    "title": "DL training: Model comparison on T5 feature",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#data",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#data",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Data",
    "text": "Data\n\ndf=pd.read_parquet('train/pspa_t5.parquet')\n\n\ninfo=Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\ninfo = info[info.kd_ID.notna()]\n\nsubfamily_map = info[['kd_ID','subfamily']].drop_duplicates().set_index('kd_ID')['subfamily']\nfamily_map = info[['kd_ID','family']].drop_duplicates().set_index('kd_ID')['family']\ngroup_map = info[['kd_ID','group']].drop_duplicates().set_index('kd_ID')['group']\n\npspa_info = pd.DataFrame(df.index.tolist(),columns=['kinase'])\n\npspa_info['subfamily'] = pspa_info.kinase.map(subfamily_map)\npspa_info['family'] = pspa_info.kinase.map(family_map)\npspa_info['group'] = pspa_info.kinase.map(group_map)\n\n\ndf=df.reset_index()\n\n\ndf.columns\n\nIndex(['index', '-5P', '-4P', '-3P', '-2P', '-1P', '0P', '1P', '2P', '3P',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1255)\n\n\n\n# column name of feature and target\nfeat_col = df.columns[df.columns.str.startswith('T5_')]\ntarget_col = df.columns[~df.columns.isin(feat_col)][1:]\n\n\nfeat_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#split",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#split",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Split",
    "text": "Split\n\npspa_info.subfamily.value_counts()\n\nsubfamily\nEph      12\nSrc      11\nNEK      10\nCK1       7\nSTE11     7\n         ..\nZAK       1\nSev       1\nRet       1\nMusk      1\nTie       1\nName: count, Length: 149, dtype: int64\n\n\n\npspa_info.family.value_counts()\n\nfamily\nSTE20    27\nCAMKL    20\nCDK      17\nMAPK     12\nEph      12\n         ..\nSTK33     1\nSev       1\nRet       1\nMusk      1\nTie       1\nName: count, Length: 92, dtype: int64\n\n\n\npspa_info.group.value_counts()\n\ngroup\nTK          78\nCAMK        57\nCMGC        52\nAGC         52\nOther       49\nSTE         39\nTKL         25\nCK1         11\nAtypical     5\nName: count, dtype: int64\n\n\n\nsplits = get_splits(pspa_info, group='group',nfold=9)\n\nsplit0 = splits[0]\n\nGroupKFold(n_splits=9, random_state=None, shuffle=False)\n# group in train set: 8\n# group in test set: 1",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#dataset",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#dataset",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Dataset",
    "text": "Dataset\n\n# dataset\nds = GeneralDataset(df,feat_col,target_col)\n\n\nlen(ds)\n\n368\n\n\n\ndl = DataLoader(ds, batch_size=64, shuffle=True)\n\n\nxb,yb = next(iter(dl))\n\nxb.shape,yb.shape\n\n(torch.Size([64, 1024]), torch.Size([64, 23, 10]))",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#model",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#model",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Model",
    "text": "Model\n\nn_feature = len(feat_col)\nn_target = len(target_col)\n\n\ndef get_mlp(): return PSSM_model(n_feature,n_target,model='MLP')\n\ndef get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\n\nmodel = get_mlp()\n\n\nlogits= model(xb)\n\n\nlogits.shape\n\ntorch.Size([64, 23, 10])",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#loss",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#loss",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Loss",
    "text": "Loss\n\nCE(logits,yb)\n\ntensor(3.2301, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#metrics",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#metrics",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Metrics",
    "text": "Metrics\n\nKLD(logits,yb)\n\ntensor(0.4888, grad_fn=&lt;MeanBackward0&gt;)\n\n\n\nJSD(logits,yb)\n\ntensor(0.1021, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#cv-train",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#cv-train",
    "title": "DL training: Model comparison on T5 feature",
    "section": "CV train",
    "text": "CV train\n\ncross-validation\n\n\noof_cnn = train_dl_cv(df,feat_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn,\n                  n_epoch=20,lr=3e-3,save='cnn')\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.269060\n3.143546\n0.404985\n0.081564\n00:01\n\n\n1\n3.223662\n3.147182\n0.408622\n0.083544\n00:00\n\n\n2\n3.187536\n3.175212\n0.436651\n0.091066\n00:00\n\n\n3\n3.168146\n3.216301\n0.477740\n0.099706\n00:00\n\n\n4\n3.147557\n3.231566\n0.493005\n0.093356\n00:00\n\n\n5\n3.121749\n3.311443\n0.572882\n0.093714\n00:00\n\n\n6\n3.083850\n3.368428\n0.629867\n0.097433\n00:00\n\n\n7\n3.045823\n3.430662\n0.692102\n0.095945\n00:00\n\n\n8\n3.008982\n3.513947\n0.775385\n0.096181\n00:00\n\n\n9\n2.975007\n3.527397\n0.788837\n0.095878\n00:00\n\n\n10\n2.945746\n3.548940\n0.810379\n0.095623\n00:00\n\n\n11\n2.921519\n3.570338\n0.831777\n0.096343\n00:00\n\n\n12\n2.900580\n3.571254\n0.832693\n0.095262\n00:00\n\n\n13\n2.883183\n3.574004\n0.835444\n0.095764\n00:00\n\n\n14\n2.867993\n3.589709\n0.851148\n0.097328\n00:00\n\n\n15\n2.855134\n3.583238\n0.844677\n0.095302\n00:00\n\n\n16\n2.844318\n3.581508\n0.842947\n0.094802\n00:00\n\n\n17\n2.835052\n3.586241\n0.847680\n0.094904\n00:00\n\n\n18\n2.827313\n3.586015\n0.847454\n0.095045\n00:00\n\n\n19\n2.820956\n3.586493\n0.847932\n0.094981\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.208314\n3.117808\n0.358415\n0.079423\n00:00\n\n\n1\n3.091133\n2.973638\n0.214245\n0.053701\n00:00\n\n\n2\n3.022374\n2.917496\n0.158104\n0.037164\n00:00\n\n\n3\n2.980688\n2.889112\n0.129719\n0.030823\n00:00\n\n\n4\n2.959795\n2.898824\n0.139432\n0.033074\n00:00\n\n\n5\n2.940522\n2.883660\n0.124267\n0.029325\n00:00\n\n\n6\n2.921029\n2.878609\n0.119217\n0.028216\n00:00\n\n\n7\n2.902735\n2.869094\n0.109702\n0.025721\n00:00\n\n\n8\n2.887330\n2.868969\n0.109577\n0.025599\n00:00\n\n\n9\n2.873613\n2.872907\n0.113515\n0.026461\n00:00\n\n\n10\n2.860784\n2.872873\n0.113481\n0.026225\n00:00\n\n\n11\n2.849614\n2.868307\n0.108915\n0.025198\n00:00\n\n\n12\n2.839491\n2.873788\n0.114396\n0.026422\n00:00\n\n\n13\n2.830676\n2.868858\n0.109465\n0.025601\n00:00\n\n\n14\n2.823313\n2.874800\n0.115407\n0.026648\n00:00\n\n\n15\n2.816295\n2.866525\n0.107132\n0.024936\n00:00\n\n\n16\n2.810380\n2.870265\n0.110873\n0.025660\n00:00\n\n\n17\n2.805311\n2.869317\n0.109924\n0.025484\n00:00\n\n\n18\n2.800941\n2.868959\n0.109566\n0.025435\n00:00\n\n\n19\n2.797494\n2.870798\n0.111405\n0.025791\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.207323\n3.115180\n0.398577\n0.086718\n00:00\n\n\n1\n3.097981\n2.949997\n0.233394\n0.056430\n00:00\n\n\n2\n3.025096\n2.871349\n0.154746\n0.034154\n00:00\n\n\n3\n2.984505\n2.890811\n0.174208\n0.039029\n00:00\n\n\n4\n2.961992\n2.936154\n0.219550\n0.045950\n00:00\n\n\n5\n2.947332\n2.864819\n0.148216\n0.033121\n00:00\n\n\n6\n2.927917\n2.851729\n0.135126\n0.030623\n00:00\n\n\n7\n2.908772\n2.825195\n0.108592\n0.024916\n00:00\n\n\n8\n2.892562\n2.845464\n0.128861\n0.030083\n00:00\n\n\n9\n2.878802\n2.841273\n0.124670\n0.028827\n00:00\n\n\n10\n2.866316\n2.843637\n0.127034\n0.029812\n00:00\n\n\n11\n2.855637\n2.836118\n0.119515\n0.027748\n00:00\n\n\n12\n2.846589\n2.832935\n0.116332\n0.027080\n00:00\n\n\n13\n2.838424\n2.835726\n0.119123\n0.027565\n00:00\n\n\n14\n2.831281\n2.835740\n0.119137\n0.027858\n00:00\n\n\n15\n2.824760\n2.836478\n0.119874\n0.027920\n00:00\n\n\n16\n2.819135\n2.836669\n0.120066\n0.028054\n00:00\n\n\n17\n2.813901\n2.836018\n0.119414\n0.027880\n00:00\n\n\n18\n2.809481\n2.835162\n0.118558\n0.027623\n00:00\n\n\n19\n2.805690\n2.835153\n0.118550\n0.027605\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.212164\n3.133327\n0.442183\n0.092641\n00:00\n\n\n1\n3.106295\n3.004756\n0.313612\n0.071707\n00:00\n\n\n2\n3.031961\n2.913970\n0.222826\n0.046670\n00:00\n\n\n3\n2.991078\n2.910705\n0.219561\n0.044440\n00:00\n\n\n4\n2.967807\n2.932624\n0.241480\n0.047336\n00:00\n\n\n5\n2.950043\n2.920186\n0.229042\n0.044831\n00:00\n\n\n6\n2.930707\n2.924624\n0.233481\n0.044545\n00:00\n\n\n7\n2.912056\n2.924119\n0.232976\n0.046182\n00:00\n\n\n8\n2.895589\n2.927319\n0.236175\n0.045777\n00:00\n\n\n9\n2.881679\n2.944932\n0.253788\n0.049072\n00:00\n\n\n10\n2.874621\n2.918363\n0.227219\n0.043250\n00:01\n\n\n11\n2.865599\n2.937680\n0.246536\n0.045307\n00:00\n\n\n12\n2.855621\n2.941553\n0.250409\n0.047418\n00:00\n\n\n13\n2.847044\n2.929435\n0.238291\n0.046189\n00:00\n\n\n14\n2.839755\n2.940788\n0.249644\n0.047378\n00:00\n\n\n15\n2.832605\n2.935419\n0.244275\n0.045755\n00:00\n\n\n16\n2.827509\n2.936834\n0.245690\n0.046259\n00:00\n\n\n17\n2.821800\n2.936816\n0.245672\n0.046310\n00:00\n\n\n18\n2.817129\n2.936852\n0.245708\n0.046441\n00:00\n\n\n19\n2.812903\n2.936368\n0.245224\n0.046412\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.194703\n3.130977\n0.341532\n0.074929\n00:00\n\n\n1\n3.085588\n2.979797\n0.190353\n0.049329\n00:00\n\n\n2\n3.013181\n2.915592\n0.126147\n0.030893\n00:00\n\n\n3\n2.973877\n2.928494\n0.139050\n0.034132\n00:00\n\n\n4\n2.948701\n2.913154\n0.123709\n0.029253\n00:00\n\n\n5\n2.930085\n2.901232\n0.111787\n0.026251\n00:00\n\n\n6\n2.916653\n2.904090\n0.114645\n0.026807\n00:00\n\n\n7\n2.899753\n2.907431\n0.117986\n0.027358\n00:00\n\n\n8\n2.883612\n2.907530\n0.118085\n0.027281\n00:00\n\n\n9\n2.868085\n2.901319\n0.111874\n0.025705\n00:00\n\n\n10\n2.853968\n2.900857\n0.111413\n0.025969\n00:00\n\n\n11\n2.842516\n2.899069\n0.109624\n0.025252\n00:00\n\n\n12\n2.832248\n2.896469\n0.107024\n0.024881\n00:00\n\n\n13\n2.823528\n2.895822\n0.106378\n0.024758\n-1:59:59\n\n\n14\n2.815598\n2.892243\n0.102798\n0.023783\n00:00\n\n\n15\n2.809208\n2.894634\n0.105189\n0.024339\n00:00\n\n\n16\n2.803236\n2.895056\n0.105612\n0.024392\n00:00\n\n\n17\n2.798623\n2.894188\n0.104743\n0.024226\n00:00\n\n\n18\n2.794693\n2.894770\n0.105325\n0.024397\n00:00\n\n\n19\n2.790938\n2.894322\n0.104877\n0.024302\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold5------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.199997\n3.129761\n0.340951\n0.074561\n00:00\n\n\n1\n3.075929\n2.966693\n0.177883\n0.046553\n00:00\n\n\n2\n3.002883\n2.903497\n0.114686\n0.028490\n00:00\n\n\n3\n2.964937\n2.902469\n0.113658\n0.027166\n00:00\n\n\n4\n2.942972\n2.900843\n0.112033\n0.027254\n00:00\n\n\n5\n2.928877\n2.899299\n0.110489\n0.027179\n00:00\n\n\n6\n2.910979\n2.892999\n0.104189\n0.025580\n00:00\n\n\n7\n2.892474\n2.903407\n0.114597\n0.027419\n00:00\n\n\n8\n2.876405\n2.880818\n0.092008\n0.022334\n00:00\n\n\n9\n2.861168\n2.885040\n0.096230\n0.023397\n00:00\n\n\n10\n2.848615\n2.875726\n0.086915\n0.021212\n00:00\n\n\n11\n2.838090\n2.879966\n0.091155\n0.021947\n00:00\n\n\n12\n2.829193\n2.876115\n0.087305\n0.021194\n00:00\n\n\n13\n2.820646\n2.882905\n0.094094\n0.023022\n00:00\n\n\n14\n2.813677\n2.882934\n0.094123\n0.022730\n00:00\n\n\n15\n2.807501\n2.883899\n0.095089\n0.023176\n00:00\n\n\n16\n2.801921\n2.882332\n0.093521\n0.022763\n00:00\n\n\n17\n2.797628\n2.881665\n0.092854\n0.022552\n00:00\n\n\n18\n2.793886\n2.882133\n0.093322\n0.022644\n00:01\n\n\n19\n2.790486\n2.881597\n0.092787\n0.022498\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold6------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.194320\n3.125801\n0.310535\n0.070329\n00:00\n\n\n1\n3.076676\n2.948623\n0.133357\n0.035381\n00:00\n\n\n2\n3.005836\n2.954429\n0.139163\n0.032063\n00:00\n\n\n3\n2.967523\n2.950755\n0.135489\n0.031137\n00:00\n\n\n4\n2.949190\n2.935955\n0.120688\n0.028899\n00:00\n\n\n5\n2.929599\n2.925230\n0.109964\n0.024822\n00:00\n\n\n6\n2.909208\n2.916939\n0.101673\n0.023810\n00:00\n\n\n7\n2.889302\n2.964673\n0.149406\n0.034152\n00:00\n\n\n8\n2.872472\n3.053467\n0.238200\n0.041788\n00:00\n\n\n9\n2.857490\n3.030991\n0.215725\n0.038701\n00:00\n\n\n10\n2.845153\n3.009413\n0.194146\n0.038094\n00:00\n\n\n11\n2.834631\n3.039492\n0.224225\n0.040353\n00:00\n\n\n12\n2.826049\n2.916903\n0.101637\n0.023530\n00:00\n\n\n13\n2.818126\n2.911845\n0.096579\n0.022495\n00:00\n\n\n14\n2.811524\n2.914006\n0.098740\n0.023023\n00:00\n\n\n15\n2.805404\n2.909503\n0.094237\n0.022106\n00:00\n\n\n16\n2.800207\n2.909804\n0.094538\n0.022054\n00:00\n\n\n17\n2.796073\n2.910941\n0.095674\n0.022245\n00:00\n\n\n18\n2.792119\n2.911169\n0.095903\n0.022274\n00:00\n\n\n19\n2.788670\n2.910234\n0.094968\n0.022100\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold7------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.193444\n3.132987\n0.470942\n0.100316\n00:00\n\n\n1\n3.075158\n2.953928\n0.291882\n0.064369\n00:00\n\n\n2\n3.004199\n2.975640\n0.313595\n0.064038\n00:00\n\n\n3\n2.964350\n3.090348\n0.428302\n0.083974\n00:00\n\n\n4\n2.943624\n3.035332\n0.373287\n0.070942\n00:00\n\n\n5\n2.922046\n2.968457\n0.306412\n0.065235\n00:00\n\n\n6\n2.901327\n2.954379\n0.292333\n0.065219\n-1:59:59\n\n\n7\n2.882046\n2.925243\n0.263198\n0.060871\n00:00\n\n\n8\n2.866063\n2.936579\n0.274533\n0.064218\n00:00\n\n\n9\n2.852979\n2.945917\n0.283871\n0.062147\n00:00\n\n\n10\n2.841709\n2.916834\n0.254789\n0.060364\n00:00\n\n\n11\n2.832586\n2.954140\n0.292095\n0.063815\n00:00\n\n\n12\n2.824114\n2.961896\n0.299851\n0.067524\n00:00\n\n\n13\n2.816724\n2.930872\n0.268827\n0.059107\n00:00\n\n\n14\n2.810433\n2.924781\n0.262736\n0.060047\n00:00\n\n\n15\n2.805051\n2.928467\n0.266421\n0.059658\n00:00\n\n\n16\n2.800364\n2.932495\n0.270450\n0.060461\n00:00\n\n\n17\n2.796210\n2.934587\n0.272542\n0.060946\n00:00\n\n\n18\n2.793103\n2.929379\n0.267334\n0.060319\n00:00\n\n\n19\n2.790570\n2.931830\n0.269785\n0.060809\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold8------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.204390\n3.128783\n0.330651\n0.071957\n00:00\n\n\n1\n3.082807\n2.936002\n0.137870\n0.031859\n00:00\n\n\n2\n3.005090\n2.969775\n0.171644\n0.036953\n00:00\n\n\n3\n2.965562\n2.997628\n0.199497\n0.044284\n00:00\n\n\n4\n2.942865\n2.932713\n0.134581\n0.028845\n00:00\n\n\n5\n2.922158\n2.932485\n0.134353\n0.029581\n00:00\n\n\n6\n2.903975\n2.920239\n0.122107\n0.026156\n00:00\n\n\n7\n2.885199\n2.901689\n0.103558\n0.022120\n00:00\n\n\n8\n2.868658\n2.909636\n0.111505\n0.023997\n00:00\n\n\n9\n2.854479\n2.915422\n0.117290\n0.025359\n00:00\n\n\n10\n2.842377\n2.908000\n0.109868\n0.023234\n00:00\n\n\n11\n2.833321\n2.904814\n0.106682\n0.023166\n00:00\n\n\n12\n2.824632\n2.907447\n0.109316\n0.024112\n00:00\n\n\n13\n2.817395\n2.901404\n0.103273\n0.022250\n00:00\n\n\n14\n2.811185\n2.907396\n0.109264\n0.023505\n00:00\n\n\n15\n2.805175\n2.903952\n0.105820\n0.022850\n00:00\n\n\n16\n2.799963\n2.907275\n0.109143\n0.023509\n00:00\n\n\n17\n2.795720\n2.908115\n0.109983\n0.023676\n00:00\n\n\n18\n2.792551\n2.907698\n0.109566\n0.023603\n00:00\n\n\n19\n2.790073\n2.907019\n0.108887\n0.023489\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_mlp = train_dl_cv(df,feat_col,target_col,\n                  splits = splits,\n                  model_func = get_mlp,\n                  n_epoch=20,lr=3e-3,save='mlp')\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.171476\n3.139420\n0.400859\n0.080985\n00:00\n\n\n1\n3.106711\n3.147713\n0.409152\n0.082218\n00:00\n\n\n2\n3.038125\n3.160561\n0.422000\n0.083707\n00:00\n\n\n3\n2.976095\n3.189467\n0.450906\n0.085103\n00:00\n\n\n4\n2.928933\n3.253317\n0.514757\n0.087918\n00:00\n\n\n5\n2.895859\n3.290741\n0.552180\n0.087818\n00:00\n\n\n6\n2.871152\n3.370811\n0.632249\n0.091517\n00:00\n\n\n7\n2.852960\n3.411198\n0.672637\n0.090949\n00:00\n\n\n8\n2.838817\n3.496814\n0.758253\n0.091359\n00:00\n\n\n9\n2.827737\n3.521644\n0.783083\n0.093565\n00:00\n\n\n10\n2.818174\n3.498032\n0.759471\n0.093064\n00:00\n\n\n11\n2.810489\n3.504961\n0.766400\n0.094115\n00:00\n\n\n12\n2.803670\n3.508696\n0.770135\n0.092760\n00:00\n\n\n13\n2.797866\n3.541964\n0.803403\n0.094965\n00:00\n\n\n14\n2.792816\n3.547325\n0.808764\n0.094005\n00:00\n\n\n15\n2.788567\n3.548905\n0.810344\n0.094359\n00:00\n\n\n16\n2.784840\n3.552236\n0.813675\n0.094531\n00:00\n\n\n17\n2.781688\n3.556740\n0.818179\n0.094105\n00:00\n\n\n18\n2.779126\n3.557160\n0.818599\n0.094202\n00:00\n\n\n19\n2.776936\n3.562564\n0.824003\n0.094342\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.138040\n3.135045\n0.375653\n0.082271\n00:00\n\n\n1\n3.054276\n3.113542\n0.354149\n0.079574\n00:00\n\n\n2\n2.989687\n3.048094\n0.288702\n0.069778\n00:00\n\n\n3\n2.937330\n2.952537\n0.193145\n0.050103\n-1:59:59\n\n\n4\n2.901045\n2.872171\n0.112778\n0.028355\n00:00\n\n\n5\n2.875492\n2.863093\n0.103700\n0.025160\n00:00\n\n\n6\n2.856277\n2.865705\n0.106313\n0.025039\n00:00\n\n\n7\n2.840961\n2.864216\n0.104823\n0.024369\n00:00\n\n\n8\n2.829274\n2.864235\n0.104842\n0.024402\n00:00\n\n\n9\n2.820478\n2.877947\n0.118554\n0.027575\n00:00\n\n\n10\n2.812226\n2.873299\n0.113906\n0.026126\n00:00\n\n\n11\n2.806044\n2.869767\n0.110374\n0.025534\n00:00\n\n\n12\n2.800019\n2.872890\n0.113498\n0.026378\n00:00\n\n\n13\n2.794942\n2.871101\n0.111708\n0.025842\n00:00\n\n\n14\n2.790824\n2.871950\n0.112557\n0.025829\n00:00\n\n\n15\n2.786819\n2.872271\n0.112878\n0.025944\n00:00\n\n\n16\n2.783419\n2.869001\n0.109609\n0.025354\n00:00\n\n\n17\n2.780620\n2.871257\n0.111865\n0.025823\n00:00\n\n\n18\n2.778407\n2.871228\n0.111836\n0.025827\n00:00\n\n\n19\n2.776483\n2.869788\n0.110395\n0.025548\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.132754\n3.134609\n0.418006\n0.089472\n00:00\n\n\n1\n3.046801\n3.113223\n0.396620\n0.086776\n00:00\n\n\n2\n2.980770\n3.055556\n0.338953\n0.078529\n00:00\n\n\n3\n2.932360\n2.969013\n0.252410\n0.062473\n00:00\n\n\n4\n2.899219\n2.899032\n0.182429\n0.046023\n00:00\n\n\n5\n2.875994\n2.873559\n0.156956\n0.038564\n00:00\n\n\n6\n2.858054\n2.845880\n0.129277\n0.030850\n00:00\n\n\n7\n2.844874\n2.827710\n0.111107\n0.026074\n00:00\n\n\n8\n2.834472\n2.832326\n0.115723\n0.026925\n00:00\n\n\n9\n2.826840\n2.842240\n0.125637\n0.030043\n00:00\n\n\n10\n2.819004\n2.836573\n0.119970\n0.027737\n00:00\n\n\n11\n2.812238\n2.861251\n0.144647\n0.033234\n00:00\n\n\n12\n2.806651\n2.852784\n0.136180\n0.031518\n00:00\n\n\n13\n2.801448\n2.847494\n0.130891\n0.030155\n00:00\n\n\n14\n2.796698\n2.846005\n0.129401\n0.029958\n00:00\n\n\n15\n2.792893\n2.848514\n0.131910\n0.030794\n00:00\n\n\n16\n2.789678\n2.848055\n0.131452\n0.030317\n00:00\n\n\n17\n2.786758\n2.846974\n0.130371\n0.030086\n00:00\n\n\n18\n2.784590\n2.847528\n0.130925\n0.030296\n00:00\n\n\n19\n2.782532\n2.848963\n0.132360\n0.030637\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.123281\n3.132412\n0.441268\n0.092814\n00:00\n\n\n1\n3.042101\n3.114030\n0.422886\n0.090477\n00:00\n\n\n2\n2.979384\n3.074581\n0.383437\n0.084360\n00:00\n\n\n3\n2.931671\n3.003192\n0.312048\n0.069243\n00:00\n\n\n4\n2.900101\n2.941841\n0.250698\n0.052327\n00:00\n\n\n5\n2.877186\n2.922068\n0.230924\n0.046006\n00:00\n\n\n6\n2.860131\n2.931553\n0.240410\n0.046516\n00:00\n\n\n7\n2.847045\n2.928376\n0.237232\n0.045358\n00:00\n\n\n8\n2.836282\n2.931814\n0.240670\n0.045169\n00:00\n\n\n9\n2.827431\n2.939419\n0.248275\n0.048628\n00:00\n\n\n10\n2.819919\n2.932438\n0.241294\n0.046815\n00:00\n\n\n11\n2.814036\n2.933811\n0.242668\n0.046418\n00:00\n\n\n12\n2.808680\n2.934338\n0.243194\n0.046852\n00:00\n\n\n13\n2.804248\n2.950339\n0.259195\n0.049754\n00:00\n\n\n14\n2.799972\n2.938487\n0.247343\n0.046829\n00:00\n\n\n15\n2.796435\n2.941572\n0.250429\n0.048000\n00:00\n\n\n16\n2.793111\n2.947199\n0.256055\n0.048709\n00:00\n\n\n17\n2.790409\n2.951463\n0.260319\n0.049281\n00:00\n\n\n18\n2.788168\n2.950207\n0.259063\n0.049058\n00:00\n\n\n19\n2.786237\n2.950060\n0.258915\n0.049077\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.124104\n3.134452\n0.345007\n0.075167\n00:00\n\n\n1\n3.038496\n3.111592\n0.322147\n0.072473\n00:00\n\n\n2\n2.970284\n3.048591\n0.259146\n0.063065\n00:00\n\n\n3\n2.920771\n2.958019\n0.168574\n0.043953\n00:00\n\n\n4\n2.887409\n2.898182\n0.108737\n0.026950\n00:00\n\n\n5\n2.863338\n2.887498\n0.098053\n0.023644\n00:00\n\n\n6\n2.845474\n2.888538\n0.099093\n0.023433\n-1:59:59\n\n\n7\n2.831556\n2.886909\n0.097465\n0.022886\n00:00\n\n\n8\n2.819985\n2.892709\n0.103265\n0.024001\n00:00\n\n\n9\n2.810792\n2.892037\n0.102592\n0.023989\n00:00\n\n\n10\n2.803365\n2.895198\n0.105753\n0.024882\n00:00\n\n\n11\n2.797357\n2.895902\n0.106458\n0.024947\n00:00\n\n\n12\n2.792247\n2.894876\n0.105431\n0.024678\n00:00\n\n\n13\n2.787674\n2.896597\n0.107152\n0.025046\n00:00\n\n\n14\n2.783528\n2.894453\n0.105008\n0.024469\n00:00\n\n\n15\n2.780488\n2.896704\n0.107260\n0.025280\n00:00\n\n\n16\n2.777241\n2.896692\n0.107246\n0.025114\n00:00\n\n\n17\n2.774627\n2.895978\n0.106533\n0.024936\n00:00\n\n\n18\n2.772030\n2.896508\n0.107063\n0.025073\n00:00\n\n\n19\n2.770392\n2.896650\n0.107205\n0.025118\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold5------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.140697\n3.135143\n0.346332\n0.075070\n00:00\n\n\n1\n3.048342\n3.119731\n0.330921\n0.073235\n00:00\n\n\n2\n2.979255\n3.078922\n0.290112\n0.067775\n00:00\n\n\n3\n2.929077\n2.995795\n0.206985\n0.052510\n00:00\n\n\n4\n2.893279\n2.975678\n0.186867\n0.047241\n00:00\n\n\n5\n2.868217\n2.886815\n0.098004\n0.024602\n00:00\n\n\n6\n2.849210\n2.916328\n0.127518\n0.032733\n00:00\n\n\n7\n2.835844\n2.884094\n0.095283\n0.024124\n00:00\n\n\n8\n2.824802\n2.893069\n0.104259\n0.026342\n00:00\n\n\n9\n2.815038\n2.909672\n0.120861\n0.030394\n00:00\n\n\n10\n2.806904\n2.879725\n0.090915\n0.022690\n00:00\n\n\n11\n2.800042\n2.910357\n0.121546\n0.030322\n00:00\n\n\n12\n2.794713\n2.887380\n0.098570\n0.024505\n00:00\n\n\n13\n2.789812\n2.891015\n0.102204\n0.025047\n00:00\n\n\n14\n2.785572\n2.883691\n0.094881\n0.023556\n00:00\n\n\n15\n2.781896\n2.886951\n0.098140\n0.024198\n00:00\n\n\n16\n2.778671\n2.888133\n0.099322\n0.024640\n00:00\n\n\n17\n2.775967\n2.890878\n0.102068\n0.025343\n00:00\n\n\n18\n2.773479\n2.889570\n0.100760\n0.025070\n00:00\n\n\n19\n2.771580\n2.886280\n0.097469\n0.024140\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold6------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.125239\n3.143044\n0.327779\n0.072367\n00:00\n\n\n1\n3.036369\n3.146004\n0.330738\n0.072551\n00:00\n\n\n2\n2.969717\n3.142249\n0.326984\n0.071680\n00:00\n\n\n3\n2.921383\n3.125622\n0.310355\n0.069347\n00:00\n\n\n4\n2.886705\n3.119030\n0.303763\n0.067855\n00:00\n\n\n5\n2.863236\n3.150701\n0.335435\n0.069734\n00:00\n\n\n6\n2.846394\n3.105358\n0.290092\n0.062999\n00:00\n\n\n7\n2.833611\n3.020862\n0.205596\n0.049413\n00:00\n\n\n8\n2.822827\n3.081616\n0.266349\n0.058375\n00:00\n\n\n9\n2.814345\n3.046980\n0.231714\n0.052382\n00:00\n\n\n10\n2.806578\n3.069500\n0.254234\n0.056023\n00:00\n\n\n11\n2.800230\n3.049825\n0.234558\n0.052775\n00:00\n\n\n12\n2.794504\n3.000489\n0.185223\n0.044598\n00:00\n\n\n13\n2.790055\n3.022670\n0.207403\n0.048725\n00:00\n\n\n14\n2.786135\n3.001585\n0.186319\n0.044600\n00:00\n\n\n15\n2.782260\n2.999725\n0.184458\n0.044126\n00:00\n\n\n16\n2.778924\n2.977914\n0.162648\n0.039644\n00:00\n\n\n17\n2.775975\n2.984549\n0.169282\n0.041061\n00:00\n\n\n18\n2.773758\n2.973586\n0.158320\n0.038846\n00:00\n\n\n19\n2.772370\n2.993045\n0.177778\n0.042562\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold7------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.110090\n3.133375\n0.471330\n0.100618\n00:00\n\n\n1\n3.027103\n3.102594\n0.440548\n0.096998\n00:00\n\n\n2\n2.965780\n3.024230\n0.362184\n0.084081\n00:00\n\n\n3\n2.917700\n2.935767\n0.273722\n0.061535\n00:00\n\n\n4\n2.885562\n2.921035\n0.258990\n0.056032\n00:00\n\n\n5\n2.862646\n2.910833\n0.248788\n0.054900\n00:00\n\n\n6\n2.845487\n2.937936\n0.275890\n0.060785\n00:00\n\n\n7\n2.832792\n2.922657\n0.260612\n0.060340\n-1:59:59\n\n\n8\n2.822367\n2.944104\n0.282059\n0.066009\n00:00\n\n\n9\n2.813707\n2.972666\n0.310620\n0.072871\n00:00\n\n\n10\n2.806854\n2.938702\n0.276657\n0.063607\n00:00\n\n\n11\n2.800919\n2.948178\n0.286132\n0.065069\n00:00\n\n\n12\n2.795901\n2.972046\n0.310001\n0.071711\n00:00\n\n\n13\n2.791595\n2.929130\n0.267085\n0.062957\n00:00\n\n\n14\n2.787729\n2.940015\n0.277970\n0.065189\n00:00\n\n\n15\n2.784400\n2.937132\n0.275087\n0.064643\n00:00\n\n\n16\n2.781541\n2.944604\n0.282559\n0.066189\n00:00\n\n\n17\n2.779098\n2.947384\n0.285339\n0.066931\n00:00\n\n\n18\n2.777092\n2.944833\n0.282787\n0.066404\n00:00\n\n\n19\n2.775365\n2.944260\n0.282215\n0.066229\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold8------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.140649\n3.132743\n0.334611\n0.072549\n00:00\n\n\n1\n3.045759\n3.118004\n0.319872\n0.070753\n00:00\n\n\n2\n2.977565\n3.083817\n0.285685\n0.065886\n00:00\n\n\n3\n2.924772\n3.019604\n0.221472\n0.054484\n00:00\n\n\n4\n2.889525\n3.027496\n0.229364\n0.055167\n00:00\n\n\n5\n2.864700\n3.021855\n0.223723\n0.052769\n00:00\n\n\n6\n2.847138\n3.056512\n0.258381\n0.059230\n00:00\n\n\n7\n2.833452\n3.042546\n0.244414\n0.056720\n00:00\n\n\n8\n2.822788\n3.159932\n0.361800\n0.073176\n00:00\n\n\n9\n2.814126\n3.136939\n0.338808\n0.071001\n00:00\n\n\n10\n2.806904\n3.083386\n0.285255\n0.064539\n00:00\n\n\n11\n2.800378\n3.071976\n0.273845\n0.062171\n00:00\n\n\n12\n2.794891\n3.084828\n0.286697\n0.064775\n00:00\n\n\n13\n2.790077\n3.075835\n0.277704\n0.062719\n00:00\n\n\n14\n2.785990\n3.074905\n0.276773\n0.062855\n00:00\n\n\n15\n2.782810\n3.051820\n0.253688\n0.058684\n00:00\n\n\n16\n2.779867\n3.048082\n0.249950\n0.057938\n00:00\n\n\n17\n2.777103\n3.049922\n0.251790\n0.058291\n00:00\n\n\n18\n2.775033\n3.048445\n0.250313\n0.058125\n00:00\n\n\n19\n2.773071\n3.064700\n0.266568\n0.061091\n00:00",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#ml",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#ml",
    "title": "DL training: Model comparison on T5 feature",
    "section": "ML",
    "text": "ML\n\nfrom sklearn.neighbors import *\nfrom sklearn.linear_model import *\nfrom sklearn.tree import *\nfrom sklearn.svm import *\nfrom sklearn.ensemble import *\nfrom sklearn.multioutput import MultiOutputRegressor\n\n\nml_models = {\n    'LinearRegression': LinearRegression(),\n    'Lasso': Lasso(0.1), # L1 regularization # changing alpha does not change the result\n    'Ridge': Ridge(alpha=0.1), # L2 regularization\n    'ElasticNet': ElasticNet(0.1), # Combine L1 and L2\n    \n    # 'SVR':SVR(C=10,gamma=1),\n    'DecisionTreeRegressor': DecisionTreeRegressor(), # not very good\n    'KNN': KNeighborsRegressor(n_neighbors=3), # compared with others, n=3 gives the best results\n    # 'XGBRegressor': XGBRegressor(), #slow without gpu\n    # 'RandomForestRegressor': RandomForestRegressor() # slow, use cuml to use gpu\n                                      }\n\n\noofs_ml = {}\n\n\nfor name,model in ml_models.items():\n    oofs_ml[name] = train_ml_cv(df, feat_col, target_col, splits, model)\n\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../sklearn/linear_model/_coordinate_descent.py:695: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 0.000e+00, tolerance: 0.000e+00\n  model = cd_fast.enet_coordinate_descent(",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#score",
    "href": "kinase_domain/kd_05_pspa_training_model_comparison_all.html#score",
    "title": "DL training: Model comparison on T5 feature",
    "section": "Score",
    "text": "Score\n\ntarget=df[target_col].copy()\n\n\npspa_info['split'] = oof_cnn.nfold\n\n\npspa_info['MLP'] =get_score_jsd(target,oof_mlp)\npspa_info['CNN'] =get_score_jsd(target,oof_cnn)\n\n\nfrom tqdm import tqdm\nfrom katlas.pssm import *\n\n\ndef post_process_oof(oof_ml,target_col):\n    oof = oof_ml.copy()\n    oof[target_col] = oof.apply(lambda r: pd.Series(flatten_pssm(post_process(recover_pssm(r[target_col])),column_wise=False)), axis=1)\n    return oof\n\n\nfor name,oof in tqdm(oofs_ml.items()):\n    oof = post_process_oof(oof,target_col)\n    pspa_info[name] = get_score_jsd(target,oof)\n\n100%|████████████████████████████████████████████████████████████████████████████████████████████████| 6/6 [00:24&lt;00:00,  4.08s/it]\n\n\n\nfrom katlas.plot import *\n\n\nset_sns()\n\n\npspa_info\n\n\n\n\n\n\n\n\nkinase\nsubfamily\nfamily\ngroup\nsplit\nMLP\nCNN\nLinearRegression\nLasso\nRidge\nElasticNet\nDecisionTreeRegressor\nKNN\n\n\n\n\n0\nQ2M2I8_AAK1_HUMAN_KD1\nNAK\nNAK\nOther\n4\n0.048600\n0.050542\n0.098876\n0.067539\n0.056838\n0.067539\n0.083130\n0.048014\n\n\n1\nP27037_AVR2A_HUMAN_KD1\nSTKR2\nSTKR\nTKL\n6\n0.044587\n0.029185\n0.088647\n0.037442\n0.040927\n0.037442\n0.110160\n0.095125\n\n\n2\nQ13705_AVR2B_HUMAN_KD1\nSTKR2\nSTKR\nTKL\n6\n0.043153\n0.034765\n0.086192\n0.039007\n0.042801\n0.039007\n0.111369\n0.093459\n\n\n3\nP31749_AKT1_HUMAN_KD1\nAkt\nAkt\nAGC\n2\n0.023194\n0.022999\n0.084334\n0.042558\n0.039124\n0.042558\n0.055568\n0.068775\n\n\n4\nP31751_AKT2_HUMAN_KD1\nAkt\nAkt\nAGC\n2\n0.015898\n0.014478\n0.067616\n0.038013\n0.031472\n0.038013\n0.041074\n0.040728\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n363\nP17948_VGFR1_HUMAN_KD1\nVEGFR\nVEGFR\nTK\n0\n0.089577\n0.088227\n0.150470\n0.095850\n0.107327\n0.095850\n0.100689\n0.088376\n\n\n364\nP35968_VGFR2_HUMAN_KD1\nVEGFR\nVEGFR\nTK\n0\n0.085835\n0.086581\n0.161182\n0.088967\n0.099599\n0.088967\n0.108746\n0.085550\n\n\n365\nP35916_VGFR3_HUMAN_KD1\nVEGFR\nVEGFR\nTK\n0\n0.088425\n0.088291\n0.170160\n0.092814\n0.109089\n0.092814\n0.093069\n0.095619\n\n\n366\nP07947_YES_HUMAN_KD1\nSrc\nSrc\nTK\n0\n0.095206\n0.094565\n0.127592\n0.093916\n0.103253\n0.093916\n0.100129\n0.094951\n\n\n367\nP43403_ZAP70_HUMAN_KD1\nSyk\nSyk\nTK\n0\n0.122080\n0.125690\n0.149385\n0.133662\n0.125509\n0.133662\n0.130504\n0.126143\n\n\n\n\n368 rows × 13 columns\n\n\n\n\npspa_info.columns\n\nIndex(['kinase', 'subfamily', 'family', 'group', 'split', 'MLP', 'CNN',\n       'LinearRegression', 'Lasso', 'Ridge', 'ElasticNet',\n       'DecisionTreeRegressor', 'KNN'],\n      dtype='object')\n\n\n\nmodel_list = ['MLP','CNN']+list(ml_models.keys())\n\n\nordered_list = pspa_info[model_list].mean().sort_values(ascending=False).index\nordered_list\n\nIndex(['LinearRegression', 'DecisionTreeRegressor', 'KNN', 'Ridge', 'Lasso',\n       'ElasticNet', 'MLP', 'CNN'],\n      dtype='object')\n\n\n\ndef plot_group_bar(df, \n                   value_cols,  # list of column names for values, the order depends on the first item\n                   group,       # column name of group (e.g., 'kinase')\n                   figsize=(12, 5),\n                   order=None,\n                   title=None,\n                   fontsize=14,\n                   rotation=90,\n                   **kwargs):\n    \n    \" Plot grouped bar graph from dataframe. \"\n\n    # Prepare the dataframe for plotting\n    # Melt the dataframe to go from wide to long format\n    df_melted = df.melt(id_vars=group, value_vars=value_cols, var_name='Ranking', value_name='Value')\n\n    plt.figure(figsize=figsize)\n    \n    # Create the bar plot\n    sns.barplot(data=df_melted, \n                x=group, \n                y='Value', \n                hue='Ranking', \n                order=order, \n                capsize=0.1,\n                err_kws={'linewidth': 1.5,'color': 'gray'}, \n                **kwargs)\n    \n    # Increase font size for the x-axis and y-axis tick labels\n    plt.tick_params(axis='x', labelsize=fontsize)  # Increase x-axis label size\n    plt.tick_params(axis='y', labelsize=fontsize)  # Increase y-axis label size\n    \n    # Modify x and y label and increase font size\n    plt.xlabel('', fontsize=fontsize)\n    plt.ylabel('Value', fontsize=fontsize)\n    \n    # Rotate X labels\n    plt.xticks(rotation=rotation)\n    \n    # Plot titles\n    if title is not None:\n        plt.title(title, fontsize=fontsize)\n    \n    plt.gca().spines[['right', 'top']].set_visible(False)\n    plt.legend(\n        fontsize=fontsize,\n        loc=\"upper left\",\n        # alpha=0.2\n        # bbox_to_anchor=(1.02, 1),\n        # borderaxespad=0\n    )\n\n\nimport seaborn as sns\n\n\npspa_info.to_parquet('raw/model_compare_results.parquet')\n\n\nplot_group_bar(pspa_info,ordered_list,group='group',figsize=(14,6))\nplt.ylabel('JS divergence')\nplt.title('Comparison of models')\nsave_svg('fig/model_comparison.svg')",
    "crumbs": [
      "kinase_domain",
      "DL training: Model comparison on T5 feature"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html",
    "title": "DL training",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#setup",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#setup",
    "title": "DL training",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#data",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#data",
    "title": "DL training",
    "section": "Data",
    "text": "Data\n\ndf=pd.read_parquet('train/cddm_t5.parquet')\n\n\ninfo=Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\ninfo = info[info.kd_ID.notna()]\n\nsubfamily_map = info[['kd_ID','subfamily']].drop_duplicates().set_index('kd_ID')['subfamily']\nfamily_map = info[['kd_ID','family']].drop_duplicates().set_index('kd_ID')['family']\ngroup_map = info[['kd_ID','group']].drop_duplicates().set_index('kd_ID')['group']\n\nkinase_info = pd.DataFrame(df.index.tolist(),columns=['kinase'])\n\nkinase_info['subfamily'] = kinase_info.kinase.map(subfamily_map)\nkinase_info['family'] = kinase_info.kinase.map(family_map)\nkinase_info['group'] = kinase_info.kinase.map(group_map)\n\n\ndf=df.reset_index()\n\n\ndf.columns\n\nIndex(['index', '-20P', '-19P', '-18P', '-17P', '-16P', '-15P', '-14P', '-13P',\n       '-12P',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1968)\n\n\n\n# column name of feature and target\nfeat_col = df.columns[df.columns.str.startswith('T5_')]\ntarget_col = df.columns[~df.columns.isin(feat_col)][1:]\n\n\nfeat_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#split",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#split",
    "title": "DL training",
    "section": "Split",
    "text": "Split\n\nkinase_info.subfamily.value_counts()\n\nsubfamily\nEph     12\nSrc     11\nSTE7     7\nNEK      7\nCK1      6\n        ..\nPDK1     1\nGCN2     1\nCDC7     1\nMAST     1\nRAF      1\nName: count, Length: 136, dtype: int64\n\n\n\nkinase_info.family.value_counts()\n\nfamily\nSTE20    22\nCAMKL    17\nEph      12\nMAPK     12\nSrc      11\n         ..\nSTK33     1\nPDK1      1\nCDC7      1\nMAST      1\nRAF       1\nName: count, Length: 88, dtype: int64\n\n\n\nkinase_info.group.value_counts()\n\ngroup\nTK          80\nCAMK        47\nAGC         45\nOther       40\nCMGC        39\nSTE         35\nTKL         21\nCK1          9\nAtypical     4\nName: count, dtype: int64\n\n\n\nsplits = get_splits(kinase_info, group='subfamily',nfold=5)\n\nsplit0 = splits[0]\n\nGroupKFold(n_splits=5, random_state=None, shuffle=False)\n# subfamily in train set: 110\n# subfamily in test set: 26",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#dataset",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#dataset",
    "title": "DL training",
    "section": "Dataset",
    "text": "Dataset\n\n# dataset\nds = GeneralDataset(df,feat_col,target_col)\n\n\nlen(ds)\n\n320\n\n\n\ndl = DataLoader(ds, batch_size=64, shuffle=True)\n\n\nxb,yb = next(iter(dl))\n\nxb.shape,yb.shape\n\n(torch.Size([64, 1024]), torch.Size([64, 23, 41]))",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#model",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#model",
    "title": "DL training",
    "section": "Model",
    "text": "Model\n\nn_feature = len(feat_col)\nn_target = len(target_col)\n\n\n# def get_mlp(): return PSSM_model(n_feature,n_target,model='MLP')\n\ndef get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\n\nmodel = get_cnn()\n\n\nlogits= model(xb)\n\n\nlogits.shape\n\ntorch.Size([64, 23, 41])",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#loss",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#loss",
    "title": "DL training",
    "section": "Loss",
    "text": "Loss\n\nCE(logits,yb)\n\ntensor(3.3115, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#metrics",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#metrics",
    "title": "DL training",
    "section": "Metrics",
    "text": "Metrics\n\nKLD(logits,yb)\n\ntensor(0.5317, grad_fn=&lt;MeanBackward0&gt;)\n\n\n\nJSD(logits,yb)\n\ntensor(0.1252, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#cv-train",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#cv-train",
    "title": "DL training",
    "section": "CV train",
    "text": "CV train\n\ncross-validation\n\n\noof = train_dl_cv(df,feat_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn,\n                  n_epoch=20,lr=3e-3,save='cnn_cddm')\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.282649\n3.128296\n0.319262\n0.081570\n00:01\n\n\n1\n3.241650\n3.113522\n0.304488\n0.079595\n00:00\n\n\n2\n3.212050\n3.113102\n0.304069\n0.077892\n00:00\n\n\n3\n3.195983\n3.120565\n0.311531\n0.078662\n00:00\n\n\n4\n3.178256\n2.976437\n0.167403\n0.044890\n00:00\n\n\n5\n3.148183\n2.948758\n0.139725\n0.036188\n00:00\n\n\n6\n3.109516\n2.925130\n0.116096\n0.029711\n00:00\n\n\n7\n3.072004\n2.909240\n0.100206\n0.026152\n00:00\n\n\n8\n3.039572\n2.904013\n0.094980\n0.025093\n00:00\n\n\n9\n3.012379\n2.898960\n0.089926\n0.023662\n00:00\n\n\n10\n2.989801\n2.899136\n0.090103\n0.023424\n00:00\n\n\n11\n2.970484\n2.899322\n0.090289\n0.023485\n00:00\n\n\n12\n2.954165\n2.898535\n0.089501\n0.023218\n00:00\n\n\n13\n2.940085\n2.897991\n0.088957\n0.023097\n00:00\n\n\n14\n2.927743\n2.896062\n0.087028\n0.022649\n00:00\n\n\n15\n2.917165\n2.895469\n0.086436\n0.022511\n00:00\n\n\n16\n2.907989\n2.896032\n0.086999\n0.022646\n00:00\n\n\n17\n2.899801\n2.895162\n0.086129\n0.022428\n00:00\n\n\n18\n2.892946\n2.894896\n0.085862\n0.022354\n00:00\n\n\n19\n2.886997\n2.894820\n0.085787\n0.022334\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.282195\n3.130908\n0.322224\n0.081733\n00:00\n\n\n1\n3.243584\n3.113548\n0.304865\n0.078650\n00:00\n\n\n2\n3.219855\n3.120547\n0.311864\n0.079403\n00:00\n\n\n3\n3.209427\n3.087194\n0.278511\n0.069197\n00:00\n\n\n4\n3.201059\n2.992566\n0.183883\n0.048371\n00:00\n\n\n5\n3.167005\n2.937138\n0.128454\n0.033072\n00:00\n\n\n6\n3.121017\n2.924041\n0.115357\n0.029413\n00:00\n\n\n7\n3.082160\n2.915458\n0.106775\n0.027174\n00:00\n\n\n8\n3.049422\n2.906384\n0.097700\n0.025222\n00:00\n\n\n9\n3.022278\n2.902709\n0.094025\n0.024238\n00:00\n\n\n10\n2.999649\n2.899378\n0.090695\n0.023322\n00:00\n\n\n11\n2.980213\n2.898759\n0.090075\n0.023229\n00:00\n\n\n12\n2.963545\n2.898273\n0.089589\n0.022956\n00:00\n\n\n13\n2.949331\n2.897189\n0.088506\n0.022689\n00:00\n\n\n14\n2.936587\n2.896288\n0.087604\n0.022514\n00:00\n\n\n15\n2.925316\n2.894401\n0.085718\n0.022021\n00:00\n\n\n16\n2.915478\n2.893880\n0.085196\n0.021894\n00:00\n\n\n17\n2.907102\n2.893515\n0.084832\n0.021793\n00:00\n\n\n18\n2.899950\n2.893503\n0.084820\n0.021781\n00:00\n\n\n19\n2.893546\n2.893279\n0.084595\n0.021737\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.282472\n3.127070\n0.353896\n0.091299\n00:00\n\n\n1\n3.241385\n3.109268\n0.336093\n0.088014\n00:00\n\n\n2\n3.209924\n3.114542\n0.341367\n0.087262\n00:00\n\n\n3\n3.193899\n3.053725\n0.280551\n0.073127\n00:00\n\n\n4\n3.181828\n2.961300\n0.188125\n0.050201\n00:00\n\n\n5\n3.145959\n2.931028\n0.157853\n0.041150\n00:00\n\n\n6\n3.109088\n2.925400\n0.152225\n0.038905\n00:00\n\n\n7\n3.075637\n2.922864\n0.149690\n0.038691\n00:00\n\n\n8\n3.047635\n2.909077\n0.135902\n0.035387\n00:00\n\n\n9\n3.024517\n2.901939\n0.128764\n0.033550\n00:00\n\n\n10\n3.003808\n2.899364\n0.126189\n0.032804\n00:00\n\n\n11\n2.984565\n2.898607\n0.125433\n0.032361\n00:00\n\n\n12\n2.967488\n2.896226\n0.123052\n0.031884\n00:00\n\n\n13\n2.952080\n2.895696\n0.122522\n0.031629\n00:00\n\n\n14\n2.938943\n2.895282\n0.122107\n0.031550\n00:00\n\n\n15\n2.927504\n2.894837\n0.121663\n0.031524\n00:00\n\n\n16\n2.917730\n2.893668\n0.120494\n0.031259\n00:00\n\n\n17\n2.908983\n2.893366\n0.120192\n0.031149\n00:00\n\n\n18\n2.901532\n2.893119\n0.119945\n0.031088\n00:00\n\n\n19\n2.895179\n2.893249\n0.120075\n0.031103\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.280588\n3.129339\n0.335539\n0.085304\n00:00\n\n\n1\n3.240295\n3.119176\n0.325376\n0.083852\n00:00\n\n\n2\n3.210839\n3.091391\n0.297591\n0.077241\n00:00\n\n\n3\n3.200143\n3.042270\n0.248470\n0.065589\n00:00\n\n\n4\n3.195208\n3.029967\n0.236167\n0.060239\n00:00\n\n\n5\n3.157714\n2.951658\n0.157859\n0.039547\n00:00\n\n\n6\n3.114407\n2.937240\n0.143440\n0.036184\n00:00\n\n\n7\n3.076996\n2.915984\n0.122185\n0.031200\n00:00\n\n\n8\n3.044734\n2.903373\n0.109573\n0.028193\n00:00\n\n\n9\n3.018122\n2.900592\n0.106792\n0.027362\n00:00\n\n\n10\n2.995771\n2.897802\n0.104002\n0.026672\n00:00\n\n\n11\n2.977186\n2.896495\n0.102695\n0.026356\n00:00\n\n\n12\n2.960754\n2.895625\n0.101826\n0.026132\n00:00\n\n\n13\n2.946897\n2.895158\n0.101358\n0.025921\n00:00\n\n\n14\n2.935326\n2.893981\n0.100182\n0.025680\n00:00\n\n\n15\n2.925143\n2.893090\n0.099290\n0.025458\n00:00\n\n\n16\n2.916389\n2.892680\n0.098880\n0.025363\n00:00\n\n\n17\n2.908602\n2.891653\n0.097853\n0.025092\n00:00\n\n\n18\n2.901875\n2.891660\n0.097860\n0.025101\n00:00\n\n\n19\n2.896487\n2.891503\n0.097704\n0.025064\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.283504\n3.130594\n0.363589\n0.093193\n00:00\n\n\n1\n3.243992\n3.116076\n0.349071\n0.090924\n00:00\n\n\n2\n3.210798\n3.120450\n0.353445\n0.090563\n00:00\n\n\n3\n3.199268\n3.072872\n0.305868\n0.079987\n00:00\n\n\n4\n3.177695\n2.966492\n0.199487\n0.053601\n00:00\n\n\n5\n3.137152\n2.917118\n0.150113\n0.039282\n-1:59:59\n\n\n6\n3.099840\n2.911311\n0.144307\n0.037135\n00:00\n\n\n7\n3.071257\n2.897541\n0.130536\n0.034004\n00:00\n\n\n8\n3.047829\n2.894860\n0.127856\n0.033557\n00:00\n\n\n9\n3.024281\n2.900576\n0.133571\n0.034486\n00:00\n\n\n10\n3.002414\n2.898617\n0.131613\n0.034054\n00:00\n\n\n11\n2.983205\n2.894372\n0.127367\n0.032931\n00:00\n\n\n12\n2.966494\n2.888815\n0.121811\n0.031625\n00:00\n\n\n13\n2.952212\n2.885732\n0.118727\n0.031049\n00:00\n\n\n14\n2.939676\n2.885109\n0.118105\n0.030705\n00:00\n\n\n15\n2.928643\n2.883477\n0.116472\n0.030395\n00:00\n\n\n16\n2.919168\n2.882151\n0.115146\n0.030121\n00:00\n\n\n17\n2.910880\n2.881615\n0.114610\n0.030057\n00:00\n\n\n18\n2.903741\n2.881046\n0.114041\n0.029917\n00:00\n\n\n19\n2.897946\n2.881109\n0.114104\n0.029928\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof.to_parquet('raw/oof_cddm.parquet')",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07a_cddm_training_subfamily.html#score",
    "href": "kinase_domain/kd_07a_cddm_training_subfamily.html#score",
    "title": "DL training",
    "section": "Score",
    "text": "Score\n\nfrom katlas.pssm import *\n\nfrom functools import partial\n\n\ndef score_df(target,pred,func):\n    distance = [func(target.loc[i],pred.loc[i,target.columns]) for i in target.index]\n    return pd.Series(distance,index=target.index)\n\n\njsd_df = partial(score_df,func=js_divergence_flat)\nkld_df = partial(score_df,func=kl_divergence_flat)\n\n\ntarget=df[target_col].copy()\n\n\nkinase_info['group_split'] = oof.nfold\n\n\nkinase_info['group_jsd'] =jsd_df(target,oof)\n\n\nfrom katlas.plot import *\n\n\nset_sns()\n\n\nplot_bar(kinase_info,'group_jsd',group='group',palette=group_color,figsize=(8,4))\nplt.ylabel('JS divergence')\nplt.title('GroupSplit by subfamily (nfold=5) in kinase subfamily')\n\nText(0.5, 1.0, 'GroupSplit by subfamily (nfold=5) in kinase subfamily')\n\n\n\n\n\n\n\n\n\n\ngroup_color = pd.DataFrame(group_color).T\n\n\nsty_color\n\n{'S': (0.12156862745098039, 0.4666666666666667, 0.7058823529411765),\n 'T': (0.6823529411764706, 0.7803921568627451, 0.9098039215686274),\n 'Y': (1.0, 0.4980392156862745, 0.054901960784313725)}\n\n\n\ngroup_color = group_color.reset_index(names='modi_group')\n\n\ninfo = Data.get_kinase_info()\n\n\nsubfamily_color = info[['modi_group','subfamily']].merge(group_color).drop(columns=['modi_group']).set_index('subfamily')\n\n\nsubfamily_color = subfamily_color.apply(tuple, axis=1).to_dict()\n\n\nplot_bar(kinase_info,'group_jsd',group='subfamily',palette = subfamily_color, figsize=(30,7))\nplt.ylabel('JS divergence')\n# plt.title('Stratified split in kinase subfamily')\n\nText(0, 0.5, 'JS divergence')\n\n\n\n\n\n\n\n\n\n\nfrom katlas.pssm import *\n\n\ndef plot_one_pssm(target,pred,idx):\n    target_pssm = recover_pssm(target.loc[idx])\n    pred_pssm = recover_pssm(pred.loc[idx,target.columns])\n    plot_heatmap(target_pssm,figsize=(10,6))\n    plot_heatmap(pred_pssm,figsize=(10,6))\n\n\nset_sns(100)\n\n\nkinase_info[kinase_info.kinase.str.contains('CDK')]\n\n\n\n\n\n\n\n\nkinase\nsubfamily\nfamily\ngroup\ngroup_split\ngroup_jsd\n\n\n\n\n34\nP06493_CDK1_HUMAN_KD1\nCDC2\nCDK\nCMGC\n1\n0.005642\n\n\n39\nP24941_CDK2_HUMAN_KD1\nCDK2\nCDK\nCMGC\n0\n0.006260\n\n\n102\nQ00535_CDK5_HUMAN_KD1\nCDK5\nCDK\nCMGC\n3\n0.008968\n\n\n168\nP50750_CDK9_HUMAN_KD1\nCDK9\nCDK\nCMGC\n4\n0.018047\n\n\n204\nQ00534_CDK6_HUMAN_KD1\nCDK4\nCDK\nCMGC\n1\n0.016037\n\n\n224\nP50613_CDK7_HUMAN_KD1\nCDK7\nCDK\nCMGC\n2\n0.030289\n\n\n228\nQ00526_CDK3_HUMAN_KD1\nCDK2\nCDK\nCMGC\n0\n0.020181\n\n\n240\nP11802_CDK4_HUMAN_KD1\nCDK4\nCDK\nCMGC\n1\n0.031994\n\n\n280\nP49336_CDK8_HUMAN_KD1\nCDK8\nCDK\nCMGC\n0\n0.045855\n\n\n\n\n\n\n\nCDK7:\n\nplot_one_pssm(target,oof,224)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompare with pspa CDK:\n\ndf2=pd.read_parquet('train/pspa_t5.parquet')\n\n\nseries= df2[df2.index.str.contains('CDK7')].iloc[0]\n\n\nplot_heatmap(recover_pssm(series),figsize=(3.5,6))",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html",
    "title": "DL training",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#setup",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#setup",
    "title": "DL training",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#data",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#data",
    "title": "DL training",
    "section": "Data",
    "text": "Data\n\ndf=pd.read_parquet('train/pspa_t5.parquet')\n\n\ninfo=Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\ninfo = info[info.kd_ID.notna()]\n\nsubfamily_map = info[['kd_ID','subfamily']].drop_duplicates().set_index('kd_ID')['subfamily']\nfamily_map = info[['kd_ID','family']].drop_duplicates().set_index('kd_ID')['family']\ngroup_map = info[['kd_ID','group']].drop_duplicates().set_index('kd_ID')['group']\n\npspa_info = pd.DataFrame(df.index.tolist(),columns=['kinase'])\n\npspa_info['subfamily'] = pspa_info.kinase.map(subfamily_map)\npspa_info['family'] = pspa_info.kinase.map(family_map)\npspa_info['group'] = pspa_info.kinase.map(group_map)\n\n\ndf=df.reset_index()\n\n\ndf.columns\n\nIndex(['index', '-5P', '-4P', '-3P', '-2P', '-1P', '0P', '1P', '2P', '3P',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1255)\n\n\n\n# column name of feature and target\nfeat_col = df.columns[df.columns.str.startswith('T5_')]\ntarget_col = df.columns[~df.columns.isin(feat_col)][1:]\n\n\nfeat_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#split",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#split",
    "title": "DL training",
    "section": "Split",
    "text": "Split\n\npspa_info.subfamily.value_counts()\n\nsubfamily\nEph      12\nSrc      11\nNEK      10\nCK1       7\nSTE11     7\n         ..\nZAK       1\nSev       1\nRet       1\nMusk      1\nTie       1\nName: count, Length: 149, dtype: int64\n\n\n\npspa_info.family.value_counts()\n\nfamily\nSTE20    27\nCAMKL    20\nCDK      17\nMAPK     12\nEph      12\n         ..\nSTK33     1\nSev       1\nRet       1\nMusk      1\nTie       1\nName: count, Length: 92, dtype: int64\n\n\n\npspa_info.group.value_counts()\n\ngroup\nTK          78\nCAMK        57\nCMGC        52\nAGC         52\nOther       49\nSTE         39\nTKL         25\nCK1         11\nAtypical     5\nName: count, dtype: int64\n\n\n\nsplits = get_splits(pspa_info, group='subfamily',nfold=5)\n\nsplit0 = splits[0]\n\nGroupKFold(n_splits=5, random_state=None, shuffle=False)\n# subfamily in train set: 120\n# subfamily in test set: 29",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#dataset",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#dataset",
    "title": "DL training",
    "section": "Dataset",
    "text": "Dataset\n\n# dataset\nds = GeneralDataset(df,feat_col,target_col)\n\n\nlen(ds)\n\n368\n\n\n\ndl = DataLoader(ds, batch_size=64, shuffle=True)\n\n\nxb,yb = next(iter(dl))\n\nxb.shape,yb.shape\n\n(torch.Size([64, 1024]), torch.Size([64, 23, 10]))",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#model",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#model",
    "title": "DL training",
    "section": "Model",
    "text": "Model\n\nn_feature = len(feat_col)\nn_target = len(target_col)\n\n\n# def get_mlp(): return PSSM_model(n_feature,n_target,model='MLP')\n\ndef get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\n\nmodel = get_cnn()\n\n\nlogits= model(xb)\n\n\nlogits.shape\n\ntorch.Size([64, 23, 10])",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#loss",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#loss",
    "title": "DL training",
    "section": "Loss",
    "text": "Loss\n\nCE(logits,yb)\n\ntensor(3.3157, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#metrics",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#metrics",
    "title": "DL training",
    "section": "Metrics",
    "text": "Metrics\n\nKLD(logits,yb)\n\ntensor(0.5744, grad_fn=&lt;MeanBackward0&gt;)\n\n\n\nJSD(logits,yb)\n\ntensor(0.1175, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#cv-train",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#cv-train",
    "title": "DL training",
    "section": "CV train",
    "text": "CV train\n\ncross-validation\n\n\noof = train_dl_cv(df,feat_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn,\n                  n_epoch=20,lr=3e-3,save='cnn_pspa')\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.233706\n3.125911\n0.406453\n0.085575\n00:01\n\n\n1\n3.130510\n3.048949\n0.329490\n0.074209\n00:00\n\n\n2\n3.055997\n3.130454\n0.410995\n0.065571\n00:00\n\n\n3\n3.010011\n3.088417\n0.368959\n0.066432\n00:00\n\n\n4\n2.983442\n3.059395\n0.339937\n0.059636\n00:00\n\n\n5\n2.963942\n3.014983\n0.295525\n0.053493\n00:00\n\n\n6\n2.941524\n2.903284\n0.183826\n0.041339\n00:00\n\n\n7\n2.920246\n2.822921\n0.103463\n0.025377\n00:00\n\n\n8\n2.902542\n2.829456\n0.109998\n0.026529\n00:00\n\n\n9\n2.887325\n2.807781\n0.088324\n0.020793\n00:00\n\n\n10\n2.873063\n2.803475\n0.084017\n0.019533\n00:00\n\n\n11\n2.861299\n2.807706\n0.088248\n0.020885\n00:00\n\n\n12\n2.850185\n2.800845\n0.081387\n0.019359\n00:00\n\n\n13\n2.840891\n2.799504\n0.080046\n0.018768\n00:00\n\n\n14\n2.841491\n2.814084\n0.094626\n0.020952\n00:00\n\n\n15\n2.833544\n2.803974\n0.084516\n0.020174\n00:00\n\n\n16\n2.827274\n2.801270\n0.081811\n0.019360\n00:00\n\n\n17\n2.821252\n2.799191\n0.079733\n0.018746\n00:00\n\n\n18\n2.816021\n2.800156\n0.080698\n0.019058\n00:00\n\n\n19\n2.811490\n2.801163\n0.081706\n0.019365\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.220115\n3.122870\n0.367961\n0.079914\n00:00\n\n\n1\n3.110324\n3.013538\n0.258628\n0.061137\n00:00\n\n\n2\n3.029848\n3.004896\n0.249986\n0.043967\n00:00\n\n\n3\n2.986253\n3.025127\n0.270218\n0.044840\n00:00\n\n\n4\n2.962428\n2.937174\n0.182265\n0.038925\n00:00\n\n\n5\n2.944227\n2.868406\n0.113497\n0.027091\n00:00\n\n\n6\n2.925777\n2.851748\n0.096838\n0.023173\n00:00\n\n\n7\n2.907046\n2.846324\n0.091415\n0.022224\n00:00\n\n\n8\n2.890109\n2.833833\n0.078924\n0.018874\n00:00\n\n\n9\n2.874512\n2.829689\n0.074779\n0.018139\n00:00\n\n\n10\n2.860773\n2.830650\n0.075741\n0.018343\n00:00\n\n\n11\n2.849061\n2.825806\n0.070897\n0.017139\n00:00\n\n\n12\n2.838997\n2.826859\n0.071950\n0.017447\n00:00\n\n\n13\n2.830334\n2.829360\n0.074451\n0.018066\n00:00\n\n\n14\n2.822370\n2.820644\n0.065735\n0.015937\n00:00\n\n\n15\n2.815302\n2.823604\n0.068695\n0.016640\n00:00\n\n\n16\n2.809580\n2.821716\n0.066807\n0.016194\n00:00\n\n\n17\n2.804384\n2.819929\n0.065020\n0.015721\n00:00\n\n\n18\n2.800062\n2.819813\n0.064903\n0.015710\n00:00\n\n\n19\n2.796715\n2.820354\n0.065445\n0.015832\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.200740\n3.130967\n0.378583\n0.081704\n00:00\n\n\n1\n3.092526\n2.995235\n0.242852\n0.059953\n00:00\n\n\n2\n3.019362\n2.951045\n0.198661\n0.041754\n00:00\n\n\n3\n2.978442\n2.969943\n0.217558\n0.044737\n00:00\n\n\n4\n2.954714\n2.931453\n0.179070\n0.039580\n00:00\n\n\n5\n2.935677\n2.881018\n0.128634\n0.029679\n00:00\n\n\n6\n2.917925\n2.860357\n0.107974\n0.025191\n00:00\n\n\n7\n2.900897\n2.853231\n0.100847\n0.023653\n00:01\n\n\n8\n2.885049\n2.845886\n0.093502\n0.022020\n00:00\n\n\n9\n2.870798\n2.845885\n0.093501\n0.021971\n00:00\n\n\n10\n2.857675\n2.846555\n0.094171\n0.022086\n00:00\n\n\n11\n2.847099\n2.842916\n0.090532\n0.021348\n00:00\n\n\n12\n2.837596\n2.842217\n0.089834\n0.021036\n00:00\n\n\n13\n2.828788\n2.845114\n0.092730\n0.021663\n00:00\n\n\n14\n2.821526\n2.838382\n0.085998\n0.020212\n00:00\n\n\n15\n2.814844\n2.838639\n0.086255\n0.020221\n00:00\n\n\n16\n2.809012\n2.839795\n0.087412\n0.020456\n00:00\n\n\n17\n2.804014\n2.838342\n0.085959\n0.020113\n00:00\n\n\n18\n2.799799\n2.839126\n0.086743\n0.020303\n00:00\n\n\n19\n2.796194\n2.839238\n0.086854\n0.020336\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.204410\n3.124295\n0.361279\n0.078598\n00:00\n\n\n1\n3.096633\n3.004290\n0.241274\n0.059625\n00:00\n\n\n2\n3.020993\n2.954940\n0.191923\n0.038023\n00:00\n\n\n3\n2.977240\n2.974516\n0.211500\n0.043791\n00:00\n\n\n4\n2.949267\n2.924750\n0.161734\n0.036755\n00:00\n\n\n5\n2.927110\n2.898294\n0.135277\n0.031197\n00:00\n\n\n6\n2.907787\n2.866850\n0.103833\n0.024755\n00:00\n\n\n7\n2.889578\n2.859005\n0.095989\n0.022904\n00:00\n\n\n8\n2.873679\n2.851498\n0.088482\n0.020949\n00:00\n\n\n9\n2.860200\n2.855871\n0.092855\n0.022186\n00:00\n\n\n10\n2.848846\n2.852453\n0.089437\n0.021289\n00:00\n\n\n11\n2.838321\n2.855460\n0.092444\n0.021871\n00:00\n\n\n12\n2.829044\n2.850951\n0.087935\n0.020768\n00:00\n\n\n13\n2.820891\n2.850833\n0.087817\n0.020675\n00:00\n\n\n14\n2.813844\n2.850501\n0.087485\n0.020620\n00:00\n\n\n15\n2.807759\n2.848204\n0.085187\n0.020092\n00:00\n\n\n16\n2.802352\n2.848961\n0.085945\n0.020265\n00:00\n\n\n17\n2.797838\n2.848315\n0.085299\n0.020222\n00:00\n\n\n18\n2.793763\n2.847828\n0.084811\n0.020079\n00:00\n\n\n19\n2.790769\n2.847723\n0.084707\n0.020046\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.209750\n3.119418\n0.369865\n0.080478\n00:00\n\n\n1\n3.100083\n3.013516\n0.263963\n0.058817\n00:00\n\n\n2\n3.029029\n3.131990\n0.382436\n0.055820\n00:00\n\n\n3\n2.985650\n3.112973\n0.363419\n0.054572\n00:00\n\n\n4\n2.959636\n3.076775\n0.327221\n0.052438\n00:00\n\n\n5\n2.940694\n2.988379\n0.238825\n0.044601\n00:00\n\n\n6\n2.920553\n2.918243\n0.168689\n0.036624\n00:00\n\n\n7\n2.900961\n2.863245\n0.113691\n0.026403\n00:00\n\n\n8\n2.885111\n2.866303\n0.116750\n0.027012\n00:00\n\n\n9\n2.870587\n2.850549\n0.100995\n0.023691\n00:00\n\n\n10\n2.858413\n2.844527\n0.094974\n0.022394\n00:00\n\n\n11\n2.847218\n2.845756\n0.096203\n0.022637\n00:00\n\n\n12\n2.838991\n2.846041\n0.096488\n0.022478\n00:00\n\n\n13\n2.830662\n2.851257\n0.101704\n0.023702\n00:00\n\n\n14\n2.824315\n2.846768\n0.097214\n0.022712\n00:00\n\n\n15\n2.817429\n2.839707\n0.090153\n0.020986\n00:00\n\n\n16\n2.811808\n2.838882\n0.089328\n0.020835\n00:00\n\n\n17\n2.806540\n2.838375\n0.088822\n0.020646\n00:00\n\n\n18\n2.802111\n2.838036\n0.088482\n0.020585\n00:00\n\n\n19\n2.798786\n2.837518\n0.087965\n0.020500\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof.to_parquet('raw/oof_pspa.parquet')",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_07b_pspa_training_subfamily.html#score",
    "href": "kinase_domain/kd_07b_pspa_training_subfamily.html#score",
    "title": "DL training",
    "section": "Score",
    "text": "Score\n\nfrom katlas.pssm import *\n\nfrom functools import partial\n\n\ndef score_df(target,pred,func):\n    distance = [func(target.loc[i],pred.loc[i,target.columns]) for i in target.index]\n    return pd.Series(distance,index=target.index)\n\n\njsd_df = partial(score_df,func=js_divergence_flat)\nkld_df = partial(score_df,func=kl_divergence_flat)\n\n\ntarget=df[target_col].copy()\n\n\npspa_info['group_split'] = oof.nfold\n\n\npspa_info['group_jsd'] =jsd_df(target,oof)\n\n\nfrom katlas.plot import *\n\n\nset_sns()\n\n\nplot_bar(pspa_info,'group_jsd',group='group',palette=group_color,figsize=(8,4))\nplt.ylabel('JS divergence')\nplt.title('GroupSplit by subfamily (nfold=5) in kinase subfamily')\n\nText(0.5, 1.0, 'GroupSplit by subfamily (nfold=5) in kinase subfamily')\n\n\n\n\n\n\n\n\n\n\ngroup_color = pd.DataFrame(group_color).T\n\n\nsty_color\n\n{'S': (0.12156862745098039, 0.4666666666666667, 0.7058823529411765),\n 'T': (0.6823529411764706, 0.7803921568627451, 0.9098039215686274),\n 'Y': (1.0, 0.4980392156862745, 0.054901960784313725)}\n\n\n\ngroup_color = group_color.reset_index(names='modi_group')\n\n\ninfo = Data.get_kinase_info()\n\n\nsubfamily_color = info[['modi_group','subfamily']].merge(group_color).drop(columns=['modi_group']).set_index('subfamily')\n\n\nsubfamily_color = subfamily_color.apply(tuple, axis=1).to_dict()\n\n\nplot_bar(pspa_info,'group_jsd',group='subfamily',palette = subfamily_color, figsize=(30,7))\nplt.ylabel('JS divergence')\n# plt.title('Stratified split in kinase subfamily')\n\nText(0, 0.5, 'JS divergence')\n\n\n\n\n\n\n\n\n\n\npspa_info.sort_values('group_jsd')\n\n\n\n\n\n\n\n\nkinase\nsubfamily\nfamily\ngroup\ngroup_split\ngroup_jsd\n\n\n\n\n272\nQ9UKE5_TNIK_HUMAN_KD1\nMSN\nSTE20\nSTE\n4\n0.003378\n\n\n246\nQ13464_ROCK1_HUMAN_KD1\nROCK\nDMPK\nAGC\n1\n0.003626\n\n\n104\nO95819_M4K4_HUMAN_KD1\nMSN\nSTE20\nSTE\n4\n0.003785\n\n\n20\nQ13873_BMPR2_HUMAN_KD1\nSTKR2\nSTKR\nTKL\n3\n0.003992\n\n\n265\nQ9UL54_TAOK2_HUMAN_KD1\nTAO\nSTE20\nSTE\n0\n0.004083\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n65\nP68400_CSK21_HUMAN_KD1\nCK2\nCK2\nCMGC\n2\n0.069807\n\n\n64\nQ9Y6M4_KC1G3_HUMAN_KD1\nCK1\nCK1\nCK1\n4\n0.072875\n\n\n58\nP48729_KC1A_HUMAN_KD1\nCK1\nCK1\nCK1\n4\n0.074366\n\n\n125\nQ8TAS1_UHMK1_HUMAN_KD1\nKIS\nKIS\nOther\n3\n0.075230\n\n\n63\nP78368_KC1G2_HUMAN_KD1\nCK1\nCK1\nCK1\n4\n0.083079\n\n\n\n\n368 rows × 6 columns\n\n\n\n\nfrom katlas.pssm import *\n\n\ndef plot_one_pssm(target,pred,idx):\n    target_pssm = recover_pssm(target.loc[idx])\n    pred_pssm = recover_pssm(pred.loc[idx,target.columns])\n    plot_heatmap(target_pssm)\n    plot_heatmap(pred_pssm)\n\n\nset_sns(50)\n\n\nplot_one_pssm(target,oof,246)",
    "crumbs": [
      "kinase_domain",
      "DL training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_04_prepare_data.html",
    "href": "kinase_domain/kd_04_prepare_data.html",
    "title": "Prepare data for training",
    "section": "",
    "text": "import pandas as pd\nfrom katlas.data import *\nfrom katlas.pssm import *",
    "crumbs": [
      "kinase_domain",
      "Prepare data for training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_04_prepare_data.html#feature-data",
    "href": "kinase_domain/kd_04_prepare_data.html#feature-data",
    "title": "Prepare data for training",
    "section": "feature data",
    "text": "feature data\n\n# T5 data\nt5 = pd.read_parquet('raw/t5_kd.parquet')\n\n# ESM data\nesm = pd.read_parquet('raw/esm_kd.parquet')\n\n# Onehot data\nonehot = pd.read_parquet('raw/onehot_kd.parquet')\n\n# Onehot pca data\nonehot_pca = pd.read_parquet('raw/onehot_pca_kd.parquet')\n\n\nt5_col = t5.columns\nesm_col = esm.columns\nonehot_col = onehot.columns\nonehot_pca_col = onehot_pca.columns\n\n\nt5.columns\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)\n\n\n\nesm.columns\n\nIndex(['esm_0', 'esm_1', 'esm_2', 'esm_3', 'esm_4', 'esm_5', 'esm_6', 'esm_7',\n       'esm_8', 'esm_9',\n       ...\n       'esm_1270', 'esm_1271', 'esm_1272', 'esm_1273', 'esm_1274', 'esm_1275',\n       'esm_1276', 'esm_1277', 'esm_1278', 'esm_1279'],\n      dtype='object', length=1280)\n\n\n\nonehot.columns\n\nIndex(['65_-', '65_A', '65_C', '65_D', '65_E', '65_F', '65_G', '65_H', '65_I',\n       '65_K',\n       ...\n       '3192_M', '3192_N', '3192_P', '3192_Q', '3192_R', '3192_S', '3192_T',\n       '3192_V', '3192_W', '3192_Y'],\n      dtype='object', length=6849)\n\n\n\nonehot_pca_col\n\nIndex(['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9',\n       'PCA10',\n       ...\n       'PCA991', 'PCA992', 'PCA993', 'PCA994', 'PCA995', 'PCA996', 'PCA997',\n       'PCA998', 'PCA999', 'PCA1000'],\n      dtype='object', length=1000)",
    "crumbs": [
      "kinase_domain",
      "Prepare data for training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_04_prepare_data.html#target-data",
    "href": "kinase_domain/kd_04_prepare_data.html#target-data",
    "title": "Prepare data for training",
    "section": "target data",
    "text": "target data\n\nPSPA\n\npspa = Data.get_pspa_all_scale()\n\n\n# Remove those with _TYR due to their overall low specificity and overlap with main kinases\npspa = pspa[~pspa.index.str.contains('_')]\n\n\npspa.head()\n\n\n\n\n\n\n\n\n-5P\n-5G\n-5A\n-5C\n-5S\n-5T\n-5V\n-5I\n-5L\n-5M\n...\n4H\n4K\n4R\n4Q\n4N\n4D\n4E\n4pS\n4pT\n4pY\n\n\nkinase\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAAK1\n0.05845\n0.01989\n0.02305\n0.03702\n0.03450\n0.03450\n0.07720\n0.12615\n0.08061\n0.07014\n...\n0.04482\n0.06651\n0.07427\n0.05082\n0.04738\n0.03113\n0.03657\n0.02009\n0.02009\n0.02161\n\n\nACVR2A\n0.02971\n0.03443\n0.04180\n0.03500\n0.04137\n0.04137\n0.04281\n0.04474\n0.04266\n0.03729\n...\n0.04202\n0.03865\n0.03601\n0.04517\n0.04077\n0.04693\n0.04693\n0.05155\n0.05155\n0.04319\n\n\nACVR2B\n0.03779\n0.03665\n0.04013\n0.05473\n0.03779\n0.03779\n0.03850\n0.03134\n0.03339\n0.03658\n...\n0.04056\n0.03261\n0.03514\n0.04229\n0.03846\n0.05278\n0.05039\n0.05502\n0.05502\n0.04605\n\n\nAKT1\n0.04669\n0.04599\n0.04274\n0.04684\n0.03995\n0.03995\n0.03306\n0.03368\n0.03592\n0.03910\n...\n0.05299\n0.09151\n0.08648\n0.05874\n0.05187\n0.03541\n0.02494\n0.03141\n0.03141\n0.02102\n\n\nAKT2\n0.04617\n0.04732\n0.04931\n0.04464\n0.04095\n0.04095\n0.03321\n0.03206\n0.03781\n0.03934\n...\n0.05199\n0.08844\n0.07580\n0.04992\n0.04770\n0.02772\n0.02680\n0.04196\n0.04196\n0.03193\n\n\n\n\n5 rows × 230 columns\n\n\n\n\ninfo = Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\n\ninfo.shape\n\n(462, 36)\n\n\n\ninfo_map = info.set_index('kinase')['kd_ID']\n\n\npspa.index = pspa.index.to_series().map(info_map)\n\n\npspa\n\n\n\n\n\n\n\n\n-5P\n-5G\n-5A\n-5C\n-5S\n-5T\n-5V\n-5I\n-5L\n-5M\n...\n4H\n4K\n4R\n4Q\n4N\n4D\n4E\n4pS\n4pT\n4pY\n\n\nkinase\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQ2M2I8_AAK1_HUMAN_KD1\n0.05845\n0.01989\n0.02305\n0.03702\n0.03450\n0.03450\n0.07720\n0.12615\n0.08061\n0.07014\n...\n0.04482\n0.06651\n0.07427\n0.05082\n0.04738\n0.03113\n0.03657\n0.02009\n0.02009\n0.02161\n\n\nP27037_AVR2A_HUMAN_KD1\n0.02971\n0.03443\n0.04180\n0.03500\n0.04137\n0.04137\n0.04281\n0.04474\n0.04266\n0.03729\n...\n0.04202\n0.03865\n0.03601\n0.04517\n0.04077\n0.04693\n0.04693\n0.05155\n0.05155\n0.04319\n\n\nQ13705_AVR2B_HUMAN_KD1\n0.03779\n0.03665\n0.04013\n0.05473\n0.03779\n0.03779\n0.03850\n0.03134\n0.03339\n0.03658\n...\n0.04056\n0.03261\n0.03514\n0.04229\n0.03846\n0.05278\n0.05039\n0.05502\n0.05502\n0.04605\n\n\nP31749_AKT1_HUMAN_KD1\n0.04669\n0.04599\n0.04274\n0.04684\n0.03995\n0.03995\n0.03306\n0.03368\n0.03592\n0.03910\n...\n0.05299\n0.09151\n0.08648\n0.05874\n0.05187\n0.03541\n0.02494\n0.03141\n0.03141\n0.02102\n\n\nP31751_AKT2_HUMAN_KD1\n0.04617\n0.04732\n0.04931\n0.04464\n0.04095\n0.04095\n0.03321\n0.03206\n0.03781\n0.03934\n...\n0.05199\n0.08844\n0.07580\n0.04992\n0.04770\n0.02772\n0.02680\n0.04196\n0.04196\n0.03193\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nP17948_VGFR1_HUMAN_KD1\n0.04074\n0.04365\n0.03788\n0.03921\n0.03896\n0.03534\n0.03027\n0.02957\n0.02881\n0.03179\n...\n0.05811\n0.06189\n0.06516\n0.03921\n0.04734\n0.04891\n0.03636\n0.04827\n0.04827\n0.02709\n\n\nP35968_VGFR2_HUMAN_KD1\n0.04816\n0.05105\n0.04224\n0.03927\n0.04110\n0.03996\n0.03244\n0.03191\n0.03251\n0.03616\n...\n0.04386\n0.07036\n0.07377\n0.04718\n0.03979\n0.03074\n0.02808\n0.02492\n0.02492\n0.02426\n\n\nP35916_VGFR3_HUMAN_KD1\n0.03554\n0.04129\n0.03795\n0.04300\n0.03982\n0.03663\n0.03360\n0.03881\n0.03686\n0.04122\n...\n0.05899\n0.05158\n0.06051\n0.04823\n0.03842\n0.04042\n0.03962\n0.03548\n0.03548\n0.03986\n\n\nP07947_YES_HUMAN_KD1\n0.05216\n0.04399\n0.04137\n0.04084\n0.04060\n0.03891\n0.03352\n0.02889\n0.03082\n0.03567\n...\n0.04928\n0.04643\n0.05988\n0.05157\n0.03947\n0.03330\n0.03891\n0.02934\n0.02934\n0.03694\n\n\nP43403_ZAP70_HUMAN_KD1\n0.03902\n0.05704\n0.04038\n0.03215\n0.03053\n0.03332\n0.03014\n0.02463\n0.01990\n0.03410\n...\n0.05540\n0.04640\n0.04599\n0.05879\n0.03352\n0.04929\n0.04607\n0.03633\n0.03633\n0.02626\n\n\n\n\n381 rows × 230 columns\n\n\n\nGet the columns in order for reshape\n\npspa = pspa.apply(lambda r: pd.Series(flatten_pssm(recover_pssm(r),column_wise=False)), axis=1)\n\n\npspa # now the flattened pssm is row-wise flattend (go through position first)\n\n\n\n\n\n\n\n\n-5P\n-4P\n-3P\n-2P\n-1P\n0P\n1P\n2P\n3P\n4P\n...\n-5pY\n-4pY\n-3pY\n-2pY\n-1pY\n0pY\n1pY\n2pY\n3pY\n4pY\n\n\nkinase\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQ2M2I8_AAK1_HUMAN_KD1\n0.05845\n0.04172\n0.08610\n0.01794\n0.09607\n0.0\n0.04265\n0.04048\n0.05264\n0.05026\n...\n0.04960\n0.02648\n0.02176\n0.03857\n0.01505\n0.0\n0.00921\n0.03149\n0.02775\n0.02161\n\n\nP27037_AVR2A_HUMAN_KD1\n0.02971\n0.03341\n0.03345\n0.01462\n0.02657\n0.0\n0.01055\n0.04285\n0.04958\n0.05559\n...\n0.05440\n0.04882\n0.06497\n0.03279\n0.07109\n0.0\n0.08706\n0.03799\n0.06031\n0.04319\n\n\nQ13705_AVR2B_HUMAN_KD1\n0.03779\n0.03774\n0.03044\n0.01482\n0.02331\n0.0\n0.01020\n0.05871\n0.05072\n0.05205\n...\n0.05268\n0.05987\n0.09086\n0.03918\n0.07259\n0.0\n0.08007\n0.04636\n0.05130\n0.04605\n\n\nP31749_AKT1_HUMAN_KD1\n0.04669\n0.04161\n0.02642\n0.01512\n0.04884\n0.0\n0.01689\n0.03375\n0.03828\n0.07361\n...\n0.03314\n0.03166\n0.01560\n0.01368\n0.04229\n0.0\n0.02693\n0.02975\n0.02656\n0.02102\n\n\nP31751_AKT2_HUMAN_KD1\n0.04617\n0.04437\n0.01778\n0.01873\n0.05226\n0.0\n0.03177\n0.03922\n0.04509\n0.07404\n...\n0.03651\n0.02930\n0.01671\n0.02063\n0.03864\n0.0\n0.03887\n0.04794\n0.04434\n0.03193\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nP17948_VGFR1_HUMAN_KD1\n0.04074\n0.03414\n0.02854\n0.04313\n0.01986\n0.0\n0.01625\n0.02121\n0.04472\n0.06253\n...\n0.06599\n0.10046\n0.11411\n0.09176\n0.09614\n1.0\n0.10087\n0.10220\n0.03855\n0.02709\n\n\nP35968_VGFR2_HUMAN_KD1\n0.04816\n0.05296\n0.04610\n0.04524\n0.03253\n0.0\n0.02688\n0.02602\n0.03470\n0.05973\n...\n0.06115\n0.08767\n0.09090\n0.08310\n0.11178\n1.0\n0.08839\n0.07561\n0.01786\n0.02426\n\n\nP35916_VGFR3_HUMAN_KD1\n0.03554\n0.03875\n0.03354\n0.04111\n0.02239\n0.0\n0.02272\n0.01798\n0.02467\n0.05166\n...\n0.04596\n0.05470\n0.05802\n0.05403\n0.12136\n1.0\n0.09997\n0.11333\n0.02731\n0.03986\n\n\nP07947_YES_HUMAN_KD1\n0.05216\n0.04870\n0.04363\n0.05690\n0.05838\n0.0\n0.01899\n0.03019\n0.02228\n0.03449\n...\n0.05147\n0.05494\n0.05090\n0.05237\n0.03627\n1.0\n0.09052\n0.05174\n0.02739\n0.03694\n\n\nP43403_ZAP70_HUMAN_KD1\n0.03902\n0.06354\n0.03211\n0.02673\n0.01208\n0.0\n0.00802\n0.03680\n0.12355\n0.08125\n...\n0.07830\n0.10958\n0.13073\n0.11468\n0.33199\n1.0\n0.37989\n0.09746\n0.02374\n0.02626\n\n\n\n\n381 rows × 230 columns\n\n\n\n\n\nCDDM\n\ncddm=Data.get_cddm()\n\n\n# cddm = pd.read_parquet('out/CDDM_pssms.parquet')\n\n\ncddm.head()\n\n\n\n\n\n\n\n\n-20P\n-20G\n-20A\n-20C\n-20S\n-20T\n-20V\n-20I\n-20L\n-20M\n...\n20H\n20K\n20R\n20Q\n20N\n20D\n20E\n20pS\n20pT\n20pY\n\n\n\n\nSRC\n0.054538\n0.081380\n0.060077\n0.012356\n0.036216\n0.032382\n0.055816\n0.052407\n0.083511\n0.023434\n...\n0.013351\n0.076992\n0.060970\n0.037383\n0.036938\n0.052960\n0.086337\n0.025367\n0.015576\n0.023142\n\n\nEPHA3\n0.044276\n0.088013\n0.065335\n0.008639\n0.037797\n0.036717\n0.072354\n0.048596\n0.075594\n0.026998\n...\n0.014132\n0.083098\n0.059356\n0.031091\n0.033917\n0.056529\n0.100622\n0.025438\n0.013567\n0.015828\n\n\nFES\n0.047231\n0.082519\n0.070575\n0.011401\n0.034745\n0.039088\n0.061889\n0.053203\n0.088491\n0.026059\n...\n0.013053\n0.086266\n0.055619\n0.040863\n0.038025\n0.059024\n0.085698\n0.026674\n0.013621\n0.019296\n\n\nNTRK3\n0.044444\n0.074644\n0.074074\n0.017094\n0.033048\n0.035328\n0.060969\n0.058120\n0.084330\n0.026781\n...\n0.015682\n0.091677\n0.052473\n0.030760\n0.044029\n0.057298\n0.088661\n0.021713\n0.015682\n0.018094\n\n\nALK\n0.045748\n0.079765\n0.073314\n0.018182\n0.032845\n0.035191\n0.067449\n0.051026\n0.076246\n0.027566\n...\n0.015634\n0.090198\n0.069152\n0.030066\n0.043897\n0.051112\n0.096212\n0.026458\n0.013229\n0.017438\n\n\n\n\n5 rows × 943 columns\n\n\n\n\ncddm[cddm.index.to_series().map(info_map).isna()]\n\n\n\n\n\n\n\n\n-20P\n-20G\n-20A\n-20C\n-20S\n-20T\n-20V\n-20I\n-20L\n-20M\n...\n20H\n20K\n20R\n20Q\n20N\n20D\n20E\n20pS\n20pT\n20pY\n\n\n\n\n\n\n0 rows × 943 columns\n\n\n\n\ncddm.index = cddm.index.to_series().map(info_map)\n\n\ncddm = cddm[cddm.index.notna()]\n\n\ncddm.shape\n\n(328, 943)\n\n\n\ncddm\n\n\n\n\n\n\n\n\n-20P\n-20G\n-20A\n-20C\n-20S\n-20T\n-20V\n-20I\n-20L\n-20M\n...\n20H\n20K\n20R\n20Q\n20N\n20D\n20E\n20pS\n20pT\n20pY\n\n\n\n\nP12931_SRC_HUMAN_KD1\n0.054538\n0.081380\n0.060077\n0.012356\n0.036216\n0.032382\n0.055816\n0.052407\n0.083511\n0.023434\n...\n0.013351\n0.076992\n0.060970\n0.037383\n0.036938\n0.052960\n0.086337\n0.025367\n0.015576\n0.023142\n\n\nP29320_EPHA3_HUMAN_KD1\n0.044276\n0.088013\n0.065335\n0.008639\n0.037797\n0.036717\n0.072354\n0.048596\n0.075594\n0.026998\n...\n0.014132\n0.083098\n0.059356\n0.031091\n0.033917\n0.056529\n0.100622\n0.025438\n0.013567\n0.015828\n\n\nP07332_FES_HUMAN_KD1\n0.047231\n0.082519\n0.070575\n0.011401\n0.034745\n0.039088\n0.061889\n0.053203\n0.088491\n0.026059\n...\n0.013053\n0.086266\n0.055619\n0.040863\n0.038025\n0.059024\n0.085698\n0.026674\n0.013621\n0.019296\n\n\nQ16288_NTRK3_HUMAN_KD1\n0.044444\n0.074644\n0.074074\n0.017094\n0.033048\n0.035328\n0.060969\n0.058120\n0.084330\n0.026781\n...\n0.015682\n0.091677\n0.052473\n0.030760\n0.044029\n0.057298\n0.088661\n0.021713\n0.015682\n0.018094\n\n\nQ9UM73_ALK_HUMAN_KD1\n0.045748\n0.079765\n0.073314\n0.018182\n0.032845\n0.035191\n0.067449\n0.051026\n0.076246\n0.027566\n...\n0.015634\n0.090198\n0.069152\n0.030066\n0.043897\n0.051112\n0.096212\n0.026458\n0.013229\n0.017438\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ15746_MYLK_HUMAN_KD1\n0.078947\n0.052632\n0.078947\n0.026316\n0.052632\n0.026316\n0.052632\n0.052632\n0.052632\n0.000000\n...\n0.000000\n0.066667\n0.022222\n0.044444\n0.133333\n0.044444\n0.000000\n0.044444\n0.022222\n0.000000\n\n\nQ01973_ROR1_HUMAN_KD1\n0.097561\n0.097561\n0.024390\n0.000000\n0.024390\n0.146341\n0.170732\n0.024390\n0.048780\n0.000000\n...\n0.000000\n0.075000\n0.050000\n0.000000\n0.050000\n0.025000\n0.125000\n0.125000\n0.000000\n0.025000\n\n\nO14976_GAK_HUMAN_KD1\n0.075000\n0.075000\n0.175000\n0.000000\n0.025000\n0.025000\n0.100000\n0.025000\n0.050000\n0.175000\n...\n0.000000\n0.024390\n0.024390\n0.000000\n0.170732\n0.195122\n0.024390\n0.048780\n0.024390\n0.000000\n\n\nQ6P0Q8_MAST2_HUMAN_KD1\n0.046512\n0.116279\n0.069767\n0.000000\n0.023256\n0.069767\n0.069767\n0.000000\n0.046512\n0.046512\n...\n0.000000\n0.048780\n0.219512\n0.000000\n0.048780\n0.024390\n0.024390\n0.024390\n0.000000\n0.000000\n\n\nP15056_BRAF_HUMAN_KD1\n0.095238\n0.071429\n0.047619\n0.000000\n0.095238\n0.047619\n0.071429\n0.000000\n0.095238\n0.047619\n...\n0.000000\n0.075000\n0.075000\n0.025000\n0.025000\n0.075000\n0.075000\n0.050000\n0.000000\n0.000000\n\n\n\n\n328 rows × 943 columns\n\n\n\n\ncddm.shape\n\n(328, 943)\n\n\n\n# row first flatten\ncddm = cddm.apply(lambda r: pd.Series(flatten_pssm(recover_pssm(r),column_wise=False)), axis=1)\n\n\ncddm\n\n\n\n\n\n\n\n\n-20P\n-19P\n-18P\n-17P\n-16P\n-15P\n-14P\n-13P\n-12P\n-11P\n...\n11pY\n12pY\n13pY\n14pY\n15pY\n16pY\n17pY\n18pY\n19pY\n20pY\n\n\n\n\nP12931_SRC_HUMAN_KD1\n0.054538\n0.048428\n0.054968\n0.050526\n0.045837\n0.046599\n0.060746\n0.060644\n0.056785\n0.055857\n...\n0.016818\n0.020346\n0.015231\n0.010512\n0.014912\n0.014952\n0.010568\n0.010615\n0.018198\n0.023142\n\n\nP29320_EPHA3_HUMAN_KD1\n0.044276\n0.047875\n0.047696\n0.043803\n0.046425\n0.052716\n0.053135\n0.055231\n0.040762\n0.047015\n...\n0.015795\n0.019704\n0.012672\n0.010538\n0.012236\n0.011161\n0.010626\n0.006738\n0.016356\n0.015828\n\n\nP07332_FES_HUMAN_KD1\n0.047231\n0.045455\n0.049569\n0.049919\n0.040729\n0.047568\n0.054400\n0.056503\n0.051623\n0.043039\n...\n0.014786\n0.018712\n0.011621\n0.018942\n0.012828\n0.012856\n0.011211\n0.007878\n0.014698\n0.019296\n\n\nQ16288_NTRK3_HUMAN_KD1\n0.044444\n0.049404\n0.046433\n0.049689\n0.041150\n0.045557\n0.049972\n0.048603\n0.045682\n0.043382\n...\n0.013945\n0.019848\n0.011137\n0.015348\n0.016588\n0.012470\n0.014863\n0.005970\n0.016837\n0.018094\n\n\nQ9UM73_ALK_HUMAN_KD1\n0.045748\n0.044418\n0.053976\n0.046821\n0.047921\n0.051208\n0.055587\n0.056128\n0.043950\n0.045610\n...\n0.018508\n0.016860\n0.011703\n0.012382\n0.011820\n0.010664\n0.010702\n0.005974\n0.014397\n0.017438\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ15746_MYLK_HUMAN_KD1\n0.078947\n0.100000\n0.047619\n0.093023\n0.069767\n0.046512\n0.136364\n0.044444\n0.044444\n0.086957\n...\n0.021277\n0.000000\n0.000000\n0.021739\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nQ01973_ROR1_HUMAN_KD1\n0.097561\n0.024390\n0.024390\n0.219512\n0.024390\n0.000000\n0.073171\n0.071429\n0.047619\n0.190476\n...\n0.000000\n0.000000\n0.000000\n0.023810\n0.000000\n0.000000\n0.000000\n0.000000\n0.047619\n0.025000\n\n\nO14976_GAK_HUMAN_KD1\n0.075000\n0.200000\n0.000000\n0.073171\n0.048780\n0.024390\n0.073171\n0.073171\n0.024390\n0.097561\n...\n0.000000\n0.000000\n0.048780\n0.024390\n0.000000\n0.000000\n0.000000\n0.024390\n0.000000\n0.000000\n\n\nQ6P0Q8_MAST2_HUMAN_KD1\n0.046512\n0.023256\n0.023256\n0.000000\n0.139535\n0.046512\n0.069767\n0.093023\n0.000000\n0.162791\n...\n0.000000\n0.000000\n0.000000\n0.024390\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nP15056_BRAF_HUMAN_KD1\n0.095238\n0.071429\n0.047619\n0.047619\n0.095238\n0.047619\n0.047619\n0.023810\n0.047619\n0.047619\n...\n0.000000\n0.046512\n0.000000\n0.024390\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\n\n\n328 rows × 943 columns",
    "crumbs": [
      "kinase_domain",
      "Prepare data for training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_04_prepare_data.html#kinase-not-in-active-kd",
    "href": "kinase_domain/kd_04_prepare_data.html#kinase-not-in-active-kd",
    "title": "Prepare data for training",
    "section": "Kinase not in active kd",
    "text": "Kinase not in active kd\n\ncddm[~cddm.index.isin(t5.index)]\n\n\n\n\n\n\n\n\n-20P\n-19P\n-18P\n-17P\n-16P\n-15P\n-14P\n-13P\n-12P\n-11P\n...\n11pY\n12pY\n13pY\n14pY\n15pY\n16pY\n17pY\n18pY\n19pY\n20pY\n\n\n\n\nO00418_EF2K_HUMAN_KD1\n0.058201\n0.015873\n0.026316\n0.062827\n0.088083\n0.036269\n0.025773\n0.040816\n0.035714\n0.030303\n...\n0.010471\n0.010582\n0.005319\n0.010753\n0.005376\n0.005376\n0.010753\n0.038043\n0.043478\n0.022099\n\n\nQ8TF76_HASP_HUMAN_KD1\n0.045455\n0.036364\n0.036364\n0.118182\n0.117117\n0.097345\n0.034483\n0.025210\n0.066667\n0.082645\n...\n0.000000\n0.008403\n0.000000\n0.000000\n0.000000\n0.034483\n0.000000\n0.008850\n0.000000\n0.008850\n\n\nO43683_BUB1_HUMAN_KD1\n0.130000\n0.060000\n0.039604\n0.089109\n0.079208\n0.049505\n0.049505\n0.019802\n0.089109\n0.148515\n...\n0.000000\n0.020619\n0.010309\n0.000000\n0.010417\n0.000000\n0.000000\n0.000000\n0.000000\n0.043956\n\n\nQ15118_PDK1_HUMAN_KD1\n0.020619\n0.030928\n0.010309\n0.030928\n0.072165\n0.051546\n0.072165\n0.051546\n0.061856\n0.092784\n...\n0.000000\n0.000000\n0.021978\n0.021978\n0.021978\n0.010989\n0.010989\n0.065934\n0.000000\n0.043956\n\n\nQ15120_PDK3_HUMAN_KD1\n0.044776\n0.014925\n0.059701\n0.074627\n0.029851\n0.044776\n0.104478\n0.059701\n0.059701\n0.029851\n...\n0.000000\n0.015152\n0.015625\n0.000000\n0.000000\n0.016129\n0.000000\n0.000000\n0.049180\n0.016949\n\n\nQ9UPE1_SRPK3_HUMAN_KD1\n0.140351\n0.137931\n0.051724\n0.034483\n0.051724\n0.034483\n0.120690\n0.033898\n0.083333\n0.033333\n...\n0.017857\n0.000000\n0.018182\n0.000000\n0.000000\n0.018182\n0.072727\n0.000000\n0.000000\n0.000000\n\n\nQ96QT4_TRPM7_HUMAN_KD1\n0.056604\n0.056604\n0.037736\n0.037736\n0.018868\n0.056604\n0.037736\n0.018868\n0.075472\n0.037736\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.018868\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nP78362_SRPK2_HUMAN_KD1\n0.040816\n0.120000\n0.100000\n0.060000\n0.040000\n0.060000\n0.060000\n0.117647\n0.096154\n0.057692\n...\n0.019231\n0.000000\n0.038462\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.038462\n0.000000\n\n\n\n\n8 rows × 943 columns\n\n\n\n\npspa[~pspa.index.isin(t5.index)]\n\n\n\n\n\n\n\n\n-5P\n-4P\n-3P\n-2P\n-1P\n0P\n1P\n2P\n3P\n4P\n...\n-5pY\n-4pY\n-3pY\n-2pY\n-1pY\n0pY\n1pY\n2pY\n3pY\n4pY\n\n\nkinase\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQ96QP1_ALPK1_HUMAN_KD1\n0.03973\n0.04168\n0.03652\n0.06123\n0.02496\n0.0\n0.01772\n0.04255\n0.03160\n0.04294\n...\n0.07500\n0.07550\n0.05888\n0.01946\n0.27908\n0.0\n0.07937\n0.05559\n0.07007\n0.11014\n\n\nO14874_BCKD_HUMAN_KD1\n0.03595\n0.04598\n0.04280\n0.03844\n0.02034\n0.0\n0.01931\n0.02783\n0.03869\n0.04788\n...\n0.03930\n0.04978\n0.05735\n0.04417\n0.02739\n0.0\n0.02393\n0.03109\n0.02469\n0.06467\n\n\nO43683_BUB1_HUMAN_KD1\n0.07426\n0.07109\n0.18419\n0.03555\n0.06640\n0.0\n0.01817\n0.10522\n0.18797\n0.04496\n...\n0.04824\n0.01959\n0.01247\n0.01383\n0.01573\n0.0\n0.01245\n0.01418\n0.03246\n0.02169\n\n\nQ96QT4_TRPM7_HUMAN_KD1\n0.04609\n0.04097\n0.04660\n0.05748\n0.04163\n0.0\n0.00657\n0.06653\n0.02913\n0.03127\n...\n0.04517\n0.03860\n0.04748\n0.03035\n0.03610\n0.0\n0.03936\n0.02287\n0.03167\n0.02498\n\n\nQ9BX84_TRPM6_HUMAN_KD1\n0.03886\n0.05789\n0.06523\n0.07878\n0.04588\n0.0\n0.01715\n0.10699\n0.04510\n0.05681\n...\n0.03397\n0.04355\n0.04162\n0.03310\n0.03471\n0.0\n0.05262\n0.03272\n0.03617\n0.03985\n\n\nO00418_EF2K_HUMAN_KD1\n0.04257\n0.03937\n0.04509\n0.06556\n0.04301\n0.0\n0.01077\n0.01711\n0.01597\n0.04253\n...\n0.06092\n0.03335\n0.05386\n0.08511\n0.04491\n0.0\n0.07859\n0.01808\n0.04185\n0.03273\n\n\nQ8IXL6_FA20C_HUMAN_KD1\n0.03618\n0.04512\n0.04155\n0.04672\n0.01342\n0.0\n0.01157\n0.00896\n0.01029\n0.02706\n...\n0.05085\n0.04692\n0.06779\n0.08276\n0.04771\n0.0\n0.03191\n0.05062\n0.08779\n0.09533\n\n\nQ8TF76_HASP_HUMAN_KD1\n0.05828\n0.04374\n0.04727\n0.07855\n0.02508\n0.0\n0.04105\n0.02664\n0.03435\n0.03703\n...\n0.04459\n0.03296\n0.04591\n0.04146\n0.02958\n0.0\n0.01633\n0.01709\n0.02363\n0.02728\n\n\nQ15118_PDK1_HUMAN_KD1\n0.03130\n0.04429\n0.04092\n0.03627\n0.03858\n0.0\n0.02843\n0.03993\n0.04791\n0.04700\n...\n0.04567\n0.05228\n0.03970\n0.04040\n0.03094\n0.0\n0.03391\n0.04205\n0.03010\n0.03992\n\n\nQ16654_PDK4_HUMAN_KD1\n0.03068\n0.03645\n0.04143\n0.04867\n0.03913\n0.0\n0.03689\n0.03562\n0.03821\n0.04236\n...\n0.04521\n0.07603\n0.05581\n0.04229\n0.03139\n0.0\n0.04003\n0.05163\n0.04070\n0.04230\n\n\nQ96SB4_SRPK1_HUMAN_KD1\n0.04459\n0.06105\n0.02966\n0.04491\n0.08984\n0.0\n0.23129\n0.05645\n0.08265\n0.05774\n...\n0.04182\n0.06301\n0.03428\n0.06097\n0.03566\n0.0\n0.02252\n0.04015\n0.03186\n0.04500\n\n\nP78362_SRPK2_HUMAN_KD1\n0.03484\n0.08329\n0.01786\n0.03738\n0.06923\n0.0\n0.21658\n0.05448\n0.08178\n0.04584\n...\n0.03718\n0.05643\n0.02320\n0.04946\n0.03666\n0.0\n0.03288\n0.03275\n0.03074\n0.04107\n\n\nQ9UPE1_SRPK3_HUMAN_KD1\n0.03248\n0.04123\n0.01834\n0.03205\n0.06979\n0.0\n0.18279\n0.04024\n0.06823\n0.04594\n...\n0.05033\n0.09188\n0.06132\n0.07519\n0.06084\n0.0\n0.03434\n0.03817\n0.03436\n0.04144\n\n\n\n\n13 rows × 230 columns",
    "crumbs": [
      "kinase_domain",
      "Prepare data for training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_04_prepare_data.html#target-feature",
    "href": "kinase_domain/kd_04_prepare_data.html#target-feature",
    "title": "Prepare data for training",
    "section": "target + feature",
    "text": "target + feature\n\ndef combine(target_df,feat_df): return target_df.merge(feat_df,left_index=True,right_index=True)\n\n\npspa_onehot =combine(pspa,onehot)\npspa_onehot_pca =combine(pspa,onehot_pca)\n\npspa_esm = combine(pspa,esm)\npspa_t5 = combine(pspa,t5)\n\n\ncddm_onehot =combine(cddm,onehot)\ncddm_onehot_pca =combine(cddm,onehot_pca)\n\ncddm_esm = combine(cddm,esm)\ncddm_t5 = combine(cddm,t5)\n\n\nprint(pspa_onehot.shape)\nprint(pspa_onehot_pca.shape)\nprint(pspa_esm.shape)\nprint(pspa_t5.shape)\n\nprint(cddm_onehot.shape)\nprint(cddm_onehot_pca.shape)\nprint(cddm_esm.shape)\nprint(cddm_t5.shape)\n\n(368, 7079)\n(368, 1230)\n(368, 1510)\n(368, 1254)\n(320, 7792)\n(320, 1943)\n(320, 2223)\n(320, 1967)\n\n\n\npspa_onehot.to_parquet('train/pspa_onehot.parquet')\npspa_onehot_pca.to_parquet('train/pspa_onehot_pca.parquet')\npspa_esm.to_parquet('train/pspa_esm.parquet')\npspa_t5.to_parquet('train/pspa_t5.parquet')\n\n\ncddm_onehot.to_parquet('train/cddm_onehot.parquet')\ncddm_onehot_pca.to_parquet('train/cddm_onehot_pca.parquet')\ncddm_esm.to_parquet('train/cddm_esm.parquet')\ncddm_t5.to_parquet('train/cddm_t5.parquet')\n\n\npspa_onehot_pca\n\n\n\n\n\n\n\n\n-5P\n-4P\n-3P\n-2P\n-1P\n0P\n1P\n2P\n3P\n4P\n...\nPCA991\nPCA992\nPCA993\nPCA994\nPCA995\nPCA996\nPCA997\nPCA998\nPCA999\nPCA1000\n\n\n\n\nQ2M2I8_AAK1_HUMAN_KD1\n0.05845\n0.04172\n0.08610\n0.01794\n0.09607\n0.0\n0.04265\n0.04048\n0.05264\n0.05026\n...\n0.049938\n0.057859\n0.005693\n-0.006881\n0.041570\n0.039594\n0.080002\n0.022089\n0.017665\n0.013385\n\n\nP27037_AVR2A_HUMAN_KD1\n0.02971\n0.03341\n0.03345\n0.01462\n0.02657\n0.0\n0.01055\n0.04285\n0.04958\n0.05559\n...\n-0.024776\n0.001753\n-0.056504\n0.164427\n-0.072278\n0.052143\n-0.015666\n0.010091\n0.138182\n-0.033171\n\n\nQ13705_AVR2B_HUMAN_KD1\n0.03779\n0.03774\n0.03044\n0.01482\n0.02331\n0.0\n0.01020\n0.05871\n0.05072\n0.05205\n...\n0.009370\n-0.030940\n0.050483\n-0.100141\n0.045942\n-0.005657\n-0.010641\n0.112414\n-0.166770\n0.025360\n\n\nP31749_AKT1_HUMAN_KD1\n0.04669\n0.04161\n0.02642\n0.01512\n0.04884\n0.0\n0.01689\n0.03375\n0.03828\n0.07361\n...\n0.081445\n0.019706\n0.042164\n0.192072\n0.001691\n-0.068809\n0.071163\n-0.010879\n-0.028764\n0.042163\n\n\nP31751_AKT2_HUMAN_KD1\n0.04617\n0.04437\n0.01778\n0.01873\n0.05226\n0.0\n0.03177\n0.03922\n0.04509\n0.07404\n...\n-0.059736\n-0.120186\n-0.060415\n-0.245777\n-0.113104\n0.116407\n0.054151\n0.135826\n0.001413\n-0.007756\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nP17948_VGFR1_HUMAN_KD1\n0.04074\n0.03414\n0.02854\n0.04313\n0.01986\n0.0\n0.01625\n0.02121\n0.04472\n0.06253\n...\n-0.031060\n-0.010548\n0.035789\n-0.113515\n0.221636\n0.034873\n-0.093145\n-0.005760\n0.110737\n0.147448\n\n\nP35968_VGFR2_HUMAN_KD1\n0.04816\n0.05296\n0.04610\n0.04524\n0.03253\n0.0\n0.02688\n0.02602\n0.03470\n0.05973\n...\n0.131558\n-0.033205\n0.098801\n0.054086\n0.010220\n0.041245\n-0.004853\n-0.205461\n-0.048656\n-0.156289\n\n\nP35916_VGFR3_HUMAN_KD1\n0.03554\n0.03875\n0.03354\n0.04111\n0.02239\n0.0\n0.02272\n0.01798\n0.02467\n0.05166\n...\n-0.067793\n0.110357\n-0.015003\n0.090916\n-0.156411\n0.001075\n-0.101868\n0.228029\n0.076798\n-0.143131\n\n\nP07947_YES_HUMAN_KD1\n0.05216\n0.04870\n0.04363\n0.05690\n0.05838\n0.0\n0.01899\n0.03019\n0.02228\n0.03449\n...\n0.065050\n-0.028076\n-0.064543\n0.093354\n0.083031\n0.011155\n-0.002236\n-0.147592\n-0.093897\n0.161915\n\n\nP43403_ZAP70_HUMAN_KD1\n0.03902\n0.06354\n0.03211\n0.02673\n0.01208\n0.0\n0.00802\n0.03680\n0.12355\n0.08125\n...\n0.017745\n0.021932\n-0.284451\n-0.151152\n-0.291706\n-0.144981\n0.023568\n-0.088461\n0.209291\n-0.154225\n\n\n\n\n368 rows × 1230 columns",
    "crumbs": [
      "kinase_domain",
      "Prepare data for training"
    ]
  },
  {
    "objectID": "kinase_domain/kd_08a_similarity_relationship.html",
    "href": "kinase_domain/kd_08a_similarity_relationship.html",
    "title": "KD similarity & PSSM similarity",
    "section": "",
    "text": "import pandas as pd, numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy.linalg import norm\nfrom katlas.data import *\nfrom scipy.stats import spearmanr\nfrom katlas.plot import *\nfrom katlas.clustering import *\npspa_t5 = pd.read_parquet('train/pspa_t5.parquet')\ndf = pspa_t5.copy()\ndf['0pY'].value_counts()\n\n0pY\n0.0    290\n1.0     78\nName: count, dtype: int64\nst = df[df['0pY']==0].copy()\ntyr = df[df['0pY']==1].copy()\ndef euclidean_dist(u, v):\n    return norm(u - v)\ndef get_dist(df):\n    df =df.copy()\n    t5_cols = df.columns[df.columns.str.startswith('T5')]\n    pssm_cols = df.columns[~df.columns.str.startswith('T5')]\n    D_pssm = get_1d_js_parallel(df[pssm_cols])\n    D_t5 = get_1d_distance_parallel(df[t5_cols],func_flat=euclidean_dist)\n    return D_t5,D_pssm\nD_t5,D_pssm= get_dist(st)\nD_t5_y,D_pssm_y= get_dist(tyr)\ndef plot_scatter(x, y,line=None):\n    plt.figure(figsize=(4,3), dpi=300)\n    plt.scatter(x, y, s=3, alpha=0.3)\n\n    # labels\n    plt.xlabel(\"Euclidean distance in T5 embeddings of KDs\")\n    plt.ylabel(\"JS divergence in PSSMs\")\n\n    # calculate Spearman correlation\n    rho, pval = spearmanr(x, y)\n\n    # annotate Spearman correlation coefficient on the plot\n    plt.text(0.95, 0.95, f\"Spearman ρ = {rho:.3f}\", \n             ha=\"right\", va=\"top\", transform=plt.gca().transAxes,\n             fontsize=10, bbox=dict(facecolor=\"white\", alpha=0.6, edgecolor=\"none\"))\n\n    if line is not None: plt.axvline(x=line, color=\"darkred\", alpha=0.7,linestyle=\"--\", linewidth=1)\n    plt.tight_layout()\nplot_scatter(D_t5,D_pssm,line=0.25)\nplt.title('PSSM distance vs. KD distance')\nsave_svg('fig/JSD_PSSM_vs_KD_distance.svg')\nplot_scatter(D_t5_y,D_pssm_y,line=0.25)",
    "crumbs": [
      "kinase_domain",
      "KD similarity & PSSM similarity"
    ]
  },
  {
    "objectID": "kinase_domain/kd_08a_similarity_relationship.html#distance-in-all-kd",
    "href": "kinase_domain/kd_08a_similarity_relationship.html#distance-in-all-kd",
    "title": "KD similarity & PSSM similarity",
    "section": "Distance in all kd",
    "text": "Distance in all kd\n\ndf  = Data.get_kd_uniprot()\n\n\ndf = df[df.active_D1_D2==1].reset_index(drop=True)\n\n\ndf['in_pspa']  = df.kd_ID.isin(pspa_t5.index).astype(int)\n# df['in_cddm']  = df.kd_ID.isin(cddm_t5.index).astype(int)\n\n\ndf.in_pspa.value_counts()\n\nin_pspa\n0    3841\n1     368\nName: count, dtype: int64\n\n\n\n# from katlas.feature import *\n\n# t5 = get_t5(df,col='kd_seq')\n\n# t5.index=df.kd_ID\n\n# t5 = t5.astype('float64')\n\n# t5.to_parquet('out/uniprot_kd_t5.parquet')\n\n\nt5_df = pd.read_parquet('raw/t5_kd.parquet')\n\n\ndef find_close_negatives(df: pd.DataFrame,\n                         label_series,\n                         threshold: float = 0.25,\n                         return_all: bool = False) -&gt; pd.DataFrame:\n    \"\"\"\n    For each negative (label_col==0), find the nearest positive (label_col==1)\n    by Euclidean distance over `features`, and mark whether it's within `threshold`.\n\n    Returns a DataFrame indexed by the negatives' index with columns:\n      - closest_pos_index\n      - closest_dist\n      - within_threshold (bool)\n    If `return_all=False`, only rows within threshold are returned.\n    \"\"\"\n\n    # Extract arrays\n    mask_pos = label_series.eq(1).to_numpy()\n    mask_neg = ~mask_pos\n\n    X_pos = df.loc[mask_pos].to_numpy(dtype=float, copy=False)\n    X_neg = df.loc[mask_neg].to_numpy(dtype=float, copy=False)\n\n    # Handle edge cases\n    if X_pos.size == 0 or X_neg.size == 0:\n        out = pd.DataFrame(columns=[\"closest_pos_index\", \"closest_dist\", \"within_threshold\"],\n                           index=df.index[mask_neg])\n        return out if return_all else out.iloc[0:0]\n\n    # Pairwise squared distances: ||a-b||^2 = ||a||^2 + ||b||^2 - 2 a·b\n    sq_pos = np.einsum('ij,ij-&gt;i', X_pos, X_pos)            # (P,)\n    sq_neg = np.einsum('ij,ij-&gt;i', X_neg, X_neg)            # (N,)\n    D2 = sq_neg[:, None] + sq_pos[None, :] - 2.0 * (X_neg @ X_pos.T)\n    np.maximum(D2, 0.0, out=D2)                             # numerical safety\n    # Nearest positive for each negative\n    idx_min = D2.argmin(axis=1)                             # (N,)\n    dmin = np.sqrt(D2[np.arange(D2.shape[0]), idx_min])     # (N,)\n\n    # Map back to indices\n    pos_index = df.index[mask_pos].to_numpy()\n    neg_index = df.index[mask_neg].to_numpy()\n    closest_pos_index = pos_index[idx_min]\n\n    out = pd.DataFrame({\n        \"closest_pos_index\": closest_pos_index,\n        \"closest_dist\": dmin,\n        \"within_threshold\": dmin &lt;= threshold,\n    }, index=neg_index)\n\n    return out if return_all else out[out[\"within_threshold\"]]\n\n\nresults_pspa = find_close_negatives(t5_df, label_series=df.in_pspa,\n                                   threshold=0.25, return_all=True)\n\n\nresults_pspa.to_parquet('raw/kd_similar_pspa.parquet')\n\n\nresults_pspa[results_pspa.within_threshold].sort_values('closest_dist')\n\n\n\n\n\n\n\n\nclosest_pos_index\nclosest_dist\nwithin_threshold\n\n\n\n\nA4K2Y1_STK4_CHLAE_KD1\nQ13043_STK4_HUMAN_KD1\n0.000000\nTrue\n\n\nA4K2T0_STK4_MACMU_KD1\nQ13043_STK4_HUMAN_KD1\n0.000000\nTrue\n\n\nQ5RCY1_UHMK1_PONAB_KD1\nQ8TAS1_UHMK1_HUMAN_KD1\n0.000000\nTrue\n\n\nQ5RCC4_KCC2A_PONAB_KD1\nQ9UQM7_KCC2A_HUMAN_KD1\n0.000000\nTrue\n\n\nA2VDU3_M3K7_BOVIN_KD1\nO43318_M3K7_HUMAN_KD1\n0.000000\nTrue\n\n\n...\n...\n...\n...\n\n\nO08605_MKNK1_MOUSE_KD1\nQ9HBH9_MKNK2_HUMAN_KD1\n0.248701\nTrue\n\n\nP87253_KPC1_NEUCR_KD1\nQ04759_KPCT_HUMAN_KD1\n0.249016\nTrue\n\n\nQ9W739_CDK1_RANDY_KD1\nP06493_CDK1_HUMAN_KD1\n0.249479\nTrue\n\n\nQ99PW4_PRPKB_MOUSE_KD1\nQ96S44_PRPK_HUMAN_KD1\n0.249534\nTrue\n\n\nQ8AYG3_TTK_DANRE_KD1\nP33981_TTK_HUMAN_KD1\n0.249601\nTrue\n\n\n\n\n1230 rows × 3 columns",
    "crumbs": [
      "kinase_domain",
      "KD similarity & PSSM similarity"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html",
    "href": "kinase_domain/kd_02_pseudo_alignment.html",
    "title": "Alignment",
    "section": "",
    "text": "from Bio.Seq import Seq\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO, AlignIO\nimport pandas as pd\n\nfrom katlas.utils import *\nfrom katlas.data import *",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html#prepare-fasta-file-for-clustalo",
    "href": "kinase_domain/kd_02_pseudo_alignment.html#prepare-fasta-file-for-clustalo",
    "title": "Alignment",
    "section": "Prepare fasta file for clustalo",
    "text": "Prepare fasta file for clustalo\n\n# kd=pd.read_excel('out/uniprot_kd.xlsx')\n\n\nkd=Data.get_kd_uniprot()\n\n\nkd.columns\n\nIndex(['kd_ID', 'Uniprot', 'Entry Name', 'Protein names', 'Gene Names',\n       'Gene Names (primary)', 'Organism', 'kd_note', 'kd_evidence',\n       'kd_start', 'kd_end', 'kd_seq', 'Domain [FT]', 'Domain [CC]', 'Region',\n       'Motif', 'Protein families', 'Reactome', 'ComplexPortal',\n       'Subcellular location [CC]', 'Gene Ontology (biological process)',\n       'Tissue specificity', 'Interacts with', 'Subunit structure',\n       'Function [CC]', 'Activity regulation', 'full_seq', 'D1', 'D2', 'D3',\n       'N1', 'active_D1_D2'],\n      dtype='object')\n\n\n\nget_fasta(kd,\n          seq_col='kd_seq',\n          id_col='kd_ID',\n          path='raw/kinase_domains.fasta')\n\n5536\n\n\nFor human only:\n\n# human = kd[kd.Organism=='Homo sapiens (Human)']\n\n# get_fasta(human,path=\"raw/human_kinase_domains.fasta\")\n\nfor PI3K catalytic domain\n\n# pi3k = kd[kd.kd_note=='PI3K/PI4K catalytic']\n\n# get_fasta(pi3k,path=\"raw/pi3k_kinase_domains.fasta\")",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html#run-clustalo",
    "href": "kinase_domain/kd_02_pseudo_alignment.html#run-clustalo",
    "title": "Alignment",
    "section": "Run clustalo",
    "text": "Run clustalo\nsudo apt-get update\nsudo apt-get install clustalo\nclustalo -i kinase_domains.fasta -o kinase_domains.aln --force --outfmt=clu\n\n# run_clustalo(input_fasta='raw/kinase_domains.fasta', \n#              output_aln = \"raw/kinase_domains.aln\")",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html#analyze-alignment",
    "href": "kinase_domain/kd_02_pseudo_alignment.html#analyze-alignment",
    "title": "Alignment",
    "section": "Analyze alignment",
    "text": "Analyze alignment\n\ndf = aln2df(\"raw/kinase_domains.aln\")\n\n\ndf.head()\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n3425\n3426\n3427\n3428\n3429\n3430\n3431\n3432\n3433\n3434\n\n\n\n\nA0A075F7E9_LERK1_ORYSI_KD1\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n...\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nA0A078BQP2_GCY25_CAEEL_KD1\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n...\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nA0A078CGE6_M3KE1_BRANA_KD1\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n...\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nA0A0G2K344_PK3CA_RAT_KD1\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n...\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\nA0A0H2ZM62_HK06_STRP2_KD1\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n...\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n\n\n\n\n5 rows × 3434 columns\n\n\n\n\n# change type to str to save in parquet\ndf.columns = df.columns.astype(str)\n\n\ndf.to_parquet('raw/uniprot_kd_align.parquet')\n\n\n# reverse back\ndf.columns = df.columns.astype(int)",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html#frequency-of-aa-at-position-1-3434",
    "href": "kinase_domain/kd_02_pseudo_alignment.html#frequency-of-aa-at-position-1-3434",
    "title": "Alignment",
    "section": "Frequency of aa at position 1-3434",
    "text": "Frequency of aa at position 1-3434\n\n# Compute residue frequency at each position\ncounts_df = df.apply(lambda col: col.value_counts(), axis=0).fillna(0)\nfreq_df = counts_df.div(counts_df.sum(axis=0), axis=1)\n\n\nfreq_df.head()\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n...\n3425\n3426\n3427\n3428\n3429\n3430\n3431\n3432\n3433\n3434\n\n\n\n\n-\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n...\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n0.999819\n\n\nA\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nC\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n\n\nD\n0.000000\n0.000181\n0.000000\n0.000000\n0.000181\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000181\n0.000181\n0.000000\n0.000000\n0.000000\n0.000181\n0.000000\n0.000000\n0.000000\n\n\nE\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n...\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000000\n0.000181\n0.000000\n0.000000\n\n\n\n\n5 rows × 3434 columns\n\n\n\n\n# remove '-' first line\nmax_series=freq_df.iloc[1:,:]\n\n\nfreq_max = pd.concat([max_series.idxmax(),max_series.max()],axis=1)\n\n\nfreq_max.columns = ['aa','max_value']\n\n\nfreq_max = freq_max.sort_values('max_value',ascending=False).reset_index(names='position')\n\n\nout = freq_max[freq_max.max_value&gt;0.1]\n\n\nout\n\n\n\n\n\n\n\n\nposition\naa\nmax_value\n\n\n\n\n0\n1549\nN\n0.815390\n\n\n1\n2618\nD\n0.809429\n\n\n2\n1724\nD\n0.800759\n\n\n3\n1525\nD\n0.791004\n\n\n4\n1730\nG\n0.775470\n\n\n...\n...\n...\n...\n\n\n214\n640\nG\n0.101879\n\n\n215\n193\nE\n0.101879\n\n\n216\n922\nL\n0.101337\n\n\n217\n603\nR\n0.101156\n\n\n218\n2581\nG\n0.100614\n\n\n\n\n219 rows × 3 columns\n\n\n\n\n# out.to_csv('out/align_freq_max_aa.csv',index=False)",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html#locate-active-motif-save",
    "href": "kinase_domain/kd_02_pseudo_alignment.html#locate-active-motif-save",
    "title": "Alignment",
    "section": "Locate active motif & save",
    "text": "Locate active motif & save\n\n1549 N is after HRD motif\n2618 D is around D[IV]WS motif\n1724 D is DFG motif\n1525 D is HRD motif\n\n\ndf=df.reset_index()\n\n\nkd['D1']=(df[1525]=='D').astype(int) # HRD\n\n\nkd['D2'] = (df[1724]=='D').astype(int) #DFG\n\n\nkd['D3']=(df[2618]=='D').astype(int)\n\n\nkd['N1'] = (df[1549]=='N').astype(int)\n\n\nactive_col = ['D1','D2']\n\n\nkd['active_D1_D2'] = (kd[active_col].sum(1)==len(active_col)).astype(int)\n\n\nkd['active_D1_D2'].value_counts()\n\nactive_D1_D2\n1    4209\n0    1327\nName: count, dtype: int64\n\n\n\nactive_all = kd[kd.active_D1_D2==1]\n\n\nactive_all.shape\n\n(4209, 32)\n\n\n\n# active_all.to_excel('out/uniprot_kd_active_D1_D2.xlsx',index=False)\n\n\n# kd.to_excel('out/uniprot_kd_motif_labeled.xlsx',index=False)\n\nTake a look of their identity:\n\nkd[kd.active_D1_D2==1].kd_note.value_counts()\n\nkd_note\nProtein kinase               4005\nPI3K/PI4K catalytic            71\nProtein kinase 2               61\nProtein kinase 1               37\nHistidine kinase               34\nAlpha-type protein kinase       1\nName: count, dtype: int64\n\n\n\nkd[kd.active_D1_D2==0].kd_note.value_counts()\n\nkd_note\nHistidine kinase                  591\nProtein kinase                    525\nPI3K/PI4K catalytic                97\nProtein kinase 1                   36\nAlpha-type protein kinase          21\nProtein kinase; inactive           13\nProtein kinase 2                   12\nHWE histidine kinase domain        11\nGuanylate kinase-like               5\nHistidine kinase 2                  4\nHistidine kinase 1                  4\nAmino-acid kinase domain (AAK)      3\nKinase domain                       2\nHistidine kinase; first part        1\nHistidine kinase; second part       1\nProtein kinase; truncated           1\nName: count, dtype: int64",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_02_pseudo_alignment.html#add-kd-info-to-human-kinase-info",
    "href": "kinase_domain/kd_02_pseudo_alignment.html#add-kd-info-to-human-kinase-info",
    "title": "Alignment",
    "section": "Add KD info to human kinase info",
    "text": "Add KD info to human kinase info\n\nkd = pd.read_excel('out/uniprot_kd_motif_labeled.xlsx')\n\n\nhuman= kd[kd.Organism=='Homo sapiens (Human)']\n\n\nkd_id_uniprot_map = human.groupby('Uniprot').agg({'kd_ID': lambda x: ','.join(x.unique()),\n                                                  'active_D1_D2': lambda x: x,\n                                                 })\n\n\nkd_id_uniprot_map\n\n\n\n\n\n\n\n\nkd_ID\nactive_D1_D2\n\n\nUniprot\n\n\n\n\n\n\nA4D2B8\nA4D2B8_PM2P1_HUMAN_KD1\n0\n\n\nA4QPH2\nA4QPH2_PI4P2_HUMAN_KD1\n0\n\n\nO00141\nO00141_SGK1_HUMAN_KD1\n1\n\n\nO00238\nO00238_BMR1B_HUMAN_KD1\n1\n\n\nO00311\nO00311_CDC7_HUMAN_KD1\n1\n\n\n...\n...\n...\n\n\nQ9Y616\nQ9Y616_IRAK3_HUMAN_KD1\n0\n\n\nQ9Y6E0\nQ9Y6E0_STK24_HUMAN_KD1\n1\n\n\nQ9Y6M4\nQ9Y6M4_KC1G3_HUMAN_KD1\n1\n\n\nQ9Y6R4\nQ9Y6R4_M3K4_HUMAN_KD1\n1\n\n\nQ9Y6S9\nQ9Y6S9_RPKL1_HUMAN_KD1\n0\n\n\n\n\n523 rows × 2 columns\n\n\n\n\n# kd_id_uniprot_map.to_csv('raw/kd_ID_uniprot_map.csv')\n\nGet the csv merge with kinase info. Manually match KD1 and KD2 to the kinase info by considering active_D1_D2.\nThe data is updated on github.\n\nfrom katlas.data import *\n\n\nkd_info =Data.get_kd_uniprot()\n\n\nkd_info.head()\n\n\n\n\n\n\n\n\nkd_ID\nUniprot\nEntry Name\nProtein names\nGene Names\nGene Names (primary)\nOrganism\nkd_note\nkd_evidence\nkd_start\n...\nInteracts with\nSubunit structure\nFunction [CC]\nActivity regulation\nfull_seq\nD1\nD2\nD3\nN1\nactive_D1_D2\n\n\n\n\n0\nA0A075F7E9_LERK1_ORYSI_KD1\nA0A075F7E9\nLERK1_ORYSI\nG-type lectin S-receptor-like serine/threonine...\nLECRK1 LECRK OsI_14840\nLECRK1\nOryza sativa subsp. indica (Rice)\nProtein kinase\nECO:0000255|PROSITE-ProRule:PRU00159\n523\n...\nNone\nSUBUNIT: Interacts (via kinase domain) with AD...\nFUNCTION: Involved in innate immunity. Require...\nNone\nMVALLLFPMLLQLLSPTCAQTQKNITLGSTLAPQGPASSWLSPSGD...\n1\n1\n1\n1\n1\n\n\n1\nA0A078BQP2_GCY25_CAEEL_KD1\nA0A078BQP2\nGCY25_CAEEL\nReceptor-type guanylate cyclase gcy-25 (EC 4.6...\ngcy-25 Y105C5B.2\ngcy-25\nCaenorhabditis elegans\nProtein kinase\nECO:0000255|PROSITE-ProRule:PRU00159\n464\n...\nNone\nNone\nFUNCTION: Guanylate cyclase involved in the pr...\nNone\nMLLLLLLLKISTFVDSFQIGHLEFENSNETRILEICMKNAGSWRDH...\n0\n0\n1\n0\n0\n\n\n2\nA0A078CGE6_M3KE1_BRANA_KD1\nA0A078CGE6\nM3KE1_BRANA\nMAP3K epsilon protein kinase 1 (BnM3KE1) (EC 2...\nM3KE1 BnaA03g30290D GSBRNA2T00111755001\nM3KE1\nBrassica napus (Rape)\nProtein kinase\nECO:0000255|PROSITE-ProRule:PRU00159\n20\n...\nNone\nNone\nFUNCTION: Serine/threonine-protein kinase invo...\nNone\nMARQMTSSQFHKSKTLDNKYMLGDEIGKGAYGRVYIGLDLENGDFV...\n1\n1\n1\n1\n1\n\n\n3\nA0A0G2K344_PK3CA_RAT_KD1\nA0A0G2K344\nPK3CA_RAT\nPhosphatidylinositol 4,5-bisphosphate 3-kinase...\nPik3ca\nPik3ca\nRattus norvegicus (Rat)\nPI3K/PI4K catalytic\nECO:0000255|PROSITE-ProRule:PRU00269\n765\n...\nNone\nSUBUNIT: Heterodimer of a catalytic subunit PI...\nFUNCTION: Phosphoinositide-3-kinase (PI3K) pho...\nNone\nMPPRPSSGELWGIHLMPPRILVECLLPNGMIVTLECLREATLVTIK...\n0\n0\n0\n0\n0\n\n\n4\nA0A0H2ZM62_HK06_STRP2_KD1\nA0A0H2ZM62\nHK06_STRP2\nSensor histidine protein kinase HK06 (EC 2.7.1...\nhk06 SPD_2019\nhk06\nStreptococcus pneumoniae serotype 2 (strain D3...\nHistidine kinase\nECO:0000255|PROSITE-ProRule:PRU00107\n239\n...\nNone\nNone\nFUNCTION: Member of the two-component regulato...\nNone\nMIKNPKLLTKSFLRSFAILGGVGLVIHIAIYLTFPFYYIQLEGEKF...\n0\n0\n0\n0\n0\n\n\n\n\n5 rows × 32 columns\n\n\n\n\nkd_info.shape\n\n(5536, 32)\n\n\n\ninfo=Data.get_kinase_info()\n\n\ninfo.columns\n\nIndex(['kinase', 'ID_coral', 'uniprot', 'gene', 'modi_group', 'group',\n       'family', 'subfamily_coral', 'subfamily', 'in_pspa_st', 'in_pspa_tyr',\n       'in_pspa', 'in_cddm', 'kd_ID', 'active_D1_D2', 'active_kd_ID',\n       'pspa_ID', 'pseudo', 'pspa_category_small', 'pspa_category_big',\n       'cddm_big', 'cddm_small', 'length', 'human_uniprot_sequence',\n       'kinasecom_domain', 'nucleus', 'cytosol', 'cytoskeleton',\n       'plasma membrane', 'mitochondrion', 'Golgi apparatus',\n       'endoplasmic reticulum', 'vesicle', 'centrosome', 'aggresome',\n       'main_location'],\n      dtype='object')\n\n\n\ninfo.kd_ID\n\n0       Q2M2I8_AAK1_HUMAN_KD1\n1      Q6ZMQ8_LMTK1_HUMAN_KD1\n2       P00519_ABL1_HUMAN_KD1\n3       P42684_ABL2_HUMAN_KD1\n4      Q8NER5_ACV1C_HUMAN_KD1\n                ...          \n518      P07947_YES_HUMAN_KD1\n519    O00506_STK25_HUMAN_KD1\n520    Q56UN5_M3K19_HUMAN_KD1\n521    Q9NYL2_M3K20_HUMAN_KD1\n522    P43403_ZAP70_HUMAN_KD1\nName: kd_ID, Length: 523, dtype: object",
    "crumbs": [
      "kinase_domain",
      "Alignment"
    ]
  },
  {
    "objectID": "kinase_domain/kd_10_plot_umap_known_unk.html",
    "href": "kinase_domain/kd_10_plot_umap_known_unk.html",
    "title": "Plot UMAP of known & unknown KD",
    "section": "",
    "text": "import pandas as pd\nfrom katlas.train import *\nfrom katlas.dnn import *\nfrom fastai.vision.all import *\nfrom katlas.pssm import *\nfrom katlas.data import *\nkd = Data.get_kd_uniprot()\n\n⬇️ Downloading katlas_dataset.zip ...\n\n\nDownloading...\nFrom (original): https://drive.google.com/uc?id=17wIl0DbdoHV036Z3xgaT_0H3LlM_W47l\nFrom (redirected): https://drive.google.com/uc?id=17wIl0DbdoHV036Z3xgaT_0H3LlM_W47l&confirm=t&uuid=503c31e6-5e12-424b-86bf-185b223d5cf8\nTo: /home/sky1ove/git/katlas-raw/nbs/kinase_domain/katlas_datasets.zip\n100%|███████████████████████████████████████████████████████████████████████████████████████████| 209M/209M [00:07&lt;00:00, 26.4MB/s]\n\n\n📂 Extracting to /tmp/katlas_dataset ...\n🧹 Removing zip file: katlas_datasets.zip\n✅ Done! Extracted dataset is at: /tmp/katlas_dataset\n# filter out active motif\nkd = kd[kd.active_D1_D2==1].reset_index(drop=True)",
    "crumbs": [
      "kinase_domain",
      "Plot UMAP of known & unknown KD"
    ]
  },
  {
    "objectID": "kinase_domain/kd_10_plot_umap_known_unk.html#known-kd_id",
    "href": "kinase_domain/kd_10_plot_umap_known_unk.html#known-kd_id",
    "title": "Plot UMAP of known & unknown KD",
    "section": "Known kd_id",
    "text": "Known kd_id\n\ncddm_known = pd.read_parquet('train/cddm_t5.parquet')\npspa_known = pd.read_parquet('train/pspa_t5.parquet')\n\n\nknown_idx = set(cddm_known.index)|set(pspa_known.index)\n\n\nlen(known_idx)\n\n384",
    "crumbs": [
      "kinase_domain",
      "Plot UMAP of known & unknown KD"
    ]
  },
  {
    "objectID": "kinase_domain/kd_10_plot_umap_known_unk.html#predicted-kd_id",
    "href": "kinase_domain/kd_10_plot_umap_known_unk.html#predicted-kd_id",
    "title": "Plot UMAP of known & unknown KD",
    "section": "Predicted kd_id",
    "text": "Predicted kd_id\n\ncddm_pred = pd.read_parquet('raw/pred_new_cddm.parquet')\npspa_pred = pd.read_parquet('raw/pred_new_pspa.parquet')\n\n\nkd.shape\n\n(4209, 32)\n\n\n\ncddm_pred.shape,pspa_pred.shape\n\n((1195, 943), (1230, 230))\n\n\n\ncddm_pred.index.isin(kd.kd_ID).sum()\n\nnp.int64(1195)\n\n\n\npred_idx= set(cddm_pred.index)|set(pspa_pred.index)\n\n\nlen(pred_idx)\n\n1292",
    "crumbs": [
      "kinase_domain",
      "Plot UMAP of known & unknown KD"
    ]
  },
  {
    "objectID": "kinase_domain/kd_10_plot_umap_known_unk.html#get-umap-embedding",
    "href": "kinase_domain/kd_10_plot_umap_known_unk.html#get-umap-embedding",
    "title": "Plot UMAP of known & unknown KD",
    "section": "Get UMAP embedding",
    "text": "Get UMAP embedding\n\nfrom katlas.plot import *\n\n\nt5 = pd.read_parquet('raw/t5_kd.parquet')\n\n\numap_df = reduce_feature(t5,method='umap',complexity=30,min_dist=0.6)\n\n/home/sky1ove/git/katlas/.venv/lib/python3.11/site-packages/logomaker/../umap/umap_.py:1952: UserWarning: n_jobs value 1 overridden to 1 by setting random_state. Use no seed for parallelism.\n  warn(\n\n\n\ninfo = pd.Series('Unknown', index=umap_df.index)\n\n\ninfo.loc[umap_df.index.isin(pred_idx)] = 'Predicted'\ninfo.loc[umap_df.index.isin(known_idx)] = 'Known'\n\n\ncnts = info.value_counts()\ninfo_labeled = info.map(lambda x: f\"{x} (n={cnts[x]:,})\")\n\n\ninfo_labeled\n\nkd_ID\nA0A075F7E9_LERK1_ORYSI_KD1      Unknown (n=2,555)\nA0A078CGE6_M3KE1_BRANA_KD1      Unknown (n=2,555)\nA0A0K3AV08_MLK1_CAEEL_KD1       Unknown (n=2,555)\nA0A0P0VIP0_LRSK7_ORYSJ_KD1      Unknown (n=2,555)\nA0A0P0XII1_CERK1_ORYSJ_KD1      Unknown (n=2,555)\n                                     ...         \nU4PR86_MELK_CAEEL_KD1           Unknown (n=2,555)\nW0LYS5_CAMKI_MACNP_KD1        Predicted (n=1,270)\nW0T9X4_ATG1_KLUMD_KD1           Unknown (n=2,555)\nW7JX98_KGP_PLAFO_KD1            Unknown (n=2,555)\nX5M5N0_WNK_CAEEL_KD1          Predicted (n=1,270)\nLength: 4209, dtype: object\n\n\nAlternatively, use np.select to do the same thing:\n\n# conditions = [\n#     umap_df.index.isin(known_idx),\n#     umap_df.index.isin(pred_idx),\n# ]\n# choices = ['Known', 'Predicted']\n# out =np.select(conditions, choices, default='Unknown')\n# pd.Series(out,index=umap_df.index)",
    "crumbs": [
      "kinase_domain",
      "Plot UMAP of known & unknown KD"
    ]
  },
  {
    "objectID": "kinase_domain/kd_10_plot_umap_known_unk.html#plot-2d",
    "href": "kinase_domain/kd_10_plot_umap_known_unk.html#plot-2d",
    "title": "Plot UMAP of known & unknown KD",
    "section": "Plot 2D",
    "text": "Plot 2D\n\nlen(umap_df)\n\n4209\n\n\n\nplot_2d(umap_df,hue=info_labeled,s=3,legend=True,palette='tab10',legend_title='')\nplt.title('UMAP plot of active KD across species \\n(n=4,209)')\nsave_svg('fig/umap_kd_known_unknown.svg')",
    "crumbs": [
      "kinase_domain",
      "Plot UMAP of known & unknown KD"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html",
    "title": "DL training: Feature comparison on CNN model",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#setup",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#setup",
    "title": "DL training: Feature comparison on CNN model",
    "section": "",
    "text": "import numpy as np, pandas as pd\nimport os, random\nfrom katlas.data import *\nfrom katlas.train import *\nfrom fastai.vision.all import *\nfrom katlas.dnn import *\n\n\nseed_everything()\n\n\ndef_device\n\n'cuda'",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#data",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#data",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Data",
    "text": "Data\n\ndf_t5=pd.read_parquet('train/pspa_t5.parquet').reset_index()\ndf_esm=pd.read_parquet('train/pspa_esm.parquet').reset_index()\ndf_onehot = pd.read_parquet('train/pspa_onehot.parquet').reset_index()\ndf_onehot_pca = pd.read_parquet('train/pspa_onehot_pca.parquet').reset_index()\n\n\n(df_onehot['index'] == df_esm['index']).value_counts()\n\nindex\nTrue    368\nName: count, dtype: int64\n\n\n\n(df_t5['index'] == df_esm['index']).value_counts()\n\nindex\nTrue    368\nName: count, dtype: int64\n\n\n\nt5_col = df_t5.columns[df_t5.columns.str.startswith('T5_')]\n\n\nt5_col\n\nIndex(['T5_0', 'T5_1', 'T5_2', 'T5_3', 'T5_4', 'T5_5', 'T5_6', 'T5_7', 'T5_8',\n       'T5_9',\n       ...\n       'T5_1014', 'T5_1015', 'T5_1016', 'T5_1017', 'T5_1018', 'T5_1019',\n       'T5_1020', 'T5_1021', 'T5_1022', 'T5_1023'],\n      dtype='object', length=1024)\n\n\n\nesm_col = df_esm.columns[df_esm.columns.str.startswith('esm_')]\n\n\nesm_col\n\nIndex(['esm_0', 'esm_1', 'esm_2', 'esm_3', 'esm_4', 'esm_5', 'esm_6', 'esm_7',\n       'esm_8', 'esm_9',\n       ...\n       'esm_1270', 'esm_1271', 'esm_1272', 'esm_1273', 'esm_1274', 'esm_1275',\n       'esm_1276', 'esm_1277', 'esm_1278', 'esm_1279'],\n      dtype='object', length=1280)\n\n\n\ntarget_col = df_t5.columns[~df_t5.columns.isin(t5_col)][1:]\n\n\ntarget_col\n\nIndex(['-5P', '-4P', '-3P', '-2P', '-1P', '0P', '1P', '2P', '3P', '4P',\n       ...\n       '-5pY', '-4pY', '-3pY', '-2pY', '-1pY', '0pY', '1pY', '2pY', '3pY',\n       '4pY'],\n      dtype='object', length=230)\n\n\n\nonehot_col = df_onehot.columns[~df_onehot.columns.isin(target_col)][1:]\n\n\nonehot_col\n\nIndex(['65_-', '65_A', '65_C', '65_D', '65_E', '65_F', '65_G', '65_H', '65_I',\n       '65_K',\n       ...\n       '3192_M', '3192_N', '3192_P', '3192_Q', '3192_R', '3192_S', '3192_T',\n       '3192_V', '3192_W', '3192_Y'],\n      dtype='object', length=6849)\n\n\n\nonehot_pca_col = df_onehot_pca.columns[df_onehot_pca.columns.str.startswith('PCA')]\n\n\nonehot_pca_col\n\nIndex(['PCA1', 'PCA2', 'PCA3', 'PCA4', 'PCA5', 'PCA6', 'PCA7', 'PCA8', 'PCA9',\n       'PCA10',\n       ...\n       'PCA991', 'PCA992', 'PCA993', 'PCA994', 'PCA995', 'PCA996', 'PCA997',\n       'PCA998', 'PCA999', 'PCA1000'],\n      dtype='object', length=1000)\n\n\n\ninfo=Data.get_kinase_info()\n\ninfo = info[info.pseudo=='0']\n\ninfo = info[info.kd_ID.notna()]\n\nsubfamily_map = info[['kd_ID','subfamily']].drop_duplicates().set_index('kd_ID')['subfamily']\nfamily_map = info[['kd_ID','family']].drop_duplicates().set_index('kd_ID')['family']\ngroup_map = info[['kd_ID','group']].drop_duplicates().set_index('kd_ID')['group']\n\npspa_info = pd.DataFrame(df_t5['index'].tolist(),columns=['kinase'])\n\npspa_info['subfamily'] = pspa_info.kinase.map(subfamily_map)\npspa_info['family'] = pspa_info.kinase.map(family_map)\npspa_info['group'] = pspa_info.kinase.map(group_map)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#split",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#split",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Split",
    "text": "Split\n\nsplits = get_splits(pspa_info, group='group',nfold=9)\n\nsplit0 = splits[0]\n\nGroupKFold(n_splits=9, random_state=None, shuffle=False)\n# group in train set: 8\n# group in test set: 1",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#dataset",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#dataset",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Dataset",
    "text": "Dataset\n\n# dataset\nds_t5 = GeneralDataset(df_t5,t5_col,target_col)\nds_esm = GeneralDataset(df_esm,esm_col,target_col)\nds_onehot = GeneralDataset(df_onehot,onehot_col,target_col)\nds_onehot_pca = GeneralDataset(df_onehot_pca,onehot_pca_col,target_col)\n\n\nlen(ds_t5)\n\n368\n\n\n\ndl_t5 = DataLoader(ds_t5, batch_size=64, shuffle=True)\ndl_esm = DataLoader(ds_esm, batch_size=64, shuffle=True)\ndl_onehot = DataLoader(ds_onehot, batch_size=64, shuffle=True)\ndl_onehot_pca = DataLoader(ds_onehot_pca, batch_size=64, shuffle=True)\n\n\nxb,yb = next(iter(dl_t5))\n\nxb.shape,yb.shape\n\n(torch.Size([64, 1024]), torch.Size([64, 23, 10]))",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#model",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#model",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Model",
    "text": "Model\n\nn_t5 = len(t5_col)\nn_esm = len(esm_col)\nn_onehot = len(onehot_col)\nn_onehot_pca = len(onehot_pca_col)\nn_target = len(target_col)\n\n\nn_t5,n_esm,n_onehot,n_onehot_pca\n\n(1024, 1280, 6849, 1000)\n\n\n\n# def get_cnn(): return PSSM_model(n_feature,n_target,model='CNN')\n\ndef get_cnn_t5(): return PSSM_model(n_t5,n_target,model='CNN')\ndef get_cnn_esm(): return PSSM_model(n_esm,n_target,model='CNN')\ndef get_cnn_onehot(): return PSSM_model(n_onehot,n_target,model='CNN')\ndef get_cnn_onehot_pca(): return PSSM_model(n_onehot_pca,n_target,model='CNN')\n\n\nmodel = get_cnn_t5()\n\n\nlogits= model(xb)\n\n\nlogits.shape\n\ntorch.Size([64, 23, 10])",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#loss",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#loss",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Loss",
    "text": "Loss\n\nCE(logits,yb)\n\ntensor(3.3157, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#metrics",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#metrics",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Metrics",
    "text": "Metrics\n\nKLD(logits,yb)\n\ntensor(0.5744, grad_fn=&lt;MeanBackward0&gt;)\n\n\n\nJSD(logits,yb)\n\ntensor(0.1175, grad_fn=&lt;MeanBackward0&gt;)",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#cv-train",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#cv-train",
    "title": "DL training: Feature comparison on CNN model",
    "section": "CV train",
    "text": "CV train\n\ncross-validation\n\n\noof_t5 = train_dl_cv(df_t5,t5_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_t5,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.265647\n3.142609\n0.404048\n0.081247\n00:01\n\n\n1\n3.223042\n3.159432\n0.420871\n0.084551\n00:00\n\n\n2\n3.185979\n3.188326\n0.449765\n0.093861\n00:00\n\n\n3\n3.161986\n3.216524\n0.477963\n0.093619\n00:00\n\n\n4\n3.139796\n3.263382\n0.524821\n0.094843\n00:00\n\n\n5\n3.121998\n3.365554\n0.626993\n0.100610\n00:00\n\n\n6\n3.081605\n3.490378\n0.751817\n0.110248\n00:00\n\n\n7\n3.036093\n3.435781\n0.697220\n0.096045\n00:00\n\n\n8\n2.995330\n3.547961\n0.809401\n0.095060\n00:00\n\n\n9\n2.961592\n3.593616\n0.855055\n0.096466\n00:00\n\n\n10\n2.933471\n3.600523\n0.861963\n0.094996\n00:00\n\n\n11\n2.909601\n3.590640\n0.852079\n0.094011\n00:00\n\n\n12\n2.890588\n3.624627\n0.886067\n0.095667\n00:00\n\n\n13\n2.874250\n3.621842\n0.883281\n0.093074\n00:00\n\n\n14\n2.860559\n3.642438\n0.903877\n0.094680\n00:00\n\n\n15\n2.849265\n3.640604\n0.902043\n0.093936\n00:00\n\n\n16\n2.839526\n3.647106\n0.908545\n0.094358\n00:00\n\n\n17\n2.830861\n3.654265\n0.915704\n0.094701\n00:00\n\n\n18\n2.823612\n3.653282\n0.914721\n0.094696\n00:00\n\n\n19\n2.817443\n3.651935\n0.913374\n0.094722\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.202563\n3.126681\n0.367288\n0.080953\n00:00\n\n\n1\n3.096495\n2.987177\n0.227784\n0.058128\n00:00\n\n\n2\n3.020704\n2.896720\n0.137328\n0.032520\n00:00\n\n\n3\n2.977764\n2.916249\n0.156856\n0.036941\n00:00\n\n\n4\n2.950588\n2.900061\n0.140669\n0.032257\n00:00\n\n\n5\n2.930088\n2.912244\n0.152851\n0.035243\n00:00\n\n\n6\n2.911221\n2.882244\n0.122852\n0.028578\n00:00\n\n\n7\n2.896883\n2.888497\n0.129105\n0.029880\n00:00\n\n\n8\n2.883235\n2.879527\n0.120135\n0.028295\n00:00\n\n\n9\n2.869442\n2.870536\n0.111143\n0.025767\n00:00\n\n\n10\n2.856844\n2.872699\n0.113306\n0.026387\n00:00\n\n\n11\n2.845950\n2.875445\n0.116052\n0.026841\n00:00\n\n\n12\n2.838449\n2.868856\n0.109463\n0.025458\n00:00\n\n\n13\n2.831044\n2.868054\n0.108661\n0.025295\n00:00\n\n\n14\n2.823496\n2.874786\n0.115393\n0.026861\n00:00\n\n\n15\n2.816517\n2.870229\n0.110837\n0.025839\n00:00\n\n\n16\n2.810994\n2.868846\n0.109454\n0.025484\n00:00\n\n\n17\n2.805729\n2.868922\n0.109530\n0.025440\n00:00\n\n\n18\n2.801781\n2.868556\n0.109163\n0.025403\n00:00\n\n\n19\n2.798228\n2.867560\n0.108168\n0.025145\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.193643\n3.129775\n0.413172\n0.088697\n00:00\n\n\n1\n3.091510\n2.970952\n0.254349\n0.061493\n00:00\n\n\n2\n3.019390\n2.939329\n0.222726\n0.047996\n00:00\n\n\n3\n2.979136\n2.997280\n0.280677\n0.057836\n00:00\n\n\n4\n2.955849\n2.856279\n0.139675\n0.032778\n00:00\n\n\n5\n2.937262\n2.881608\n0.165005\n0.037116\n00:00\n\n\n6\n2.919667\n2.847731\n0.131128\n0.030217\n00:00\n\n\n7\n2.905293\n2.839630\n0.123026\n0.028822\n00:00\n\n\n8\n2.891868\n2.834224\n0.117620\n0.027419\n-1:59:59\n\n\n9\n2.879336\n2.883239\n0.166636\n0.039591\n00:00\n\n\n10\n2.866813\n2.858723\n0.142120\n0.032910\n00:00\n\n\n11\n2.855484\n2.848410\n0.131807\n0.030241\n00:00\n\n\n12\n2.845427\n2.873513\n0.156910\n0.036242\n00:00\n\n\n13\n2.836359\n2.847939\n0.131335\n0.030619\n00:00\n\n\n14\n2.828688\n2.843345\n0.126741\n0.029227\n00:00\n\n\n15\n2.822182\n2.849235\n0.132632\n0.030728\n00:00\n\n\n16\n2.816315\n2.848452\n0.131849\n0.030454\n00:00\n\n\n17\n2.811537\n2.849880\n0.133277\n0.030673\n00:00\n\n\n18\n2.807543\n2.854661\n0.138057\n0.031727\n00:00\n\n\n19\n2.803862\n2.853885\n0.137282\n0.031627\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.207944\n3.141091\n0.449947\n0.093460\n00:00\n\n\n1\n3.110341\n3.029324\n0.338180\n0.076213\n00:00\n\n\n2\n3.034141\n2.932320\n0.241176\n0.049031\n00:00\n\n\n3\n2.993638\n2.946054\n0.254910\n0.050688\n00:00\n\n\n4\n2.968643\n2.946317\n0.255174\n0.049163\n00:00\n\n\n5\n2.946927\n2.940749\n0.249605\n0.046374\n00:00\n\n\n6\n2.926885\n2.924870\n0.233727\n0.044772\n00:00\n\n\n7\n2.909749\n2.939194\n0.248050\n0.045244\n00:00\n\n\n8\n2.893957\n2.910057\n0.218914\n0.042975\n00:00\n\n\n9\n2.879583\n2.939824\n0.248680\n0.046253\n00:00\n\n\n10\n2.866916\n2.941156\n0.250012\n0.047198\n00:00\n\n\n11\n2.856293\n2.933166\n0.242022\n0.045542\n00:00\n\n\n12\n2.847124\n2.937057\n0.245913\n0.046275\n00:00\n\n\n13\n2.838420\n2.938343\n0.247199\n0.046922\n00:00\n\n\n14\n2.831244\n2.940233\n0.249089\n0.047545\n00:00\n\n\n15\n2.825087\n2.944092\n0.252948\n0.047802\n00:00\n\n\n16\n2.819351\n2.945658\n0.254514\n0.047995\n00:00\n\n\n17\n2.814262\n2.940202\n0.249058\n0.046777\n00:00\n\n\n18\n2.810476\n2.940670\n0.249527\n0.046865\n00:00\n\n\n19\n2.806732\n2.938628\n0.247484\n0.046366\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.193083\n3.121557\n0.332112\n0.073863\n00:00\n\n\n1\n3.084162\n2.954197\n0.164753\n0.042711\n00:00\n\n\n2\n3.010259\n2.942940\n0.153495\n0.035771\n00:00\n\n\n3\n2.970550\n2.977695\n0.188250\n0.042826\n00:00\n\n\n4\n2.945946\n2.932550\n0.143106\n0.032621\n00:00\n\n\n5\n2.929771\n2.907203\n0.117758\n0.027932\n00:00\n\n\n6\n2.910526\n2.899911\n0.110467\n0.025754\n00:00\n\n\n7\n2.892773\n2.916562\n0.127117\n0.028903\n00:00\n\n\n8\n2.879743\n2.905592\n0.116148\n0.026998\n00:00\n\n\n9\n2.866278\n2.908514\n0.119069\n0.027786\n00:00\n\n\n10\n2.854042\n2.905393\n0.115948\n0.026859\n00:00\n\n\n11\n2.843414\n2.904994\n0.115549\n0.026965\n00:00\n\n\n12\n2.833833\n2.897970\n0.108525\n0.025182\n00:00\n\n\n13\n2.825915\n2.899413\n0.109969\n0.025357\n00:00\n\n\n14\n2.818082\n2.897056\n0.107612\n0.024913\n00:00\n\n\n15\n2.811066\n2.897897\n0.108452\n0.025036\n00:00\n\n\n16\n2.805139\n2.896160\n0.106715\n0.024646\n00:00\n\n\n17\n2.800325\n2.896326\n0.106882\n0.024691\n00:00\n\n\n18\n2.795776\n2.896716\n0.107271\n0.024781\n00:00\n\n\n19\n2.792595\n2.896498\n0.107053\n0.024761\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold5------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.191223\n3.125971\n0.337161\n0.074101\n00:00\n\n\n1\n3.084095\n2.968137\n0.179327\n0.046755\n00:00\n\n\n2\n3.009351\n2.993795\n0.204984\n0.046834\n00:00\n\n\n3\n2.975441\n2.935275\n0.146464\n0.035559\n00:00\n\n\n4\n2.952728\n2.906648\n0.117838\n0.029097\n00:00\n\n\n5\n2.933139\n2.887461\n0.098650\n0.024654\n00:00\n\n\n6\n2.914009\n2.891163\n0.102352\n0.025090\n00:00\n\n\n7\n2.896947\n2.894362\n0.105552\n0.025792\n00:00\n\n\n8\n2.880326\n2.898649\n0.109838\n0.026552\n00:00\n\n\n9\n2.865264\n2.895405\n0.106595\n0.026206\n-1:59:59\n\n\n10\n2.852518\n2.892293\n0.103482\n0.025411\n00:00\n\n\n11\n2.840988\n2.883369\n0.094558\n0.023256\n00:00\n\n\n12\n2.830953\n2.888999\n0.100188\n0.024492\n00:00\n\n\n13\n2.822403\n2.888226\n0.099416\n0.024353\n00:00\n\n\n14\n2.814830\n2.888407\n0.099596\n0.024432\n00:00\n\n\n15\n2.808502\n2.886997\n0.098186\n0.024032\n00:00\n\n\n16\n2.802773\n2.887533\n0.098723\n0.024249\n00:00\n\n\n17\n2.797982\n2.883697\n0.094887\n0.023295\n00:00\n\n\n18\n2.793947\n2.884220\n0.095410\n0.023388\n00:00\n\n\n19\n2.790855\n2.883040\n0.094230\n0.023095\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold6------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.203619\n3.121918\n0.306652\n0.069884\n00:00\n\n\n1\n3.089997\n2.956834\n0.141568\n0.037513\n00:00\n\n\n2\n3.015747\n2.923789\n0.108523\n0.025009\n00:00\n\n\n3\n2.973150\n2.941699\n0.126433\n0.029847\n00:00\n\n\n4\n2.948111\n2.920527\n0.105260\n0.024720\n00:00\n\n\n5\n2.928955\n2.909259\n0.093993\n0.021972\n00:00\n\n\n6\n2.909893\n2.905155\n0.089889\n0.021540\n00:00\n\n\n7\n2.892313\n2.922608\n0.107342\n0.024919\n00:00\n\n\n8\n2.876400\n2.927285\n0.112019\n0.026551\n00:00\n\n\n9\n2.861295\n2.911070\n0.095804\n0.022932\n00:00\n\n\n10\n2.848656\n2.917730\n0.102464\n0.024213\n00:00\n\n\n11\n2.838045\n2.910637\n0.095371\n0.022812\n00:00\n\n\n12\n2.828543\n2.917434\n0.102168\n0.024414\n00:00\n\n\n13\n2.820406\n2.916175\n0.100909\n0.023967\n00:00\n\n\n14\n2.813365\n2.916811\n0.101544\n0.024145\n00:00\n\n\n15\n2.806840\n2.910940\n0.095674\n0.022752\n00:00\n\n\n16\n2.801304\n2.911899\n0.096632\n0.022935\n00:00\n\n\n17\n2.796986\n2.920983\n0.105716\n0.024482\n00:00\n\n\n18\n2.793097\n2.911241\n0.095975\n0.022843\n00:00\n\n\n19\n2.789752\n2.909681\n0.094414\n0.022465\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold7------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.199715\n3.125819\n0.463774\n0.099700\n00:00\n\n\n1\n3.084667\n2.961773\n0.299728\n0.067936\n00:00\n\n\n2\n3.013755\n2.959561\n0.297516\n0.064850\n00:00\n\n\n3\n2.980244\n3.010867\n0.348822\n0.071755\n00:00\n\n\n4\n2.960497\n3.011438\n0.349393\n0.073356\n00:00\n\n\n5\n2.937192\n3.053991\n0.391946\n0.081665\n00:00\n\n\n6\n2.913795\n2.971227\n0.309182\n0.067685\n00:00\n\n\n7\n2.894401\n2.922726\n0.260681\n0.059278\n00:00\n\n\n8\n2.877291\n2.889860\n0.227814\n0.052599\n00:00\n\n\n9\n2.863354\n2.906056\n0.244011\n0.056762\n00:00\n\n\n10\n2.851456\n2.948015\n0.285970\n0.063813\n00:00\n\n\n11\n2.840680\n2.919197\n0.257152\n0.059050\n00:00\n\n\n12\n2.831073\n2.924233\n0.262188\n0.059024\n00:00\n\n\n13\n2.822868\n2.914097\n0.252052\n0.057968\n00:00\n\n\n14\n2.816051\n2.924426\n0.262381\n0.059423\n00:00\n\n\n15\n2.809698\n2.926474\n0.264429\n0.060345\n00:00\n\n\n16\n2.804873\n2.925350\n0.263305\n0.059481\n00:00\n\n\n17\n2.800674\n2.930919\n0.268874\n0.060678\n00:00\n\n\n18\n2.797033\n2.928454\n0.266409\n0.060319\n00:00\n\n\n19\n2.794031\n2.929961\n0.267916\n0.060498\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold8------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.204548\n3.130516\n0.332384\n0.072145\n00:00\n\n\n1\n3.086863\n2.963805\n0.165674\n0.039414\n00:00\n\n\n2\n3.013082\n2.931495\n0.133363\n0.028549\n00:00\n\n\n3\n2.972725\n2.921883\n0.123751\n0.026929\n00:00\n\n\n4\n2.949337\n2.924575\n0.126443\n0.027342\n00:00\n\n\n5\n2.929606\n2.938754\n0.140622\n0.029565\n00:00\n\n\n6\n2.907469\n2.928634\n0.130502\n0.028092\n00:00\n\n\n7\n2.891385\n2.991267\n0.193135\n0.042524\n00:00\n\n\n8\n2.875030\n2.937675\n0.139543\n0.031085\n00:00\n\n\n9\n2.861556\n3.244176\n0.446044\n0.061041\n-1:59:59\n\n\n10\n2.849376\n3.033440\n0.235308\n0.041062\n00:00\n\n\n11\n2.839188\n3.015007\n0.216875\n0.037495\n00:00\n\n\n12\n2.829741\n3.001976\n0.203844\n0.037402\n00:00\n\n\n13\n2.821286\n2.993891\n0.195759\n0.036398\n00:00\n\n\n14\n2.815274\n3.024797\n0.226665\n0.037667\n00:00\n\n\n15\n2.809055\n3.031073\n0.232941\n0.037450\n00:00\n\n\n16\n2.803440\n3.011022\n0.212890\n0.036360\n00:00\n\n\n17\n2.798656\n3.007020\n0.208888\n0.036344\n00:00\n\n\n18\n2.795232\n3.034969\n0.236837\n0.037165\n00:00\n\n\n19\n2.791856\n3.020481\n0.222349\n0.036640\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_esm = train_dl_cv(df_esm,esm_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_esm,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.264869\n3.136897\n0.398337\n0.080906\n00:00\n\n\n1\n3.217183\n3.158689\n0.420129\n0.083298\n00:00\n\n\n2\n3.185448\n3.175242\n0.436681\n0.091017\n00:00\n\n\n3\n3.167979\n3.221153\n0.482592\n0.094919\n00:00\n\n\n4\n3.154100\n3.221832\n0.483271\n0.091278\n00:00\n\n\n5\n3.117338\n3.316915\n0.578354\n0.099876\n00:00\n\n\n6\n3.072603\n3.407976\n0.669415\n0.101000\n00:00\n\n\n7\n3.027419\n3.488302\n0.749741\n0.101484\n00:00\n\n\n8\n2.988770\n3.563498\n0.824937\n0.102865\n00:00\n\n\n9\n2.956225\n3.565761\n0.827200\n0.100375\n00:00\n\n\n10\n2.929342\n3.583453\n0.844892\n0.099281\n00:00\n\n\n11\n2.907108\n3.606526\n0.867965\n0.102185\n00:00\n\n\n12\n2.888310\n3.608578\n0.870016\n0.100652\n00:00\n\n\n13\n2.872570\n3.615547\n0.876986\n0.099283\n00:00\n\n\n14\n2.859529\n3.621958\n0.883397\n0.099150\n00:00\n\n\n15\n2.847852\n3.625345\n0.886784\n0.099454\n00:00\n\n\n16\n2.837972\n3.625224\n0.886664\n0.099652\n00:00\n\n\n17\n2.829673\n3.625283\n0.886722\n0.099333\n00:00\n\n\n18\n2.822563\n3.627709\n0.889148\n0.099345\n00:00\n\n\n19\n2.816700\n3.625107\n0.886546\n0.099251\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.193581\n3.120010\n0.360617\n0.080228\n00:00\n\n\n1\n3.084519\n2.978762\n0.219370\n0.055952\n00:00\n\n\n2\n3.013452\n2.900385\n0.140992\n0.033519\n00:00\n\n\n3\n2.977241\n2.921838\n0.162445\n0.038445\n00:00\n\n\n4\n2.955385\n2.901993\n0.142601\n0.033416\n00:00\n\n\n5\n2.934080\n2.874330\n0.114937\n0.027168\n00:00\n\n\n6\n2.914432\n2.875653\n0.116260\n0.027577\n00:00\n\n\n7\n2.898649\n2.873714\n0.114322\n0.026822\n00:00\n\n\n8\n2.884012\n2.866899\n0.107507\n0.025204\n00:00\n\n\n9\n2.872340\n2.869269\n0.109877\n0.025642\n00:00\n\n\n10\n2.859931\n2.878062\n0.118670\n0.027873\n00:00\n\n\n11\n2.849241\n2.868064\n0.108672\n0.025247\n00:00\n\n\n12\n2.839279\n2.862002\n0.102609\n0.024077\n00:00\n\n\n13\n2.830748\n2.858560\n0.099167\n0.023196\n00:00\n\n\n14\n2.824155\n2.868220\n0.108827\n0.025510\n00:00\n\n\n15\n2.817403\n2.866775\n0.107382\n0.025029\n00:00\n\n\n16\n2.811302\n2.861741\n0.102348\n0.023998\n00:00\n\n\n17\n2.806031\n2.860055\n0.100662\n0.023584\n00:00\n\n\n18\n2.802316\n2.859905\n0.100513\n0.023591\n00:00\n\n\n19\n2.798471\n2.860417\n0.101025\n0.023671\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.202004\n3.115519\n0.398916\n0.087196\n00:00\n\n\n1\n3.087065\n2.949936\n0.233333\n0.057611\n00:00\n\n\n2\n3.018293\n2.917029\n0.200425\n0.044855\n00:00\n\n\n3\n2.982141\n2.866996\n0.150393\n0.034669\n00:00\n\n\n4\n2.967630\n2.867355\n0.150751\n0.034402\n00:00\n\n\n5\n2.947072\n2.836027\n0.119424\n0.027516\n00:00\n\n\n6\n2.927675\n2.837569\n0.120966\n0.027518\n00:00\n\n\n7\n2.910500\n2.843097\n0.126494\n0.028759\n00:00\n\n\n8\n2.894355\n2.836293\n0.119690\n0.027306\n00:00\n\n\n9\n2.880376\n2.854691\n0.138088\n0.030649\n00:00\n\n\n10\n2.867968\n2.848921\n0.132318\n0.029835\n00:00\n\n\n11\n2.857406\n2.853977\n0.137374\n0.030709\n-1:59:59\n\n\n12\n2.847581\n2.839761\n0.123158\n0.027789\n00:00\n\n\n13\n2.839229\n2.837915\n0.121312\n0.026970\n00:00\n\n\n14\n2.832961\n2.846002\n0.129399\n0.028907\n00:00\n\n\n15\n2.826205\n2.841858\n0.125255\n0.027834\n00:00\n\n\n16\n2.820190\n2.847916\n0.131313\n0.029319\n00:00\n\n\n17\n2.814878\n2.847655\n0.131052\n0.029191\n00:00\n\n\n18\n2.810926\n2.846968\n0.130365\n0.029018\n00:00\n\n\n19\n2.807157\n2.847460\n0.130857\n0.029080\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.202962\n3.118910\n0.427766\n0.090941\n00:00\n\n\n1\n3.089748\n2.952767\n0.261623\n0.059470\n00:00\n\n\n2\n3.022268\n2.934290\n0.243146\n0.048406\n00:00\n\n\n3\n2.988155\n2.941152\n0.250008\n0.050903\n00:00\n\n\n4\n2.967207\n2.961673\n0.270530\n0.051580\n00:00\n\n\n5\n2.951866\n2.943200\n0.252056\n0.047716\n00:00\n\n\n6\n2.932044\n2.940075\n0.248931\n0.046150\n00:00\n\n\n7\n2.913869\n2.947825\n0.256681\n0.047069\n00:00\n\n\n8\n2.898216\n2.935129\n0.243985\n0.044736\n00:00\n\n\n9\n2.884012\n2.921401\n0.230257\n0.044297\n00:00\n\n\n10\n2.873033\n2.932486\n0.241342\n0.044664\n00:00\n\n\n11\n2.862779\n2.934337\n0.243193\n0.042859\n00:00\n\n\n12\n2.855475\n2.928978\n0.237835\n0.043229\n00:00\n\n\n13\n2.846623\n2.926791\n0.235647\n0.043191\n00:00\n\n\n14\n2.838845\n2.932529\n0.241386\n0.043511\n00:00\n\n\n15\n2.831529\n2.926085\n0.234941\n0.042803\n00:00\n\n\n16\n2.825729\n2.924322\n0.233178\n0.042513\n00:00\n\n\n17\n2.820391\n2.927167\n0.236023\n0.042804\n00:00\n\n\n18\n2.816059\n2.926176\n0.235032\n0.042715\n00:00\n\n\n19\n2.812433\n2.925177\n0.234033\n0.042523\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.206472\n3.133298\n0.343854\n0.075123\n00:00\n\n\n1\n3.087475\n2.981167\n0.191722\n0.049670\n00:00\n\n\n2\n3.015009\n2.916325\n0.126880\n0.029111\n00:00\n\n\n3\n2.975545\n2.920883\n0.131439\n0.031650\n00:00\n\n\n4\n2.957316\n2.924036\n0.134591\n0.031509\n00:00\n\n\n5\n2.939080\n2.909500\n0.120055\n0.028545\n00:00\n\n\n6\n2.919973\n2.902207\n0.112762\n0.026220\n00:00\n\n\n7\n2.901022\n2.903212\n0.113767\n0.026729\n00:00\n\n\n8\n2.884898\n2.912332\n0.122887\n0.028784\n00:00\n\n\n9\n2.869776\n2.908447\n0.119002\n0.027865\n00:00\n\n\n10\n2.857329\n2.902042\n0.112598\n0.026547\n00:00\n\n\n11\n2.845674\n2.895880\n0.106435\n0.024948\n00:00\n\n\n12\n2.835716\n2.890357\n0.100912\n0.023719\n00:00\n\n\n13\n2.827060\n2.893576\n0.104131\n0.024594\n00:00\n\n\n14\n2.819177\n2.892577\n0.103132\n0.024245\n00:00\n\n\n15\n2.812434\n2.892262\n0.102817\n0.024129\n00:00\n\n\n16\n2.806125\n2.891998\n0.102553\n0.023941\n00:00\n\n\n17\n2.800571\n2.890348\n0.100904\n0.023638\n00:00\n\n\n18\n2.796558\n2.890913\n0.101468\n0.023817\n00:00\n\n\n19\n2.793637\n2.890676\n0.101231\n0.023790\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold5------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.187245\n3.128074\n0.339263\n0.073991\n00:00\n\n\n1\n3.071628\n2.986283\n0.197472\n0.051019\n00:00\n\n\n2\n3.001887\n2.903810\n0.114999\n0.027137\n00:00\n\n\n3\n2.964702\n2.911484\n0.122673\n0.029126\n00:00\n\n\n4\n2.946854\n2.900443\n0.111632\n0.027561\n00:00\n\n\n5\n2.930545\n2.896069\n0.107258\n0.026062\n00:00\n\n\n6\n2.911004\n2.905382\n0.116571\n0.028297\n00:00\n\n\n7\n2.894996\n2.917508\n0.128697\n0.030506\n00:00\n\n\n8\n2.880330\n2.887178\n0.098368\n0.024039\n00:00\n\n\n9\n2.869907\n2.887413\n0.098603\n0.023499\n00:00\n\n\n10\n2.860607\n2.886769\n0.097958\n0.024129\n00:00\n\n\n11\n2.851118\n2.878669\n0.089859\n0.022112\n00:00\n\n\n12\n2.841549\n2.873977\n0.085166\n0.020676\n00:00\n\n\n13\n2.832706\n2.876251\n0.087440\n0.021426\n-1:59:59\n\n\n14\n2.824652\n2.870506\n0.081696\n0.019807\n00:00\n\n\n15\n2.818056\n2.870589\n0.081778\n0.019995\n00:00\n\n\n16\n2.811975\n2.870715\n0.081905\n0.020023\n00:00\n\n\n17\n2.806576\n2.869968\n0.081157\n0.019824\n00:00\n\n\n18\n2.802316\n2.869475\n0.080664\n0.019710\n00:00\n\n\n19\n2.798843\n2.869548\n0.080738\n0.019745\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold6------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.188190\n3.114348\n0.299082\n0.069039\n00:00\n\n\n1\n3.063660\n2.943110\n0.127844\n0.033852\n00:00\n\n\n2\n2.997336\n2.917790\n0.102524\n0.024700\n00:00\n\n\n3\n2.964889\n2.925680\n0.110414\n0.026368\n00:00\n\n\n4\n2.947123\n3.018301\n0.203035\n0.039962\n00:00\n\n\n5\n2.928940\n2.961387\n0.146121\n0.031864\n00:00\n\n\n6\n2.911475\n2.932888\n0.117622\n0.027504\n00:00\n\n\n7\n2.892783\n2.941010\n0.125743\n0.028919\n00:00\n\n\n8\n2.877175\n2.932807\n0.117541\n0.027764\n00:00\n\n\n9\n2.863183\n2.920175\n0.104909\n0.024967\n00:00\n\n\n10\n2.850916\n2.919358\n0.104092\n0.025017\n00:00\n\n\n11\n2.840048\n2.917005\n0.101738\n0.024471\n00:00\n\n\n12\n2.830450\n2.918196\n0.102930\n0.024451\n00:00\n\n\n13\n2.822036\n2.934537\n0.119270\n0.028025\n00:00\n\n\n14\n2.814883\n2.968319\n0.153053\n0.034001\n00:00\n\n\n15\n2.808351\n2.918659\n0.103393\n0.024519\n00:00\n\n\n16\n2.802855\n2.918992\n0.103726\n0.024673\n00:00\n\n\n17\n2.797942\n2.933373\n0.118107\n0.027699\n00:00\n\n\n18\n2.793902\n2.963440\n0.148174\n0.033079\n00:00\n\n\n19\n2.790388\n3.046306\n0.231040\n0.043707\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold7------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.187940\n3.132055\n0.470010\n0.100920\n00:00\n\n\n1\n3.072927\n2.944816\n0.282771\n0.063020\n00:00\n\n\n2\n3.001055\n2.929518\n0.267473\n0.059566\n00:00\n\n\n3\n2.969772\n2.948422\n0.286377\n0.063104\n00:00\n\n\n4\n2.948040\n2.926207\n0.264161\n0.057537\n00:00\n\n\n5\n2.931400\n2.963588\n0.301542\n0.064320\n00:00\n\n\n6\n2.909764\n2.960949\n0.298904\n0.064112\n00:00\n\n\n7\n2.895195\n3.003662\n0.341618\n0.070389\n00:00\n\n\n8\n2.879205\n3.000879\n0.338834\n0.070586\n00:00\n\n\n9\n2.865099\n3.004148\n0.342102\n0.070332\n00:00\n\n\n10\n2.852739\n2.982781\n0.320736\n0.066774\n00:00\n\n\n11\n2.842682\n3.000234\n0.338189\n0.069315\n00:00\n\n\n12\n2.833195\n3.006765\n0.344720\n0.070025\n00:00\n\n\n13\n2.825611\n2.998246\n0.336202\n0.068579\n00:00\n\n\n14\n2.818143\n3.008426\n0.346380\n0.071066\n00:00\n\n\n15\n2.811678\n3.001043\n0.338998\n0.069956\n00:00\n\n\n16\n2.806150\n3.001681\n0.339636\n0.070011\n00:00\n\n\n17\n2.801808\n3.003881\n0.341836\n0.070656\n00:00\n\n\n18\n2.798122\n3.011680\n0.349635\n0.072094\n00:00\n\n\n19\n2.794909\n3.004551\n0.342506\n0.070596\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold8------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.191767\n3.127610\n0.329479\n0.072123\n00:00\n\n\n1\n3.075926\n2.944713\n0.146582\n0.036049\n00:00\n\n\n2\n3.003580\n2.945038\n0.146907\n0.032734\n00:00\n\n\n3\n2.966146\n2.948486\n0.150355\n0.031666\n00:00\n\n\n4\n2.945253\n2.926992\n0.128860\n0.028842\n00:00\n\n\n5\n2.926334\n2.911107\n0.112976\n0.024992\n00:00\n\n\n6\n2.906564\n2.908641\n0.110509\n0.024338\n00:00\n\n\n7\n2.889611\n2.914251\n0.116119\n0.025042\n00:00\n\n\n8\n2.875487\n2.905566\n0.107434\n0.023223\n00:00\n\n\n9\n2.862854\n2.904928\n0.106797\n0.023156\n00:00\n\n\n10\n2.850500\n2.917810\n0.119679\n0.026055\n00:00\n\n\n11\n2.840436\n2.902700\n0.104568\n0.023097\n00:00\n\n\n12\n2.831009\n2.902440\n0.104309\n0.022983\n-1:59:59\n\n\n13\n2.822627\n2.904006\n0.105875\n0.023260\n00:00\n\n\n14\n2.815531\n2.908263\n0.110131\n0.023731\n00:00\n\n\n15\n2.809269\n2.905061\n0.106929\n0.023299\n00:00\n\n\n16\n2.804316\n2.906749\n0.108617\n0.023572\n00:00\n\n\n17\n2.799786\n2.906028\n0.107896\n0.023450\n00:00\n\n\n18\n2.796355\n2.905400\n0.107269\n0.023268\n00:00\n\n\n19\n2.793621\n2.904385\n0.106253\n0.023061\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_onehot = train_dl_cv(df_onehot,onehot_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_onehot,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.277120\n3.133921\n0.395361\n0.080811\n00:00\n\n\n1\n3.220052\n3.143938\n0.405378\n0.082488\n00:00\n\n\n2\n3.172967\n3.197285\n0.458724\n0.086042\n00:00\n\n\n3\n3.142990\n3.197540\n0.458979\n0.088806\n00:00\n\n\n4\n3.120064\n3.194893\n0.456332\n0.089937\n00:00\n\n\n5\n3.082074\n3.265694\n0.527133\n0.094442\n00:00\n\n\n6\n3.037489\n3.350454\n0.611893\n0.096622\n00:00\n\n\n7\n2.994622\n3.459473\n0.720912\n0.097649\n00:00\n\n\n8\n2.958157\n3.513486\n0.774925\n0.095750\n00:00\n\n\n9\n2.927430\n3.566482\n0.827921\n0.097972\n00:00\n\n\n10\n2.902424\n3.635440\n0.896879\n0.101687\n00:00\n\n\n11\n2.881415\n3.707916\n0.969355\n0.106543\n00:00\n\n\n12\n2.864123\n3.819097\n1.080537\n0.124386\n00:00\n\n\n13\n2.849641\n3.935453\n1.196892\n0.135377\n00:00\n\n\n14\n2.837691\n3.968906\n1.230345\n0.146021\n00:00\n\n\n15\n2.827890\n4.076715\n1.338154\n0.155096\n00:00\n\n\n16\n2.819179\n4.027257\n1.288697\n0.148987\n00:00\n\n\n17\n2.811810\n4.020642\n1.282081\n0.148653\n00:00\n\n\n18\n2.805801\n3.952586\n1.214025\n0.138949\n00:00\n\n\n19\n2.800838\n3.988277\n1.249717\n0.146054\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.210148\n3.139912\n0.380520\n0.082572\n00:00\n\n\n1\n3.076796\n3.013317\n0.253924\n0.063400\n00:00\n\n\n2\n3.000978\n2.891074\n0.131682\n0.031530\n00:00\n\n\n3\n2.960962\n2.920046\n0.160653\n0.037774\n00:00\n\n\n4\n2.935330\n2.882944\n0.123551\n0.028969\n00:00\n\n\n5\n2.912577\n2.878306\n0.118913\n0.027573\n00:00\n\n\n6\n2.891449\n2.862408\n0.103015\n0.024382\n00:00\n\n\n7\n2.874047\n2.857084\n0.097691\n0.023248\n00:00\n\n\n8\n2.859166\n2.862403\n0.103011\n0.024601\n00:00\n\n\n9\n2.845874\n2.874232\n0.114840\n0.027831\n00:00\n\n\n10\n2.834624\n2.888659\n0.129267\n0.031689\n00:00\n\n\n11\n2.825206\n2.899465\n0.140072\n0.034201\n00:00\n\n\n12\n2.817001\n2.916462\n0.157069\n0.038561\n00:00\n\n\n13\n2.809952\n2.905925\n0.146533\n0.035555\n00:00\n\n\n14\n2.803583\n2.906608\n0.147216\n0.035711\n00:00\n\n\n15\n2.798075\n2.908471\n0.149078\n0.036318\n00:00\n\n\n16\n2.793313\n2.905267\n0.145874\n0.035303\n00:00\n\n\n17\n2.789165\n2.905819\n0.146426\n0.035438\n00:00\n\n\n18\n2.785420\n2.905159\n0.145767\n0.035352\n00:00\n\n\n19\n2.782227\n2.905472\n0.146079\n0.035462\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.203027\n3.133307\n0.416704\n0.088837\n00:00\n\n\n1\n3.081909\n2.938727\n0.222124\n0.055139\n00:00\n\n\n2\n3.011248\n2.851364\n0.134761\n0.030517\n00:00\n\n\n3\n2.967336\n2.879799\n0.163196\n0.037787\n00:00\n\n\n4\n2.942564\n2.865221\n0.148617\n0.033606\n-1:59:59\n\n\n5\n2.921736\n2.856464\n0.139861\n0.031637\n00:00\n\n\n6\n2.902239\n2.856883\n0.140280\n0.031034\n00:00\n\n\n7\n2.883385\n2.848513\n0.131910\n0.029322\n00:00\n\n\n8\n2.867899\n2.851038\n0.134435\n0.030472\n00:00\n\n\n9\n2.854214\n2.868535\n0.151931\n0.034805\n00:00\n\n\n10\n2.841882\n2.876914\n0.160311\n0.036888\n00:00\n\n\n11\n2.831786\n2.883744\n0.167141\n0.038587\n00:00\n\n\n12\n2.823037\n2.896835\n0.180232\n0.042036\n00:00\n\n\n13\n2.815647\n2.907049\n0.190445\n0.044805\n00:00\n\n\n14\n2.809287\n2.923750\n0.207147\n0.048721\n00:00\n\n\n15\n2.804163\n2.922053\n0.205449\n0.048186\n00:00\n\n\n16\n2.799402\n2.926703\n0.210099\n0.049234\n00:00\n\n\n17\n2.795474\n2.927454\n0.210851\n0.049211\n00:00\n\n\n18\n2.791993\n2.922887\n0.206284\n0.048067\n00:00\n\n\n19\n2.788906\n2.934660\n0.218057\n0.050382\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.217360\n3.135256\n0.444112\n0.093500\n00:00\n\n\n1\n3.089197\n3.000559\n0.309415\n0.071229\n00:00\n\n\n2\n3.013406\n2.909544\n0.218400\n0.043400\n00:00\n\n\n3\n2.973763\n3.000403\n0.309258\n0.058953\n00:00\n\n\n4\n2.950085\n2.952441\n0.261297\n0.050864\n00:00\n\n\n5\n2.926956\n2.932818\n0.241674\n0.046230\n00:00\n\n\n6\n2.905373\n2.913712\n0.222568\n0.043278\n00:00\n\n\n7\n2.886523\n2.899899\n0.208755\n0.041040\n00:00\n\n\n8\n2.871984\n2.899730\n0.208587\n0.040406\n00:00\n\n\n9\n2.859025\n2.895478\n0.204334\n0.040991\n00:00\n\n\n10\n2.847441\n2.900883\n0.209739\n0.041914\n00:00\n\n\n11\n2.837836\n2.938530\n0.247386\n0.050021\n00:00\n\n\n12\n2.829586\n3.007871\n0.316727\n0.066030\n00:00\n\n\n13\n2.821911\n3.130609\n0.439465\n0.090029\n00:00\n\n\n14\n2.815553\n3.205676\n0.514532\n0.097538\n00:00\n\n\n15\n2.809974\n3.894821\n1.203677\n0.142054\n00:00\n\n\n16\n2.804972\n4.875163\n2.184019\n0.172196\n00:00\n\n\n17\n2.800660\n4.489316\n1.798172\n0.166581\n00:00\n\n\n18\n2.797134\n3.734024\n1.042881\n0.139437\n00:00\n\n\n19\n2.794170\n3.943503\n1.252359\n0.143880\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.221777\n3.120676\n0.331231\n0.073846\n00:01\n\n\n1\n3.079224\n2.961355\n0.171910\n0.044981\n00:00\n\n\n2\n3.000947\n2.920985\n0.131540\n0.031555\n00:00\n\n\n3\n2.962647\n2.964863\n0.175418\n0.040005\n00:00\n\n\n4\n2.940489\n2.948510\n0.159065\n0.037153\n00:00\n\n\n5\n2.917177\n2.914334\n0.124890\n0.029468\n00:00\n\n\n6\n2.894965\n2.901642\n0.112197\n0.026065\n00:00\n\n\n7\n2.875778\n2.897019\n0.107574\n0.025436\n00:00\n\n\n8\n2.859513\n2.893893\n0.104448\n0.024652\n00:00\n\n\n9\n2.845501\n2.900487\n0.111043\n0.026683\n00:00\n\n\n10\n2.833211\n2.911707\n0.122262\n0.029087\n00:00\n\n\n11\n2.823061\n2.918646\n0.129201\n0.030911\n00:00\n\n\n12\n2.814080\n2.962426\n0.172982\n0.039040\n00:00\n\n\n13\n2.806450\n3.012691\n0.223246\n0.045578\n-1:59:59\n\n\n14\n2.799661\n3.095942\n0.306497\n0.056741\n00:00\n\n\n15\n2.794147\n3.186306\n0.396861\n0.066668\n00:00\n\n\n16\n2.789003\n3.146222\n0.356777\n0.061604\n00:00\n\n\n17\n2.784820\n3.192040\n0.402595\n0.064867\n00:00\n\n\n18\n2.781168\n3.251970\n0.462525\n0.068339\n00:00\n\n\n19\n2.778569\n3.470715\n0.681270\n0.079629\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold5------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.199647\n3.140137\n0.351326\n0.075517\n00:00\n\n\n1\n3.064764\n2.972414\n0.183604\n0.047527\n00:00\n\n\n2\n2.991076\n2.917917\n0.129106\n0.031017\n00:00\n\n\n3\n2.949582\n2.947464\n0.158653\n0.038191\n00:00\n\n\n4\n2.925140\n2.909489\n0.120679\n0.028941\n00:00\n\n\n5\n2.902952\n2.904005\n0.115195\n0.027851\n00:00\n\n\n6\n2.882324\n2.890948\n0.102137\n0.024815\n00:00\n\n\n7\n2.863699\n2.894485\n0.105674\n0.025504\n00:00\n\n\n8\n2.848049\n2.904008\n0.115198\n0.028467\n00:00\n\n\n9\n2.834757\n2.911851\n0.123041\n0.030428\n00:00\n\n\n10\n2.823938\n2.918086\n0.129275\n0.032054\n00:00\n\n\n11\n2.814502\n2.924456\n0.135646\n0.033397\n00:00\n\n\n12\n2.806381\n2.936222\n0.147411\n0.035624\n00:00\n\n\n13\n2.799514\n2.932553\n0.143742\n0.035170\n00:00\n\n\n14\n2.793619\n2.931933\n0.143122\n0.035091\n00:00\n\n\n15\n2.788580\n2.929070\n0.140260\n0.034507\n00:00\n\n\n16\n2.784421\n2.931773\n0.142962\n0.035119\n00:00\n\n\n17\n2.780766\n2.931452\n0.142641\n0.035091\n00:00\n\n\n18\n2.777678\n2.929527\n0.140717\n0.034653\n00:00\n\n\n19\n2.775166\n2.930931\n0.142120\n0.034841\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold6------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.211345\n3.139642\n0.324376\n0.071962\n00:00\n\n\n1\n3.079162\n2.969423\n0.154157\n0.040900\n00:00\n\n\n2\n3.002954\n2.927417\n0.112150\n0.026776\n00:00\n\n\n3\n2.957990\n2.980102\n0.164836\n0.037336\n00:00\n\n\n4\n2.934710\n2.942456\n0.127189\n0.029204\n00:00\n\n\n5\n2.913644\n2.923435\n0.108169\n0.025080\n00:00\n\n\n6\n2.891332\n2.929808\n0.114542\n0.025729\n00:00\n\n\n7\n2.871521\n2.914588\n0.099322\n0.023127\n00:00\n\n\n8\n2.854944\n2.909274\n0.094008\n0.022614\n00:00\n\n\n9\n2.840556\n2.923026\n0.107760\n0.026119\n00:00\n\n\n10\n2.828343\n2.958011\n0.142744\n0.033875\n00:00\n\n\n11\n2.818299\n3.014986\n0.199720\n0.046344\n00:00\n\n\n12\n2.809941\n3.028631\n0.213364\n0.049657\n00:00\n\n\n13\n2.802525\n3.000083\n0.184817\n0.043963\n00:00\n\n\n14\n2.796725\n2.989132\n0.173866\n0.041270\n00:00\n\n\n15\n2.791409\n2.996987\n0.181720\n0.042921\n00:00\n\n\n16\n2.786753\n3.003397\n0.188131\n0.044358\n00:00\n\n\n17\n2.782986\n3.002526\n0.187259\n0.044141\n00:00\n\n\n18\n2.779207\n2.997455\n0.182189\n0.042945\n00:00\n\n\n19\n2.776644\n2.999060\n0.183793\n0.043442\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold7------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.207157\n3.116577\n0.454532\n0.098201\n00:21\n\n\n1\n3.068383\n2.942939\n0.280893\n0.065497\n00:00\n\n\n2\n2.993331\n2.967219\n0.305173\n0.066856\n00:02\n\n\n3\n2.952425\n2.931577\n0.269531\n0.058940\n07:28\n\n\n4\n2.924765\n2.894598\n0.232553\n0.052688\n00:00\n\n\n5\n2.902512\n2.898267\n0.236222\n0.051465\n00:00\n\n\n6\n2.884839\n2.890331\n0.228286\n0.050490\n00:00\n\n\n7\n2.869885\n2.894372\n0.232327\n0.051913\n00:00\n\n\n8\n2.855418\n2.942313\n0.280268\n0.060312\n00:00\n\n\n9\n2.841797\n3.203032\n0.540987\n0.111459\n00:00\n\n\n10\n2.830229\n3.292855\n0.630810\n0.123641\n00:00\n\n\n11\n2.820735\n3.266531\n0.604486\n0.119290\n00:00\n\n\n12\n2.812273\n3.308702\n0.646657\n0.129931\n00:00\n\n\n13\n2.805096\n3.256686\n0.594641\n0.118864\n00:00\n\n\n14\n2.799061\n3.193116\n0.531071\n0.108449\n00:00\n\n\n15\n2.793950\n3.204517\n0.542472\n0.109433\n00:00\n\n\n16\n2.789811\n3.160384\n0.498339\n0.103601\n00:01\n\n\n17\n2.786062\n3.193079\n0.531034\n0.109163\n00:00\n\n\n18\n2.782929\n3.141123\n0.479077\n0.098941\n00:01\n\n\n19\n2.780393\n3.178627\n0.516582\n0.106204\n00:01\n\n\n\n\n\n\n\n\n\n\n\n\n------fold8------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.218322\n3.154627\n0.356495\n0.075715\n00:00\n\n\n1\n3.082187\n2.948062\n0.149931\n0.037856\n00:00\n\n\n2\n3.001617\n3.049119\n0.250988\n0.055764\n00:00\n\n\n3\n2.959477\n3.161151\n0.363019\n0.079681\n00:00\n\n\n4\n2.930529\n3.053700\n0.255568\n0.054616\n00:00\n\n\n5\n2.905670\n2.989527\n0.191395\n0.042046\n00:00\n\n\n6\n2.883381\n2.934242\n0.136111\n0.030624\n00:00\n\n\n7\n2.864315\n2.923664\n0.125532\n0.027720\n00:00\n\n\n8\n2.848774\n2.965591\n0.167460\n0.039490\n00:00\n\n\n9\n2.835498\n3.717572\n0.919440\n0.118789\n00:00\n\n\n10\n2.824239\n4.831798\n2.033666\n0.155769\n00:00\n\n\n11\n2.814907\n5.116006\n2.317875\n0.170461\n00:00\n\n\n12\n2.806855\n5.010515\n2.212383\n0.169534\n00:00\n\n\n13\n2.800228\n5.589930\n2.791799\n0.186263\n00:00\n\n\n14\n2.794528\n5.756356\n2.958225\n0.184530\n00:00\n\n\n15\n2.789591\n5.471392\n2.673260\n0.172984\n00:00\n\n\n16\n2.785285\n5.211399\n2.413267\n0.165043\n00:00\n\n\n17\n2.781870\n5.124030\n2.325897\n0.165491\n00:00\n\n\n18\n2.779195\n5.127772\n2.329640\n0.169457\n00:00\n\n\n19\n2.777070\n5.340095\n2.541963\n0.172145\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n\noof_onehot_pca = train_dl_cv(df_onehot_pca,onehot_pca_col,target_col,\n                  splits = splits,\n                  model_func = get_cnn_onehot_pca,\n                  n_epoch=20,lr=3e-3)\n\n------fold0------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.294691\n3.137259\n0.398698\n0.080640\n00:00\n\n\n1\n3.263470\n3.141515\n0.402954\n0.082747\n00:00\n\n\n2\n3.223175\n3.177219\n0.438658\n0.089337\n00:00\n\n\n3\n3.183045\n3.227620\n0.489059\n0.093476\n00:00\n\n\n4\n3.142418\n3.287463\n0.548902\n0.100686\n00:00\n\n\n5\n3.100256\n3.341402\n0.602841\n0.100119\n00:00\n\n\n6\n3.054611\n3.505619\n0.767058\n0.101345\n00:00\n\n\n7\n3.011055\n3.471998\n0.733437\n0.097002\n00:00\n\n\n8\n2.974147\n3.588242\n0.849681\n0.097573\n00:00\n\n\n9\n2.943142\n3.605361\n0.866801\n0.097618\n00:00\n\n\n10\n2.917536\n3.611651\n0.873091\n0.095335\n00:00\n\n\n11\n2.895584\n3.629502\n0.890941\n0.094714\n00:00\n\n\n12\n2.876624\n3.649335\n0.910774\n0.096127\n00:00\n\n\n13\n2.860609\n3.660701\n0.922140\n0.097082\n00:00\n\n\n14\n2.847290\n3.664461\n0.925900\n0.096590\n00:00\n\n\n15\n2.836029\n3.668696\n0.930135\n0.096939\n00:00\n\n\n16\n2.826384\n3.669010\n0.930449\n0.096871\n00:00\n\n\n17\n2.818100\n3.676537\n0.937977\n0.096779\n00:00\n\n\n18\n2.811651\n3.676708\n0.938147\n0.096693\n00:00\n\n\n19\n2.805929\n3.677161\n0.938600\n0.096341\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold1------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.301871\n3.113387\n0.353994\n0.080182\n00:00\n\n\n1\n3.251986\n3.055797\n0.296404\n0.072427\n00:00\n\n\n2\n3.180077\n2.946853\n0.187460\n0.049313\n00:00\n\n\n3\n3.106059\n3.159497\n0.400104\n0.067071\n00:00\n\n\n4\n3.053151\n3.082665\n0.323272\n0.055897\n00:00\n\n\n5\n3.016690\n2.961791\n0.202398\n0.045059\n00:00\n\n\n6\n2.985151\n2.949506\n0.190114\n0.043004\n00:00\n\n\n7\n2.956095\n2.933504\n0.174111\n0.039649\n00:00\n\n\n8\n2.929397\n2.934963\n0.175571\n0.040043\n00:00\n\n\n9\n2.907381\n2.915690\n0.156297\n0.036116\n00:00\n\n\n10\n2.887776\n2.903538\n0.144146\n0.033489\n00:00\n\n\n11\n2.870944\n2.926418\n0.167025\n0.037351\n00:00\n\n\n12\n2.856064\n2.917785\n0.158392\n0.035572\n00:00\n\n\n13\n2.843407\n2.906300\n0.146907\n0.033587\n00:00\n\n\n14\n2.832056\n2.907512\n0.148120\n0.033845\n00:00\n\n\n15\n2.822417\n2.906131\n0.146738\n0.033671\n00:00\n\n\n16\n2.814583\n2.909864\n0.150471\n0.034348\n00:00\n\n\n17\n2.807935\n2.911995\n0.152602\n0.034596\n00:00\n\n\n18\n2.802130\n2.910291\n0.150898\n0.034142\n00:00\n\n\n19\n2.797422\n2.898971\n0.139578\n0.032354\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold2------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.302217\n3.133570\n0.416967\n0.090089\n00:00\n\n\n1\n3.256617\n3.091846\n0.375242\n0.085063\n00:00\n\n\n2\n3.185585\n3.058449\n0.341846\n0.079717\n00:00\n\n\n3\n3.108964\n3.085640\n0.369037\n0.067483\n00:00\n\n\n4\n3.053280\n3.206532\n0.489929\n0.074658\n-1:59:59\n\n\n5\n3.018560\n2.920109\n0.203505\n0.045472\n00:00\n\n\n6\n2.989412\n2.938208\n0.221605\n0.049293\n00:00\n\n\n7\n2.959617\n2.946715\n0.230112\n0.051988\n00:00\n\n\n8\n2.932363\n2.911540\n0.194936\n0.044599\n00:00\n\n\n9\n2.910704\n2.981530\n0.264927\n0.059324\n00:00\n\n\n10\n2.891130\n2.962162\n0.245558\n0.055606\n00:00\n\n\n11\n2.874626\n2.913973\n0.197370\n0.045975\n00:00\n\n\n12\n2.860034\n2.902319\n0.185716\n0.042663\n00:00\n\n\n13\n2.847568\n2.893028\n0.176425\n0.039844\n00:00\n\n\n14\n2.836598\n2.884434\n0.167830\n0.038216\n00:00\n\n\n15\n2.827027\n2.886871\n0.170268\n0.038664\n00:00\n\n\n16\n2.819156\n2.886121\n0.169518\n0.038627\n00:00\n\n\n17\n2.812171\n2.888980\n0.172377\n0.039150\n00:00\n\n\n18\n2.806926\n2.890533\n0.173930\n0.039448\n00:00\n\n\n19\n2.802097\n2.891819\n0.175215\n0.039755\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold3------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.299308\n3.112815\n0.421671\n0.090712\n00:00\n\n\n1\n3.251778\n3.073382\n0.382238\n0.085915\n00:00\n\n\n2\n3.179465\n3.053364\n0.362220\n0.081255\n00:00\n\n\n3\n3.106511\n3.319328\n0.628184\n0.080552\n00:00\n\n\n4\n3.065808\n3.112725\n0.421581\n0.075182\n00:00\n\n\n5\n3.036750\n2.988638\n0.297494\n0.060457\n00:00\n\n\n6\n3.005094\n3.020451\n0.329307\n0.067131\n00:00\n\n\n7\n2.974625\n3.095387\n0.404244\n0.073515\n00:00\n\n\n8\n2.946579\n3.052358\n0.361214\n0.066235\n00:00\n\n\n9\n2.923277\n2.994418\n0.303274\n0.058904\n00:00\n\n\n10\n2.901995\n2.960744\n0.269600\n0.052277\n00:00\n\n\n11\n2.885334\n2.939471\n0.248327\n0.047824\n00:00\n\n\n12\n2.869542\n2.938663\n0.247519\n0.048670\n00:00\n\n\n13\n2.856085\n2.969018\n0.277874\n0.053620\n00:00\n\n\n14\n2.845040\n2.986923\n0.295779\n0.055922\n00:00\n\n\n15\n2.835549\n2.976436\n0.285293\n0.054313\n00:00\n\n\n16\n2.827210\n2.959410\n0.268266\n0.051559\n00:00\n\n\n17\n2.820472\n2.949389\n0.258245\n0.049625\n00:00\n\n\n18\n2.815124\n2.947890\n0.256747\n0.049296\n00:00\n\n\n19\n2.810766\n2.956153\n0.265009\n0.050701\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold4------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.299725\n3.117021\n0.327577\n0.073398\n00:00\n\n\n1\n3.250774\n3.064939\n0.275494\n0.066268\n00:00\n\n\n2\n3.174958\n2.958110\n0.168665\n0.043510\n00:00\n\n\n3\n3.099215\n2.961793\n0.172348\n0.040971\n00:00\n\n\n4\n3.051188\n2.934969\n0.145524\n0.034921\n00:00\n\n\n5\n3.018962\n2.951272\n0.161827\n0.039013\n00:00\n\n\n6\n2.988851\n2.930847\n0.141403\n0.034108\n00:00\n\n\n7\n2.959735\n2.912599\n0.123154\n0.029397\n00:00\n\n\n8\n2.932398\n2.916482\n0.127037\n0.030873\n00:00\n\n\n9\n2.908323\n2.909319\n0.119874\n0.029153\n00:00\n\n\n10\n2.887608\n2.903954\n0.114509\n0.027146\n00:00\n\n\n11\n2.870060\n2.906731\n0.117286\n0.027781\n00:00\n\n\n12\n2.854917\n2.909138\n0.119693\n0.028750\n00:00\n\n\n13\n2.842772\n2.904670\n0.115226\n0.027538\n00:00\n\n\n14\n2.831243\n2.906233\n0.116789\n0.028013\n00:00\n\n\n15\n2.821458\n2.905252\n0.115808\n0.027734\n00:00\n\n\n16\n2.813246\n2.905241\n0.115796\n0.027731\n00:00\n\n\n17\n2.805741\n2.905666\n0.116221\n0.027847\n00:00\n\n\n18\n2.799681\n2.908188\n0.118743\n0.028527\n00:00\n\n\n19\n2.794784\n2.903374\n0.113929\n0.027207\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold5------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.294465\n3.135190\n0.346380\n0.075028\n00:00\n\n\n1\n3.248152\n3.124927\n0.336117\n0.073005\n00:00\n\n\n2\n3.168731\n3.020002\n0.231191\n0.056880\n00:00\n\n\n3\n3.091349\n3.233966\n0.445156\n0.074591\n00:00\n\n\n4\n3.042989\n2.996500\n0.207690\n0.044531\n00:00\n\n\n5\n3.000945\n2.983008\n0.194198\n0.045271\n00:00\n\n\n6\n2.966819\n2.952210\n0.163400\n0.038246\n00:00\n\n\n7\n2.936022\n2.951103\n0.162293\n0.035806\n00:00\n\n\n8\n2.910291\n2.929545\n0.140735\n0.031989\n00:00\n\n\n9\n2.887657\n2.920960\n0.132150\n0.031165\n00:00\n\n\n10\n2.868363\n2.915508\n0.126698\n0.030763\n00:00\n\n\n11\n2.853660\n2.912930\n0.124119\n0.030236\n00:00\n\n\n12\n2.841366\n2.928237\n0.139426\n0.033478\n00:00\n\n\n13\n2.830123\n2.908879\n0.120069\n0.029083\n00:00\n\n\n14\n2.819822\n2.919453\n0.130642\n0.031378\n00:00\n\n\n15\n2.811538\n2.906948\n0.118138\n0.028666\n00:00\n\n\n16\n2.804413\n2.911311\n0.122500\n0.029665\n00:00\n\n\n17\n2.798424\n2.909667\n0.120857\n0.029286\n00:00\n\n\n18\n2.793306\n2.913197\n0.124386\n0.030075\n00:00\n\n\n19\n2.788728\n2.912609\n0.123799\n0.029961\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold6------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.297189\n3.136102\n0.320835\n0.071463\n00:00\n\n\n1\n3.249536\n3.097304\n0.282038\n0.066755\n00:00\n\n\n2\n3.176144\n2.978935\n0.163668\n0.041619\n00:00\n\n\n3\n3.096929\n3.038055\n0.222788\n0.047839\n00:00\n\n\n4\n3.042613\n2.930212\n0.114946\n0.027027\n00:00\n\n\n5\n3.009720\n2.961850\n0.146584\n0.036113\n00:00\n\n\n6\n2.980234\n2.934232\n0.118966\n0.028464\n00:00\n\n\n7\n2.950530\n2.916851\n0.101585\n0.024648\n00:00\n\n\n8\n2.923650\n2.914764\n0.099498\n0.023798\n00:00\n\n\n9\n2.900300\n2.905350\n0.090084\n0.021675\n00:00\n\n\n10\n2.879807\n2.909664\n0.094397\n0.022672\n00:00\n\n\n11\n2.862369\n2.905931\n0.090665\n0.021678\n00:00\n\n\n12\n2.847067\n2.908035\n0.092769\n0.022000\n00:00\n\n\n13\n2.834576\n2.909927\n0.094661\n0.022350\n00:00\n\n\n14\n2.824375\n2.908078\n0.092811\n0.022187\n00:00\n\n\n15\n2.815225\n2.909920\n0.094654\n0.022545\n00:00\n\n\n16\n2.807965\n2.908288\n0.093022\n0.022114\n00:00\n\n\n17\n2.801108\n2.906668\n0.091402\n0.021692\n00:00\n\n\n18\n2.795465\n2.906262\n0.090996\n0.021677\n00:00\n\n\n19\n2.791303\n2.905522\n0.090256\n0.021500\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold7------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.299562\n3.121898\n0.459853\n0.099220\n00:00\n\n\n1\n3.243594\n3.062286\n0.400241\n0.091881\n00:00\n\n\n2\n3.159332\n2.971716\n0.309671\n0.068669\n00:00\n\n\n3\n3.089763\n3.351497\n0.689452\n0.103349\n00:00\n\n\n4\n3.045304\n2.918247\n0.256202\n0.056467\n00:00\n\n\n5\n3.008193\n2.911331\n0.249286\n0.055545\n00:00\n\n\n6\n2.972661\n2.913930\n0.251885\n0.056160\n00:00\n\n\n7\n2.941783\n2.896349\n0.234304\n0.051629\n00:00\n\n\n8\n2.915963\n2.914812\n0.252767\n0.053871\n00:00\n\n\n9\n2.893497\n2.888577\n0.226532\n0.049996\n00:00\n\n\n10\n2.875000\n2.886438\n0.224393\n0.049796\n00:00\n\n\n11\n2.858765\n2.898579\n0.236534\n0.051343\n00:00\n\n\n12\n2.844424\n2.893336\n0.231291\n0.050411\n00:00\n\n\n13\n2.832489\n2.895736\n0.233691\n0.050632\n00:00\n\n\n14\n2.822521\n2.893903\n0.231857\n0.050457\n-1:59:59\n\n\n15\n2.814178\n2.891891\n0.229846\n0.050070\n00:00\n\n\n16\n2.807404\n2.898021\n0.235976\n0.051179\n00:00\n\n\n17\n2.801465\n2.896371\n0.234326\n0.050828\n00:00\n\n\n18\n2.796492\n2.893707\n0.231662\n0.050206\n00:00\n\n\n19\n2.792389\n2.893404\n0.231358\n0.050177\n00:00\n\n\n\n\n\n\n\n\n\n\n\n\n------fold8------\nlr in training is 0.003\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nKLD\nJSD\ntime\n\n\n\n\n0\n3.291689\n3.126647\n0.328515\n0.072071\n00:00\n\n\n1\n3.247692\n3.070245\n0.272114\n0.064862\n00:00\n\n\n2\n3.171447\n3.193789\n0.395657\n0.082534\n00:00\n\n\n3\n3.087097\n3.136495\n0.338363\n0.060231\n00:00\n\n\n4\n3.034902\n3.407114\n0.608982\n0.063098\n00:00\n\n\n5\n2.998126\n2.938519\n0.140387\n0.032685\n00:00\n\n\n6\n2.965282\n2.934006\n0.135874\n0.031751\n00:00\n\n\n7\n2.936001\n2.920478\n0.122346\n0.028373\n00:00\n\n\n8\n2.909675\n2.920455\n0.122323\n0.028210\n00:00\n\n\n9\n2.887431\n2.947639\n0.149508\n0.034510\n00:00\n\n\n10\n2.868375\n2.975793\n0.177661\n0.038532\n00:00\n\n\n11\n2.851671\n2.975747\n0.177615\n0.039114\n00:00\n\n\n12\n2.838888\n2.943917\n0.145786\n0.032903\n00:00\n\n\n13\n2.827868\n2.999522\n0.201391\n0.037109\n00:00\n\n\n14\n2.817961\n3.014208\n0.216076\n0.037690\n00:00\n\n\n15\n2.810466\n3.005015\n0.206883\n0.036385\n00:00\n\n\n16\n2.803423\n3.015611\n0.217480\n0.037107\n00:00\n\n\n17\n2.797695\n3.024181\n0.226050\n0.037952\n00:00\n\n\n18\n2.792915\n3.014269\n0.216138\n0.037182\n00:00\n\n\n19\n2.789497\n3.015017\n0.216886\n0.037778\n00:00",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#score",
    "href": "kinase_domain/kd_06a_pspa_training_feature_comparison_cnn_group.html#score",
    "title": "DL training: Feature comparison on CNN model",
    "section": "Score",
    "text": "Score\n\nfrom katlas.pssm import *\n\nfrom functools import partial\n\n\ndef score_df(target,pred,func):\n    distance = [func(target.loc[i],pred.loc[i,target.columns]) for i in target.index]\n    return pd.Series(distance,index=target.index)\n\n\njsd_df = partial(score_df,func=js_divergence_flat)\njss_df = partial(score_df,func=js_similarity_flat)\n\nkld_df = partial(score_df,func=kl_divergence_flat)\n\n\ntarget=df_t5[target_col].copy()\n\n\n(oof_t5.nfold == oof_esm.nfold).value_counts()\n\nnfold\nTrue    368\nName: count, dtype: int64\n\n\n\npspa_info['split'] = oof_t5.nfold\n\n\npspa_info['t5'] =jsd_df(target,oof_t5)\npspa_info['esm'] =jsd_df(target,oof_esm)\npspa_info['onehot'] =jsd_df(target,oof_onehot)\npspa_info['onehot_pca'] =jsd_df(target,oof_onehot_pca)\n\n\nimport pandas as pd\n\nfrom katlas.plot import *\nfrom matplotlib import pyplot as plt\n\n\nset_sns()\n\n\n# pspa_info.to_parquet('raw/CNN_feature_compare_group.parquet')\n\n\npspa_info=pd.read_parquet('raw/CNN_feature_compare_group.parquet')\n\n\npspa_info = pspa_info.rename(columns={'t5':'T5(n=1,024)','esm':'ESM2(n=1,280)','onehot':'OneHot(n=6,849)','onehot_pca':'OneHot+PCA(n=1,000)'})\n\ncols=['OneHot(n=6,849)',\n      'OneHot+PCA(n=1,000)',\n      'ESM2(n=1,280)',\n      'T5(n=1,024)']\n\n\nplot_group_bar(pspa_info,cols,group='group')\nplt.ylabel('JS divergence')\nsave_svg('fig/CNN_feature_comparison_group.svg')\n\n\n\n\n\n\n\n\n\nFor JS similarity (less differentiated)\n\npspa_info['t5'] =jss_df(target,oof_t5)\npspa_info['esm'] =jss_df(target,oof_esm)\npspa_info['onehot'] =jss_df(target,oof_onehot)\npspa_info['onehot_pca'] =jss_df(target,oof_onehot_pca)\n\n\nplot_group_bar(pspa_info,['t5','esm','onehot','onehot_pca'],group='group')\nplt.ylabel('JS divergence')",
    "crumbs": [
      "kinase_domain",
      "DL training: Feature comparison on CNN model"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html",
    "href": "kinase_domain/kd_01_get_all_kd.html",
    "title": "Get all kinase domain sequences",
    "section": "",
    "text": "from katlas.data import *\nfrom katlas.utils import *\nimport pandas as pd\nfrom fastcore.all import L\nimport re\n\npd.set_option('display.max_rows', 20)\npd.set_option('display.max_columns', 100)",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#setup",
    "href": "kinase_domain/kd_01_get_all_kd.html#setup",
    "title": "Get all kinase domain sequences",
    "section": "",
    "text": "from katlas.data import *\nfrom katlas.utils import *\nimport pandas as pd\nfrom fastcore.all import L\nimport re\n\npd.set_option('display.max_rows', 20)\npd.set_option('display.max_columns', 100)",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#kinase-domain-info-of-current-human-kinome",
    "href": "kinase_domain/kd_01_get_all_kd.html#kinase-domain-info-of-current-human-kinome",
    "title": "Get all kinase domain sequences",
    "section": "Kinase domain info of current human kinome",
    "text": "Kinase domain info of current human kinome\n\ndf = Data.get_kinase_info()\n\n\ndf.kinasecom_domain.notna().sum()\n\nnp.int64(516)\n\n\n\n# df.uniprot.to_csv('kinase_uniprot.csv')\n\nQuery the uniprot id in ID mapping in uniprot. Add domain [FT] and region in the columns\n\nuniprot=pd.read_excel('raw/idmapping_kinase_info_2025_05_27.xlsx')\n\n\nuniprot['Domain [FT]'].head()\n\n0    DOMAIN 46..315; /note=\"Protein kinase\"; /evide...\n1    DOMAIN 61..121; /note=\"SH3\"; /evidence=\"ECO:00...\n2    DOMAIN 107..167; /note=\"SH3\"; /evidence=\"ECO:0...\n3    DOMAIN 126..385; /note=\"Protein kinase\"; /evid...\n4    DOMAIN 192..485; /note=\"Protein kinase\"; /evid...\nName: Domain [FT], dtype: object\n\n\nFAM20C does not have Domain[FT] but contains Region to indicate kinase domain\n\nuniprot[uniprot['Domain [FT]'].isna()].Region.tolist()\n\n['REGION 62..81; /note=\"Disordered\"; /evidence=\"ECO:0000256|SAM:MobiDB-lite\"; REGION 94..159; /note=\"Disordered\"; /evidence=\"ECO:0000256|SAM:MobiDB-lite\"; REGION 354..565; /note=\"Kinase domain\"; /evidence=\"ECO:0000305|PubMed:22582013\"']\n\n\n\nuniprot = uniprot.dropna(subset='Domain [FT]')\n\n\ndef extract_kinase_domains1(text):\n    \"\"\"\n    Extracts domain or region annotations from text using regex.\n    Includes entries where the note contains either 'kinase' or 'PI3K/PI4K catalytic'.\n    Returns a list of [note, region, evidence] where evidence is set to 'nan' if not present.\n    \"\"\"\n    pattern = r'(?:REGION|DOMAIN) [&lt;&gt;]?(\\d+)\\.\\.[&lt;&gt;]?(\\d+); /note=\"([^\"]*?(?:kinase|PI3K/PI4K catalytic)[^\"]*?)\"(?:; /evidence=\"([^\"]*?)\")?'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    \n    return [[note.strip(), evidence if evidence else 'nan']\n            for start, end, note, evidence in matches]\n\n\nout = uniprot['Domain [FT]'].apply(extract_kinase_domains1)\n\nThe rest of the kinases have domain info:\n\nout.explode().value_counts()\n\nDomain [FT]\n[Protein kinase, ECO:0000255|PROSITE-ProRule:PRU00159]                                  454\n[AGC-kinase C-terminal, ECO:0000255|PROSITE-ProRule:PRU00618]                            55\n[Protein kinase 2, ECO:0000255|PROSITE-ProRule:PRU00159]                                 14\n[Protein kinase 1, ECO:0000255|PROSITE-ProRule:PRU00159]                                 14\n[Protein kinase, nan]                                                                     7\n[Alpha-type protein kinase, ECO:0000255|PROSITE-ProRule:PRU00501]                         6\n[PI3K/PI4K catalytic, ECO:0000255|PROSITE-ProRule:PRU00269]                               6\n[Histidine kinase, ECO:0000255|PROSITE-ProRule:PRU00107]                                  4\n[Protein kinase, ECO:0000255|PROSITE-ProRule:PRU00159, ECO:0000305]                       4\n[Guanylate kinase-like, ECO:0000255|PROSITE-ProRule:PRU00100]                             1\n[Protein kinase; inactive, ECO:0000255|PROSITE-ProRule:PRU00159]                          1\n[Protein kinase, ECO:0000255|PROSITE-ProRule:PRU00159, ECO:0000269|PubMed:15194684]       1\n[Protein kinase, ECO:0000255|PROSITE-ProRule:PRU00159, ECO:0000269|PubMed:9092543]        1\n[Protein kinase, ECO:0000250|UniProtKB:Q5VT25, ECO:0000255|PROSITE-ProRule:PRU00159]      1\n[Protein kinase, ECO:0000255|PROSITE-ProRule:PRU00159, ECO:0000312|EMBL:CAA84485.1]       1\n[Protein kinase, ECO:0000305]                                                             1\nName: count, dtype: int64\n\n\nWe’ll search uniprot across species based on the info above to get all kinases and their kinase domains.",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#download-kinase-domain-info-from-uniprot",
    "href": "kinase_domain/kd_01_get_all_kd.html#download-kinase-domain-info-from-uniprot",
    "title": "Get all kinase domain sequences",
    "section": "Download kinase domain info from Uniprot",
    "text": "Download kinase domain info from Uniprot\nUniprot reviewed –&gt; search advanced\n–&gt; domain: “Protein kinase”, or “PI3K PI4K catalytic” or “Histidine kinase”\nor –&gt; region: “Kinase domain”\n\nkd1=pd.read_excel('raw/uniprotkb_ft_domain_Protein_kinase_AND_2025_05_25.xlsx')\nkd2=pd.read_excel('raw/uniprotkb_ft_domain_PI3K_PI4K_catalytic_2025_05_25.xlsx')\nkd3=pd.read_excel('raw/uniprotkb_ft_domain_Histidine_kinase_AN_2025_05_25.xlsx')\nkd4=pd.read_excel('raw/uniprotkb_ft_region_Kinase_domain_2025_05_26.xlsx')\n\n\nkd_all = pd.concat([kd1,kd2,kd3,kd4],ignore_index=True)\n\n\nkd_human = kd_all[kd_all.Organism.str.contains('Homo')]",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#check-if-how-it-overlap-with-current-kinome",
    "href": "kinase_domain/kd_01_get_all_kd.html#check-if-how-it-overlap-with-current-kinome",
    "title": "Get all kinase domain sequences",
    "section": "Check if how it overlap with current kinome",
    "text": "Check if how it overlap with current kinome\n\nkinase domain query vs. kinome tree kinases\n\nkinase_info = Data.get_kinase_info()\n\n\na,b = get_diff(kd_human,kinase_info,'Uniprot','uniprot')\n\n\nb.iloc[:,:5] # special for kinome tree\n\n\n\n\n\n\n\n\nkinase\nID_coral\nuniprot\ngene\nmodi_group\n\n\n\n\n41\nBRD2\nBRD2\nP25440\nBRD2\nAtypical\n\n\n42\nBRD3\nBRD3\nQ15059\nBRD3\nAtypical\n\n\n43\nBRD4\nBRD4\nO60885\nBRD4\nAtypical\n\n\n44\nBRDT\nBRDT\nQ58F21\nBRDT\nAtypical\n\n\n486\nTRIM24\nTIF1a\nO15164\nTRIM24\nAtypical\n\n\n487\nTRIM28\nTIF1b\nQ13263\nTRIM28\nAtypical\n\n\n488\nTRIM33\nTIF1g\nQ9UPN9\nTRIM33\nAtypical\n\n\n\n\n\n\n\nThese kinases does not have clear boundary of kinase domain in the domain[FT] column.\n\na.iloc[:,:5] # special for kinase domain query\n\n\n\n\n\n\n\n\nUniprot\nReviewed\nEntry Name\nProtein names\nGene Names\n\n\n\n\n895\nP21675\nreviewed\nTAF1_HUMAN\nTranscription initiation factor TFIID subunit ...\nTAF1 BA2R CCG1 CCGS TAF2A\n\n\n1982\nQ496M5\nreviewed\nPLK5_HUMAN\nInactive serine/threonine-protein kinase PLK5 ...\nPLK5 PLK5P FG060302\n\n\n2448\nQ6A1A2\nreviewed\nPDPK2_HUMAN\nPutative 3-phosphoinositide-dependent protein ...\nPDPK2P PDPK2\n\n\n2894\nQ8NEV1\nreviewed\nCSK23_HUMAN\nCasein kinase II subunit alpha 3 (CK II alpha ...\nCSNK2A3 CSNK2A1P\n\n\n3624\nQ9UQ88\nreviewed\nCD11A_HUMAN\nCyclin-dependent kinase 11A (EC 2.7.11.22) (Ce...\nCDK11A CDC2L2 CDC2L3 PITSLREB\n\n\n...\n...\n...\n...\n...\n...\n\n\n4761\nQ9UBF8\nreviewed\nPI4KB_HUMAN\nPhosphatidylinositol 4-kinase beta (PI4K-beta)...\nPI4KB PIK4CB\n\n\n4790\nA4QPH2\nreviewed\nPI4P2_HUMAN\nPutative phosphatidylinositol 4-kinase alpha-l...\nPI4KAP2\n\n\n4812\nA4D2B8\nreviewed\nPM2P1_HUMAN\nPutative postmeiotic segregation increased 2-l...\nPMS2P1 PMS2L1 PMS2L13 PMS2L6 PMS2L8 PMS3 PMS8 ...\n\n\n4878\nQ15119\nreviewed\nPDK2_HUMAN\n[Pyruvate dehydrogenase (acetyl-transferring)]...\nPDK2 PDHK2\n\n\n5441\nQ8N159\nreviewed\nNAGS_HUMAN\nN-acetylglutamate synthase, mitochondrial (EC ...\nNAGS\n\n\n\n\n21 rows × 5 columns\n\n\n\nKinase keyword query contains a lot of non-serine/thronine/tyrosine kinases.\n\n\nkinase domain query vs. kinase keyword query\n\nall_kinase = pd.read_excel('raw/uniprot_human_keyword_kinase.xlsx').rename(columns={'Entry':'Uniprot'})\n\n\na,b = get_diff(kd_human,all_kinase,'Uniprot')\n\n\na.iloc[:,:5] # special for kd domain query\n\n\n\n\n\n\n\n\nUniprot\nReviewed\nEntry Name\nProtein names\nGene Names\n\n\n\n\n1982\nQ496M5\nreviewed\nPLK5_HUMAN\nInactive serine/threonine-protein kinase PLK5 ...\nPLK5 PLK5P FG060302\n\n\n5441\nQ8N159\nreviewed\nNAGS_HUMAN\nN-acetylglutamate synthase, mitochondrial (EC ...\nNAGS\n\n\n\n\n\n\n\nkd domain query also include inactive kinase (PLK5), which is not marked with ‘kinase’ in the keywords.\nAnother one is NAGS, which contains Amino-acid kinase domain (AAK), and not marked with ‘kinase’ in the keywords.\n\nb.iloc[:,:5] # special for kinase keyword query\n\n\n\n\n\n\n\n\nUniprot\nEntry Name\nProtein names\nGene Names\nuniprot_keyword_kinase\n\n\n\n\n0\nA2RU49\nHYKK_HUMAN\nHydroxylysine kinase (5-hydroxy-L-lysine kinas...\nHYKK AGPHD1\n1\n\n\n3\nO00142\nKITM_HUMAN\nThymidine kinase 2, mitochondrial (EC 2.7.1.21...\nTK2\n1\n\n\n11\nO00746\nNDKM_HUMAN\nNucleoside diphosphate kinase, mitochondrial (...\nNME4 NM23D\n1\n\n\n13\nO00764\nPDXK_HUMAN\nPyridoxal kinase (EC 2.7.1.35) (Pyridoxine kin...\nPDXK C21orf124 C21orf97 PKH PNK PRED79\n1\n\n\n23\nO14986\nPI51B_HUMAN\nPhosphatidylinositol 4-phosphate 5-kinase type...\nPIP5K1B STM7\n1\n\n\n...\n...\n...\n...\n...\n...\n\n\n638\nO60885\nBRD4_HUMAN\nBromodomain-containing protein 4 (Protein HUNK1)\nBRD4 HUNK1\n0\n\n\n639\nQ58F21\nBRDT_HUMAN\nBromodomain testis-specific protein (Cancer/te...\nBRDT\n0\n\n\n663\nO15164\nTIF1A_HUMAN\nTranscription intermediary factor 1-alpha (TIF...\nTRIM24 RNF82 TIF1 TIF1A\n0\n\n\n664\nQ13263\nTIF1B_HUMAN\nTranscription intermediary factor 1-beta (TIF1...\nTRIM28 KAP1 RNF96 TIF1B\n0\n\n\n665\nQ9UPN9\nTRI33_HUMAN\nE3 ubiquitin-protein ligase TRIM33 (EC 2.3.2.2...\nTRIM33 KIAA1113 RFG7 TIF1G\n0\n\n\n\n\n151 rows × 5 columns\n\n\n\nKinase keyword query contains a lot of non-serine/thronine/tyrosine kinases.",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#extract-kinase-domain-info",
    "href": "kinase_domain/kd_01_get_all_kd.html#extract-kinase-domain-info",
    "title": "Get all kinase domain sequences",
    "section": "Extract kinase domain info",
    "text": "Extract kinase domain info\nGet residue start, end, and evidence info.\n\ndef extract_kinase_domains(text):\n    \"\"\"\n    Extracts domain or region annotations from text using regex.\n    Includes entries where the note contains either 'kinase' or 'PI3K/PI4K catalytic'.\n    Returns a list of [note, region, evidence] where evidence is set to 'nan' if not present.\n    \"\"\"\n    pattern = r'(?:REGION|DOMAIN) [&lt;&gt;]?(\\d+)\\.\\.[&lt;&gt;]?(\\d+); /note=\"([^\"]*?(?:kinase|PI3K/PI4K catalytic)[^\"]*?)\"(?:; /evidence=\"([^\"]*?)\")?'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    \n    return [[note.strip(),int(start),int(end), evidence if evidence else 'nan']\n            for start, end, note, evidence in matches]\n\n\nRegion column\nSpecific for kd4, without domain info but with region info\n\nkd4['kd_info'] = kd4['Region'].apply(extract_kinase_domains)\n\n\nkd4['kd_info']\n\n0     [[Amino-acid kinase domain (AAK), 40, 361, ECO...\n1     [[Kinase domain, 349, 560, ECO:0000250|UniProt...\n2     [[Kinase domain, 354, 565, ECO:0000305|PubMed:...\n3      [[Amino-acid kinase domain (AAK), 19, 376, nan]]\n4     [[Amino-acid kinase domain (AAK), 19, 369, ECO...\n5        [[HWE histidine kinase domain, 160, 236, nan]]\n6        [[HWE histidine kinase domain, 285, 367, nan]]\n7        [[HWE histidine kinase domain, 260, 303, nan]]\n8        [[HWE histidine kinase domain, 259, 341, nan]]\n9        [[HWE histidine kinase domain, 259, 341, nan]]\n10       [[HWE histidine kinase domain, 286, 368, nan]]\n11       [[HWE histidine kinase domain, 285, 367, nan]]\n12       [[HWE histidine kinase domain, 285, 367, nan]]\n13       [[HWE histidine kinase domain, 285, 367, nan]]\n14       [[HWE histidine kinase domain, 254, 336, nan]]\n15       [[HWE histidine kinase domain, 259, 341, nan]]\nName: kd_info, dtype: object\n\n\n\n\nDomain\nMost kinases contain domain info for kinase domain.\n\nkd = pd.concat([kd1,kd2,kd3])\n\n\nkd = kd.drop_duplicates('Uniprot').reset_index(drop=True)\n\n\nkd['kd_info'] = kd['Domain [FT]'].apply(extract_kinase_domains)\n\n\nkd['kd_info'].str.len().value_counts() # check non-zero\n\nkd_info\n1    5015\n2     397\n3      22\nName: count, dtype: int64\n\n\nSome kinase contain 3 kinase domains\n\nkd[kd['kd_info'].str.len()==3]['Domain [FT]'].tolist()[0]\n\n'DOMAIN 49..318; /note=\"Protein kinase 1\"; /evidence=\"ECO:0000255|PROSITE-ProRule:PRU00159\"; DOMAIN 319..387; /note=\"AGC-kinase C-terminal\"; /evidence=\"ECO:0000255|PROSITE-ProRule:PRU00618\"; DOMAIN 426..687; /note=\"Protein kinase 2\"; /evidence=\"ECO:0000255|PROSITE-ProRule:PRU00159\"'\n\n\nAfter check, it seems it includes C-terminal domain. We will later remove them\n\nkd_final = pd.concat([kd,kd4])\n\n\ndf = kd_final.explode('kd_info', ignore_index=True)\n\n\ndf[['domain_note', 'domain_start','domain_end', 'domain_evidence']] = df.kd_info.apply(pd.Series)\n\n\ndf = df.drop(columns=['kd_info'])\n\nRemove non kinase domains:\n\ndf.columns\n\nIndex(['Uniprot', 'Reviewed', 'Entry Name', 'Protein names', 'Gene Names',\n       'Gene Names (primary)', 'Organism', 'Length', 'Domain [FT]',\n       'Domain [CC]', 'Motif', 'Protein families', 'Reactome', 'ComplexPortal',\n       'Subcellular location [CC]', 'Gene Ontology (biological process)',\n       'Tissue specificity', 'Interacts with', 'Subunit structure',\n       'Function [CC]', 'Activity regulation', 'Mass', 'Sequence', 'Region',\n       'domain_note', 'domain_start', 'domain_end', 'domain_evidence'],\n      dtype='object')\n\n\n\ndf = df[df.domain_note!='AGC-kinase C-terminal'].reset_index(drop=True)\n\n\ndf.domain_note.value_counts()\n\ndomain_note\nProtein kinase                    4530\nHistidine kinase                   625\nPI3K/PI4K catalytic                168\nProtein kinase 2                    73\nProtein kinase 1                    73\nAlpha-type protein kinase           22\nProtein kinase; inactive            13\nHWE histidine kinase domain         11\nGuanylate kinase-like                5\nHistidine kinase 2                   4\nHistidine kinase 1                   4\nAmino-acid kinase domain (AAK)       3\nKinase domain                        2\nProtein kinase; truncated            1\nHistidine kinase; first part         1\nHistidine kinase; second part        1\nName: count, dtype: int64",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#download-uniprot-sequence",
    "href": "kinase_domain/kd_01_get_all_kd.html#download-uniprot-sequence",
    "title": "Get all kinase domain sequences",
    "section": "Download uniprot sequence",
    "text": "Download uniprot sequence\nThe big TITIN proteins (A2ASS6 for mouse, and Q8WZ42 for human) is truncated when downloaded online.\n\nfrom tqdm.contrib.concurrent import thread_map\nfrom kdock.core.protein import get_uniprot_seq\n\n\ndf = df.rename(columns={'Sequence':'full_protein_seq'})\n\n\nfull_seq = thread_map(get_uniprot_seq,df.Uniprot, max_workers=5)\n\n\ndf['full_seq']=full_seq\n\n\ndf[df['full_seq']!=df['full_protein_seq']]\n\nSeems the uniprot online download have limits length in downloading.\n\ndf['full_seq'] = df['full_protein_seq']",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#get-domain-sequence",
    "href": "kinase_domain/kd_01_get_all_kd.html#get-domain-sequence",
    "title": "Get all kinase domain sequences",
    "section": "Get domain sequence",
    "text": "Get domain sequence\n\ndef get_region(seq,start,end): return seq[start-1:end]\n\n\ndf['domain_seq'] = df.apply(lambda r: get_region(r['full_seq'],r['domain_start'],r['domain_end']),axis=1)\n\n\ndf['domain_seq']\n\n0       AGFHEILGAGASGVVYKGQLEDELKTNIAVKTIHKLQPETEKEFMV...\n1       YMLGDEIGKGAYGRVYIGLDLENGDFVAIKQVSLENIVQEDLNTIM...\n2       YKVIAELGHGLWSRDVLAEHRFIKKRYILKILPSELSSSENFMRVF...\n3       TLSDCQIGHGATATVFKMDIKIKKELQNGRMGEAVGDQMKAALKRF...\n4       FDSGNVIGVGGSGATVYEGVLPSGSRVAVKRFQAIGSCTKAFDSEL...\n                              ...                        \n5531    EIAHRFKNSMAMVQSIANQTLRNTYDPEQANRLFSERLRALSQAHD...\n5532    EIAHRFKNSMAMVQSIANQTLRNTYDPEQANRLFSERLRALSQAHD...\n5533    EIAHRFKNSMAMVQSIVNQTLRNTYDPEQANRLFSERLRALSQAHD...\n5534    ALTGENPLVLGIVQDVTERKKAEANKALVSREIAHRFKNSMAMVQS...\n5535    NPLVLGIVQDVTERKKAEANKALVSREIAHRFKNSMAMVQSIANQT...\nName: domain_seq, Length: 5536, dtype: object\n\n\n\ndf['domain_seq'].isna().sum()\n\nnp.int64(0)",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#arrange-columns-save",
    "href": "kinase_domain/kd_01_get_all_kd.html#arrange-columns-save",
    "title": "Get all kinase domain sequences",
    "section": "Arrange columns & save",
    "text": "Arrange columns & save\n\ndf = df.sort_values(['Uniprot','domain_start']).reset_index(drop=True)\n\n\ndf['KD_ID']=df['Uniprot']+'_'+df['Entry Name']+'_KD'+(df.Uniprot.duplicated().astype(int)+1).astype(str)\n\n\ncol = ['KD_ID','Uniprot',  'Entry Name', 'Protein names', 'Gene Names','Gene Names (primary)',\n     'Organism', 'domain_note','domain_evidence', 'domain_start', 'domain_end','domain_seq' , 'Domain [FT]',\n       'Domain [CC]', 'Region', 'Motif', 'Protein families', 'Reactome', 'ComplexPortal',\n       'Subcellular location [CC]', 'Gene Ontology (biological process)',\n       'Tissue specificity', 'Interacts with', 'Subunit structure',\n       'Function [CC]', 'Activity regulation',  'full_seq', \n       ]\n\n\ndf = df[col]\n\n\n# df[df.KD_ID.str.contains('JAK1')] # check JAK1 to see if KD1 and KD2 is assigned correctly\n\n\nnew_colname=['kd_ID','Uniprot',  'Entry Name', 'Protein names', 'Gene Names','Gene Names (primary)',\n     'Organism', 'kd_note','kd_evidence', 'kd_start', 'kd_end','kd_seq' , 'Domain [FT]',\n       'Domain [CC]', 'Region', 'Motif', 'Protein families', 'Reactome', 'ComplexPortal',\n       'Subcellular location [CC]', 'Gene Ontology (biological process)',\n       'Tissue specificity', 'Interacts with', 'Subunit structure',\n       'Function [CC]', 'Activity regulation',  'full_seq', \n       ]\n\n\ndf.columns=new_colname\n\n\n# df.to_excel('out/uniprot_kd.xlsx',index=False)\n\n\ndf.shape\n\n(5536, 27)\n\n\nIt can be acquired through Data.get_kd_uniprot()\nfrom katlas.data import *\ndf = Data.get_kd_uniprot()",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#kinases-with-1-2-kinase-domains",
    "href": "kinase_domain/kd_01_get_all_kd.html#kinases-with-1-2-kinase-domains",
    "title": "Get all kinase domain sequences",
    "section": "Kinases with 1-2 kinase domains",
    "text": "Kinases with 1-2 kinase domains\n\ndf.columns\n\nIndex(['kd_ID', 'Uniprot', 'Entry Name', 'Protein names', 'Gene Names',\n       'Gene Names (primary)', 'Organism', 'kd_note', 'kd_evidence',\n       'kd_start', 'kd_end', 'kd_seq', 'Domain [FT]', 'Domain [CC]', 'Region',\n       'Motif', 'Protein families', 'Reactome', 'ComplexPortal',\n       'Subcellular location [CC]', 'Gene Ontology (biological process)',\n       'Tissue specificity', 'Interacts with', 'Subunit structure',\n       'Function [CC]', 'Activity regulation', 'full_seq'],\n      dtype='object')\n\n\n\nout = df.groupby('Uniprot').agg({'kd_note':list})\n\n\nout.kd_note.value_counts()\n\nkd_note\n[Protein kinase]                            4521\n[Histidine kinase]                           621\n[PI3K/PI4K catalytic]                        168\n[Protein kinase 1, Protein kinase 2]          73\n[Alpha-type protein kinase]                   22\n[Protein kinase; inactive]                    13\n[HWE histidine kinase domain]                 11\n[Protein kinase, Guanylate kinase-like]        5\n[Histidine kinase 1, Histidine kinase 2]       4\n[Protein kinase, Histidine kinase]             4\n[Amino-acid kinase domain (AAK)]               3\n[Kinase domain]                                2\n[Histidine kinase; first part]                 1\n[Histidine kinase; second part]                1\n[Protein kinase; truncated]                    1\nName: count, dtype: int64\n\n\nSome kinases contain two kinase domains. Some are both protein kinase domains, while some have the first to be protein kinase and the second to be histidine kinase.",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "kinase_domain/kd_01_get_all_kd.html#duplicates-among-kinase-domains",
    "href": "kinase_domain/kd_01_get_all_kd.html#duplicates-among-kinase-domains",
    "title": "Get all kinase domain sequences",
    "section": "Duplicates among kinase domains",
    "text": "Duplicates among kinase domains\nAcross species\n\ndef get_dup(df):\n    dup = df[df.kd_seq.duplicated(keep=False)].sort_values('kd_seq')\n    return dup.groupby('kd_seq').agg({'kd_ID':lambda x: ','.join(x)}).reset_index()\n\n\ndup_unique = get_dup(df)\n\n\ndup_unique[dup_unique.kd_ID.str.contains(\"HUMAN\")]\n\n\n\n\n\n\n\n\nkd_seq\nkd_ID\n\n\n\n\n26\nEPWQEKVRRIREGSPYGHLPNWRLLSVIVKCGDDLRQELLAFQVLK...\nB4UT09_PI4KB_OTOGA_KD1,A9X1A0_PI4KB_PAPAN_KD1,...\n\n\n30\nEYEGCKVGRGTYGHVYKARRKDGKDEKEYALKQIEGTGISMSACRE...\nQ8BWD8_CDK19_MOUSE_KD1,Q9BWU1_CDK19_HUMAN_KD1\n\n\n31\nFDFLKVIGKGSFGKVLLAKRKLDGKFYAVKVLQKKIVLNRKEQKHI...\nQ96BR1_SGK3_HUMAN_KD1,Q5R7A7_SGK3_PONAB_KD1\n\n\n33\nFDIIGIIGEGTYGQVYKARDKDTGEMVALKKVRLDNEKEGFPITAI...\nE1BB52_CDK13_BOVIN_KD1,Q14004_CDK13_HUMAN_KD1,...\n\n\n34\nFDLIRVIGRGSYAKVLLVRLKKNDQIYAMKVVKKELVHDDEDIDWV...\nP09217_KPCZ_RAT_KD1,Q05513_KPCZ_HUMAN_KD1,Q029...\n\n\n...\n...\n...\n\n\n271\nYTLKDEIGKGSYGVVKLAYNENDNTYYAMKVLSKKKLIRQAGFPRR...\nQ96RR4_KKCC2_HUMAN_KD1,O88831_KKCC2_RAT_KD1\n\n\n274\nYTNLSYIGEGAYGMVCSAYDNVNKVRVAIKKISPFEHQTYCQRTLR...\nP46196_MK01_BOVIN_KD1,P28482_MK01_HUMAN_KD1\n\n\n276\nYTRFEKIGQGASGTVYTALDIATGQEVAIKQMNLQQQPKKELIINE...\nQ7YQL4_PAK3_PANTR_KD1,Q7YQL3_PAK3_PONPY_KD1,O7...\n\n\n277\nYTRFEKIGQGASGTVYTAMDVATGQEVAIKQMNLQQQPKKELIINE...\nQ13153_PAK1_HUMAN_KD1,P35465_PAK1_RAT_KD1,Q08E...\n\n\n278\nYTRYEKIGQGASGTVFTATDVALGQEVAIKQINLQKQPKKELIINE...\nQ13177_PAK2_HUMAN_KD1,Q8CIN4_PAK2_MOUSE_KD1\n\n\n\n\n90 rows × 2 columns\n\n\n\nDuplicates within human\n\nhuman=df[df.Organism=='Homo sapiens (Human)']\n\ndup_human = get_dup(human)\n\n\ndup_human\n\n\n\n\n\n\n\n\nkd_seq\nkd_ID\n\n\n\n\n\n\n\n\n\nCheck duplicates within other species\n\nspecies = df.Organism.value_counts().head().index\n\n\nfor s in species:\n    df_species=df[df.Organism==s]\n    print(s)\n    print(get_dup(df_species))\n\nArabidopsis thaliana (Mouse-ear cress)\nEmpty DataFrame\nColumns: [kd_seq, kd_ID]\nIndex: []\nMus musculus (Mouse)\n                                              kd_seq  \\\n0  YVMLETIGHGGCATVKLAQHRLTGTHVAVKTIRKREYWCNRVISEV...   \n\n                                           kd_ID  \n0  C0HKC8_SMK3A_MOUSE_KD1,C0HKC9_SMK3B_MOUSE_KD1  \nHomo sapiens (Human)\nEmpty DataFrame\nColumns: [kd_seq, kd_ID]\nIndex: []\nDictyostelium discoideum (Social amoeba)\nEmpty DataFrame\nColumns: [kd_seq, kd_ID]\nIndex: []\nRattus norvegicus (Rat)\nEmpty DataFrame\nColumns: [kd_seq, kd_ID]\nIndex: []\n\n\nonly mouse SMK3A/3B duplicates in the top 5 species",
    "crumbs": [
      "kinase_domain",
      "Get all kinase domain sequences"
    ]
  },
  {
    "objectID": "nb.html",
    "href": "nb.html",
    "title": "Chapter 1",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "Chapter 1"
    ]
  },
  {
    "objectID": "nb.html#developer-guide",
    "href": "nb.html#developer-guide",
    "title": "Chapter 1",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall katlas_raw in Development mode\n# make sure katlas_raw package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to katlas_raw\n$ nbdev_prepare",
    "crumbs": [
      "Chapter 1"
    ]
  },
  {
    "objectID": "nb.html#usage",
    "href": "nb.html#usage",
    "title": "Chapter 1",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/sky1ove/katlas-raw.git\nor from conda\n$ conda install -c sky1ove katlas_raw\nor from pypi\n$ pip install katlas_raw\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "Chapter 1"
    ]
  },
  {
    "objectID": "nb.html#how-to-use",
    "href": "nb.html#how-to-use",
    "title": "Chapter 1",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "Chapter 1"
    ]
  }
]